roohbaru_app/lib/main.dart: [
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

import 'services/auth_service.dart';
import 'blocs/auth_bloc.dart';
import 'blocs/auth_event.dart';
import 'blocs/auth_state.dart';
import 'blocs/journal_bloc.dart';
import 'screens/home_screen.dart';
import 'screens/intro_screen.dart';

// import 'package:http/http.dart' as http;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: "assets/.env");
  await Firebase.initializeApp();
  // testNetwork();
  runApp(const MyApp());
}

// void testNetwork() async {
//   try {
//     final r = await http.get(Uri.parse('https://www.google.com'));
//     print('Google status: ${r.statusCode}');
//   } catch (e) {
//     print('Network test failed: $e');
//   }
// }



class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider<AuthBloc>(
          create: (_) => AuthBloc(AuthService())..add(AppStarted()),
        ),
        BlocProvider<JournalBloc>(
          create: (_) => JournalBloc(),
        ),
      ],
      child: MaterialApp(
        title: 'Journal App',
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          useMaterial3: true,
          colorSchemeSeed: Colors.indigo,
          scaffoldBackgroundColor: Colors.white,
          appBarTheme: const AppBarTheme(
            elevation: 0,
            backgroundColor: Colors.transparent,
            iconTheme: IconThemeData(color: Colors.black),
          ),
        ),
        home: BlocBuilder<AuthBloc, AuthState>(
          builder: (context, state) {
            if (state is AuthAuthenticated) {
              return HomeScreen(user: state.user);
            } else {
              return const IntroScreen();
            }
          },
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/utils/mood_utils.dart: [
// lib/utils/mood_utils.dart

import 'package:flutter/material.dart';

/// Default background color when no mood match is found.
const Color defaultMoodBackground = Color(0xFFf8eed5);

/// Map from mood string → background color.
const Map<String, Color> moodBackgroundColors = {
  'Happy': Color(0xFFAADAF0),
  'Excited': Color(0xFFD6D3F9),
  'Calm': Color(0xFF7FD1AE),
  'Grateful': Color(0xFFF1DEAC),
  'Loving': Color(0xFFF5C8CB),
  'Confident': Color(0xFFFFC5A6),
  'Sad': Color(0xFFF5C8CB),
  'Angry': Color(0xFFFFC5A6),
  'Anxious': Color(0xFFD6D3F9),
  'Lonely': Color(0xFFAADAF0),
  'Guilty': Color(0xFFF1DEAC),
  'Jealous': Color(0xFF7FD1AE),
  'Confused': Color(0xFFD6D3F9),
  'Surprised': Color(0xFFAADAF0),
  'Bored': Color(0xFFF1DEAC),
  'Restless': Color(0xFFFFC5A6),
  'Inspired': Color(0xFF7FD1AE),
  'Distracted': Color(0xFFD6D3F9),
};

]

roohbaru_app/lib/models/journal_entry.dart: [
import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';

class Attachment {
  final String url;
  final String name;
  final String type; // e.g., 'image', 'pdf', 'doc'
  final String? base64Data; // holds the image’s Base64 if present

  Attachment({
    required this.url,
    required this.name,
    required this.type,
    this.base64Data,
  });

  factory Attachment.fromMap(Map<String, dynamic> map) {
    return Attachment(
      url: map['url'] as String,
      name: map['name'] as String,
      type: map['type'] as String,
      base64Data: map['data'] as String?,
    );
  }

  Map<String, dynamic> toMap() {
    final m = <String, dynamic>{
      'url': url,
      'name': name,
      'type': type,
    };
    if (base64Data != null) {
      m['data'] = base64Data;
    }
    return m;
  }
}

class JournalEntry {
  final String id;
  final String userId;
  final String title;
  final String content;
  final DateTime timestamp;
  final List<Attachment> attachments;

  // NEW:
  final String sentiment;
  final String mood;
  final List<String> suggestions;
  final String analysis; // ← New field

  const JournalEntry({
    required this.id,
    required this.userId,
    required this.title,
    required this.content,
    required this.timestamp,
    this.attachments = const [],
    this.sentiment = '',
    this.mood = '',
    this.suggestions = const [],
    this.analysis = '', // ← default
  });

  factory JournalEntry.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return JournalEntry(
      id: doc.id,
      userId: data['userId'] as String,
      title: data['title'] as String,
      content: data['content'] as String,
      timestamp: (data['timestamp'] as Timestamp).toDate(),
      attachments: (data['attachments'] as List<dynamic>? ?? [])
          .map((a) => Attachment.fromMap(a as Map<String, dynamic>))
          .toList(),
      sentiment: data['sentiment'] as String? ?? '',
      mood: data['mood'] as String? ?? '',
      suggestions:
          List<String>.from(data['suggestions'] as List<dynamic>? ?? []),
      analysis: data['analysis'] as String? ?? '', // ← read from Firestore
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'title': title,
      'content': content,
      'timestamp': Timestamp.fromDate(timestamp),
      'attachments': attachments.map((a) => a.toMap()).toList(),
      'sentiment': sentiment,
      'mood': mood,
      'suggestions': suggestions,
      'analysis': analysis, // ← write to Firestore
    };
  }

  JournalEntry copyWith({
    String? title,
    String? content,
    List<Attachment>? attachments,
    String? sentiment,
    String? mood,
    List<String>? suggestions,
    String? analysis, // ← allow update
  }) {
    return JournalEntry(
      id: id,
      userId: userId,
      title: title ?? this.title,
      content: content ?? this.content,
      timestamp: timestamp,
      attachments: attachments ?? this.attachments,
      sentiment: sentiment ?? this.sentiment,
      mood: mood ?? this.mood,
      suggestions: suggestions ?? this.suggestions,
      analysis: analysis ?? this.analysis,
    );
  }
}

]

roohbaru_app/lib/blocs/insights_state.dart: [
// lib/blocs/insights_state.dart
import 'package:equatable/equatable.dart';
import 'package:roohbaru_app/models/journal_entry.dart';
import '../blocs/insights_event.dart';

class InsightsState extends Equatable {
  final List<JournalEntry> allEntries;
  final DurationFilter durationFilter;
  final int totalEntries;
  final double changePercent;
  final bool hasChange; // false for allTime
  final bool isIncrease; // true if +, false if –
  final Map<String, int> categoryCounts; // { 'Positive': 10, ... }
  final String? selectedCategory; // which bar was tapped
  final Map<String, int> moodBreakdownCounts; // per-mood in selected category

  const InsightsState({
    required this.allEntries,
    required this.durationFilter,
    required this.totalEntries,
    required this.changePercent,
    required this.hasChange,
    required this.isIncrease,
    required this.categoryCounts,
    required this.selectedCategory,
    required this.moodBreakdownCounts,
  });

  factory InsightsState.initial() {
    return InsightsState(
      allEntries: [],
      durationFilter: DurationFilter.allTime,
      totalEntries: 0,
      changePercent: 0,
      hasChange: false,
      isIncrease: true,
      categoryCounts: const {'Positive': 0, 'Neutral': 0, 'Negative': 0},
      selectedCategory: null,
      moodBreakdownCounts: const {},
    );
  }

  InsightsState copyWith({
    List<JournalEntry>? allEntries,
    DurationFilter? durationFilter,
    int? totalEntries,
    double? changePercent,
    bool? hasChange,
    bool? isIncrease,
    Map<String, int>? categoryCounts,
    String? selectedCategory, // pass null to clear
    Map<String, int>? moodBreakdownCounts,
  }) {
    return InsightsState(
      allEntries: allEntries ?? this.allEntries,
      durationFilter: durationFilter ?? this.durationFilter,
      totalEntries: totalEntries ?? this.totalEntries,
      changePercent: changePercent ?? this.changePercent,
      hasChange: hasChange ?? this.hasChange,
      isIncrease: isIncrease ?? this.isIncrease,
      categoryCounts: categoryCounts ?? this.categoryCounts,
      selectedCategory: selectedCategory,
      moodBreakdownCounts: moodBreakdownCounts ?? this.moodBreakdownCounts,
    );
  }

  @override
  List<Object?> get props => [
        allEntries,
        durationFilter,
        totalEntries,
        changePercent,
        hasChange,
        isIncrease,
        categoryCounts,
        selectedCategory,
        moodBreakdownCounts,
      ];
}

]

roohbaru_app/lib/blocs/search_event.dart: [
import 'package:equatable/equatable.dart';
import '../models/journal_entry.dart';

abstract class SearchEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

/// Fired whenever JournalBloc emits a fresh list of entries.
class EntriesUpdated extends SearchEvent {
  final List<JournalEntry> entries;
  EntriesUpdated(this.entries);
  @override
  List<Object?> get props => [entries];
}

/// Fired as the user types into the search box.
class QueryChanged extends SearchEvent {
  final String query;
  QueryChanged(this.query);
  @override
  List<Object?> get props => [query];
}

/// Fired when the user selects a mood filter (or clears it).
class MoodFilterChanged extends SearchEvent {
  final String? mood;
  MoodFilterChanged(this.mood);
  @override
  List<Object?> get props => [mood];
}

/// Fired when the user picks (or clears) a date.
class DateFilterChanged extends SearchEvent {
  final DateTime? date;
  DateFilterChanged(this.date);
  @override
  List<Object?> get props => [date];
}

/// Fired when the user toggles “Photos only”.
class PhotosFilterToggled extends SearchEvent {
  final bool withPhotosOnly;
  PhotosFilterToggled(this.withPhotosOnly);
  @override
  List<Object?> get props => [withPhotosOnly];
}

]

roohbaru_app/lib/blocs/journal_event.dart: [
import 'package:equatable/equatable.dart';
import '../models/journal_entry.dart';

abstract class JournalEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

class LoadEntries extends JournalEvent {
  final String userId;
  LoadEntries(this.userId);
  @override
  List<Object?> get props => [userId];
}

class AddEntry extends JournalEvent {
  final JournalEntry entry;
  AddEntry(this.entry);
  @override
  List<Object?> get props => [entry];
}

class UpdateEntry extends JournalEvent {
  final JournalEntry entry;
  UpdateEntry(this.entry);
  @override
  List<Object?> get props => [entry];
}

class DeleteEntry extends JournalEvent {
  final String entryId;
  DeleteEntry(this.entryId);
  @override
  List<Object?> get props => [entryId];
}

]

roohbaru_app/lib/blocs/journal_bloc.dart: [
// lib/blocs/journal_bloc.dart

import 'dart:developer';
import 'dart:io';
import 'dart:convert';
import 'dart:typed_data';

import 'package:bloc/bloc.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:image/image.dart' as img;
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';

import '../models/journal_entry.dart';
import '../services/ai_service.dart';
import 'journal_event.dart';
import 'journal_state.dart';

class JournalBloc extends Bloc<JournalEvent, JournalState> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  // Pass in your desired personalities here:
  final AIService _aiService = AIService(
    calm: false,
    cheerful: false,
    empathetic: true,
    gentle: false,
    supportive: true,
    humorous: false,
    mindful: false,
    optimistic: false,
  );

  /// Firestore only allows <1 MB per string field.
  static const int _maxFirestoreBase64Size = 1024 * 1024;

  JournalBloc() : super(JournalInitial()) {
    on<LoadEntries>(_onLoadEntries);
    on<AddEntry>(_onAddEntry);
    on<UpdateEntry>(_onUpdateEntry);
    on<DeleteEntry>(_onDeleteEntry);
  }

  Future<void> _onLoadEntries(
      LoadEntries event, Emitter<JournalState> emit) async {
    emit(JournalLoading());
    try {
      // Listen to snapshots, then for each batch decode+rehydrate any Base64 images
      final stream = _firestore
          .collection('entries')
          .where('userId', isEqualTo: event.userId)
          .orderBy('timestamp', descending: true)
          .snapshots()
          .asyncMap((snap) async {
        final List<JournalEntry> entries = [];
        for (var doc in snap.docs) {
          var entry = JournalEntry.fromFirestore(doc);
          final List<Attachment> rehydrated = [];
          for (var att in entry.attachments) {
            if (att.base64Data != null) {
              final bytes = base64Decode(att.base64Data!);
              final appDir = await getApplicationDocumentsDirectory();
              final imagesDir = Directory('${appDir.path}/attachments/images');
              if (!await imagesDir.exists()) {
                await imagesDir.create(recursive: true);
              }
              final filePath = path.join(imagesDir.path, att.name);
              final file = File(filePath);
              await file.writeAsBytes(bytes);
              rehydrated.add(Attachment(
                url: filePath,
                name: att.name,
                type: att.type,
              ));
            } else {
              rehydrated.add(att);
            }
          }
          entry = entry.copyWith(attachments: rehydrated);
          entries.add(entry);
        }
        return entries;
      });

      await emit.forEach<List<JournalEntry>>(
        stream,
        onData: (entries) => JournalLoaded(entries),
        onError: (_, __) => JournalError('Failed to load journal entries.'),
      );
    } catch (e, st) {
      log('LoadEntries error: $e\n$st');
      emit(JournalError('Something went wrong: $e'));
    }
  }

  // Future<void> _onAddEntry(AddEntry event, Emitter<JournalState> emit) async {
  //   try {
  //     final aiResult = await _aiService.analyzeEntry(event.entry.content);
  //     var enriched = event.entry.copyWith(
  //       sentiment: aiResult.sentiment,
  //       mood: aiResult.mood,
  //       suggestions: [aiResult.song, aiResult.movie],
  //     );
  //     enriched = await _prepareEntryForFirestore(enriched);
  //     await _firestore
  //         .collection('entries')
  //         .doc(enriched.id)
  //         .set(enriched.toMap());
  //   } catch (e, st) {
  //     log('AddEntry error: $e\n$st');
  //     emit(JournalError('Failed to add entry: ${e.toString()}'));
  //   }
  // }

  // Future<void> _onUpdateEntry(
  //     UpdateEntry event, Emitter<JournalState> emit) async {
  //   emit(JournalLoading());
  //   try {
  //     final docRef = _firestore.collection('entries').doc(event.entry.id);
  //     final existingDoc = await docRef.get();
  //     if (!existingDoc.exists) {
  //       emit(JournalError('Entry not found for update.'));
  //       return;
  //     }

  //     final previous = JournalEntry.fromFirestore(existingDoc);
  //     JournalEntry updatedEntry;

  //     if (event.entry.content.trim() != previous.content.trim()) {
  //       final aiResult = await _aiService.analyzeEntry(event.entry.content);
  //       updatedEntry = event.entry.copyWith(
  //         sentiment: aiResult.sentiment,
  //         mood: aiResult.mood,
  //         suggestions: [aiResult.song, aiResult.movie],
  //       );
  //     } else {
  //       updatedEntry = event.entry;
  //     }

  //     updatedEntry = await _prepareEntryForFirestore(updatedEntry);
  //     await docRef.update(updatedEntry.toMap());
  //   } catch (e, st) {
  //     log('UpdateEntry error: $e\n$st');
  //     emit(JournalError('Failed to update entry: ${e.toString()}'));
  //   }
  // }

  Future<void> _onAddEntry(AddEntry event, Emitter<JournalState> emit) async {
    try {
      final aiResult = await _aiService.analyzeEntry(event.entry.content);
      var enriched = event.entry.copyWith(
        sentiment: aiResult.sentiment,
        mood: aiResult.mood,
        suggestions: aiResult.suggestions,
        analysis: aiResult.analysis, // ← store analysis
      );
      enriched = await _prepareEntryForFirestore(enriched);
      await _firestore
          .collection('entries')
          .doc(enriched.id)
          .set(enriched.toMap());
    } catch (e, st) {
      log('AddEntry error: $e\n$st');
      emit(JournalError('Failed to add entry: ${e.toString()}'));
    }
  }

  Future<void> _onUpdateEntry(
      UpdateEntry event, Emitter<JournalState> emit) async {
    emit(JournalLoading());
    try {
      final docRef = _firestore.collection('entries').doc(event.entry.id);
      final existingDoc = await docRef.get();
      if (!existingDoc.exists) {
        emit(JournalError('Entry not found for update.'));
        return;
      }

      final previous = JournalEntry.fromFirestore(existingDoc);
      JournalEntry updatedEntry;

      if (event.entry.content.trim() != previous.content.trim()) {
        final aiResult = await _aiService.analyzeEntry(event.entry.content);
        updatedEntry = event.entry.copyWith(
          sentiment: aiResult.sentiment,
          mood: aiResult.mood,
          suggestions: aiResult.suggestions,
          analysis: aiResult.analysis, // ← update analysis
        );
      } else {
        updatedEntry = event.entry;
      }

      updatedEntry = await _prepareEntryForFirestore(updatedEntry);
      await docRef.update(updatedEntry.toMap());
    } catch (e, st) {
      log('UpdateEntry error: $e\n$st');
      emit(JournalError('Failed to update entry: ${e.toString()}'));
    }
  }

  Future<void> _onDeleteEntry(
      DeleteEntry event, Emitter<JournalState> emit) async {
    try {
      await _firestore.collection('entries').doc(event.entryId).delete();
    } catch (e, st) {
      log('DeleteEntry error: $e\n$st');
      emit(JournalError('Failed to delete entry: ${e.toString()}'));
    }
  }

  /// Reads each image file, compresses (plugin then Dart fallback), encodes to Base64,
  /// enforces size limit, and returns a new JournalEntry whose attachments carry that Base64.
  Future<JournalEntry> _prepareEntryForFirestore(JournalEntry entry) async {
    final processed = <Attachment>[];

    for (var a in entry.attachments) {
      if (a.type == 'image' && a.base64Data == null) {
        // Read original bytes
        Uint8List bytes = await File(a.url).readAsBytes();

        // Estimate Base64 size
        final estimatedSize = (bytes.length * 4 / 3).ceil();
        if (estimatedSize > _maxFirestoreBase64Size) {
          // 1) Try native plugin compression
          Uint8List? compressed;
          try {
            compressed = await FlutterImageCompress.compressWithFile(
              a.url,
              quality: 70,
            );
          } catch (_) {
            compressed = null;
          }

          if (compressed != null && compressed.lengthInBytes < bytes.length) {
            bytes = compressed;
          } else {
            // 2) Dart fallback using 'image' package
            final img.Image? original = img.decodeImage(bytes);
            if (original != null) {
              final img.Image resized = img.copyResize(original, width: 800);
              final List<int> jpg = img.encodeJpg(resized, quality: 70);
              bytes = Uint8List.fromList(jpg);
            }
          }
        }

        final b64 = base64Encode(bytes);
        if (b64.length > _maxFirestoreBase64Size) {
          throw Exception(
            'Image "${a.name}" is too large even after compression (<1 MB Base64).',
          );
        }

        processed.add(Attachment(
          url: a.url,
          name: a.name,
          type: a.type,
          base64Data: b64,
        ));
      } else {
        processed.add(a);
      }
    }

    return entry.copyWith(attachments: processed);
  }
}

]

roohbaru_app/lib/blocs/journal_state.dart: [
import 'package:equatable/equatable.dart';
import '../models/journal_entry.dart';

abstract class JournalState extends Equatable {
  @override
  List<Object?> get props => [];
}

class JournalInitial extends JournalState {}

class JournalLoading extends JournalState {}

class JournalLoaded extends JournalState {
  final List<JournalEntry> entries;
  JournalLoaded(this.entries);

  @override
  List<Object?> get props => [entries];
}

class JournalError extends JournalState {
  final String message;
  JournalError(this.message);

  @override
  List<Object?> get props => [message];
}

]

roohbaru_app/lib/blocs/insights_event.dart: [
// lib/blocs/insights_event.dart
import 'package:equatable/equatable.dart';
import '../models/journal_entry.dart';

/// Which time window is selected.
enum DurationFilter { allTime, last30Days, last7Days }

abstract class InsightsEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

/// When JournalBloc emits new entries.
class EntriesUpdated extends InsightsEvent {
  final List<JournalEntry> entries;
  EntriesUpdated(this.entries);
  @override
  List<Object?> get props => [entries];
}

/// User tapped one of the duration buttons.
class DurationChanged extends InsightsEvent {
  final DurationFilter filter;
  DurationChanged(this.filter);
  @override
  List<Object?> get props => [filter];
}

/// User tapped one of the bars (Positive/Neutral/Negative).
class CategorySelected extends InsightsEvent {
  final String category;
  CategorySelected(this.category);
  @override
  List<Object?> get props => [category];
}

]

roohbaru_app/lib/blocs/search_state.dart: [
import 'package:equatable/equatable.dart';
import '../models/journal_entry.dart';

class SearchState extends Equatable {
  final List<JournalEntry> allEntries;
  final List<JournalEntry> filteredEntries;
  final String query;
  final String? mood;
  final DateTime? date;
  final bool withPhotosOnly;

  const SearchState({
    required this.allEntries,
    required this.filteredEntries,
    required this.query,
    required this.mood,
    required this.date,
    required this.withPhotosOnly,
  });

  factory SearchState.initial() {
    return const SearchState(
      allEntries: [],
      filteredEntries: [],
      query: '',
      mood: null,
      date: null,
      withPhotosOnly: false,
    );
  }

  SearchState copyWith({
    List<JournalEntry>? allEntries,
    List<JournalEntry>? filteredEntries,
    String? query,
    String? mood,
    DateTime? date,
    bool? withPhotosOnly,
  }) {
    return SearchState(
      allEntries: allEntries ?? this.allEntries,
      filteredEntries: filteredEntries ?? this.filteredEntries,
      query: query ?? this.query,
      mood: mood ?? this.mood,
      date: date ?? this.date,
      withPhotosOnly: withPhotosOnly ?? this.withPhotosOnly,
    );
  }

  @override
  List<Object?> get props => [
        allEntries,
        filteredEntries,
        query,
        mood,
        date,
        withPhotosOnly,
      ];
}

]

roohbaru_app/lib/blocs/search_bloc.dart: [
import 'dart:async';
import 'package:bloc/bloc.dart';

import '../models/journal_entry.dart';
import 'journal_bloc.dart';
import 'journal_state.dart';
import 'search_event.dart';
import 'search_state.dart';

class SearchBloc extends Bloc<SearchEvent, SearchState> {
  final JournalBloc journalBloc;
  late final StreamSubscription journalSubscription;

  SearchBloc({required this.journalBloc}) : super(SearchState.initial()) {
    // 1. Register all handlers first
    on<EntriesUpdated>(_onEntriesUpdated);
    on<QueryChanged>(_onQueryChanged);
    on<MoodFilterChanged>(_onMoodFilterChanged);
    on<DateFilterChanged>(_onDateFilterChanged);
    on<PhotosFilterToggled>(_onPhotosFilterToggled);

    // 2. Seed initial entries if already loaded
    if (journalBloc.state is JournalLoaded) {
      final entries = (journalBloc.state as JournalLoaded).entries;
      add(EntriesUpdated(entries));
    }

    // 3. Subscribe to JournalBloc for future updates
    journalSubscription = journalBloc.stream.listen((js) {
      if (js is JournalLoaded) {
        add(EntriesUpdated(js.entries));
      }
    });
  }

  void _onEntriesUpdated(EntriesUpdated event, Emitter<SearchState> emit) {
    final filtered = _applyFilters(
      event.entries,
      state.query,
      state.mood,
      state.date,
      state.withPhotosOnly,
    );
    emit(state.copyWith(
      allEntries: event.entries,
      filteredEntries: filtered,
    ));
  }

  void _onQueryChanged(QueryChanged event, Emitter<SearchState> emit) {
    final filtered = _applyFilters(
      state.allEntries,
      event.query,
      state.mood,
      state.date,
      state.withPhotosOnly,
    );
    emit(state.copyWith(
      query: event.query,
      filteredEntries: filtered,
    ));
  }

  void _onMoodFilterChanged(
      MoodFilterChanged event, Emitter<SearchState> emit) {
    final filtered = _applyFilters(
      state.allEntries,
      state.query,
      event.mood,
      state.date,
      state.withPhotosOnly,
    );
    // Use full constructor so `mood: null` actually clears it
    emit(SearchState(
      allEntries: state.allEntries,
      filteredEntries: filtered,
      query: state.query,
      mood: event.mood,
      date: state.date,
      withPhotosOnly: state.withPhotosOnly,
    ));
  }

  void _onDateFilterChanged(
      DateFilterChanged event, Emitter<SearchState> emit) {
    final filtered = _applyFilters(
      state.allEntries,
      state.query,
      state.mood,
      event.date,
      state.withPhotosOnly,
    );
    emit(SearchState(
      allEntries: state.allEntries,
      filteredEntries: filtered,
      query: state.query,
      mood: state.mood,
      date: event.date,
      withPhotosOnly: state.withPhotosOnly,
    ));
  }

  void _onPhotosFilterToggled(
      PhotosFilterToggled event, Emitter<SearchState> emit) {
    final filtered = _applyFilters(
      state.allEntries,
      state.query,
      state.mood,
      state.date,
      event.withPhotosOnly,
    );
    emit(state.copyWith(
      withPhotosOnly: event.withPhotosOnly,
      filteredEntries: filtered,
    ));
  }

  List<JournalEntry> _applyFilters(
    List<JournalEntry> entries,
    String query,
    String? mood,
    DateTime? date,
    bool withPhotosOnly,
  ) {
    return entries.where((entry) {
      // Text search
      if (query.isNotEmpty) {
        final q = query.toLowerCase();
        if (!entry.title.toLowerCase().contains(q) &&
            !entry.content.toLowerCase().contains(q)) {
          return false;
        }
      }
      // Mood filter
      if (mood != null && entry.mood != mood) return false;
      // Date filter
      if (date != null) {
        final eD = DateTime(
            entry.timestamp.year, entry.timestamp.month, entry.timestamp.day);
        final fD = DateTime(date.year, date.month, date.day);
        if (eD != fD) return false;
      }
      // Photos-only
      if (withPhotosOnly && !entry.attachments.any((a) => a.type == 'image')) {
        return false;
      }
      return true;
    }).toList();
  }

  @override
  Future<void> close() {
    journalSubscription.cancel();
    return super.close();
  }
}

]

roohbaru_app/lib/blocs/auth_event.dart: [
import 'package:equatable/equatable.dart';

abstract class AuthEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

class AppStarted extends AuthEvent {}

class GoogleSignInRequested extends AuthEvent {}

class EmailSignInRequested extends AuthEvent {
  final String email;
  final String password;
  EmailSignInRequested({required this.email, required this.password});
  @override
  List<Object?> get props => [email, password];
}

class EmailSignUpRequested extends AuthEvent {
  final String name;
  final String email;
  final String password;
  EmailSignUpRequested({
    required this.name,
    required this.email,
    required this.password,
  });
  @override
  List<Object?> get props => [name, email, password];
}

class SignOutRequested extends AuthEvent {}

]

roohbaru_app/lib/blocs/auth_bloc.dart: [
import 'dart:developer';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../services/auth_service.dart';
import 'auth_event.dart';
import 'auth_state.dart';

class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final AuthService _authService;
  AuthBloc(this._authService) : super(AuthInitial()) {
    on<AppStarted>(_onAppStarted);
    on<GoogleSignInRequested>(_onGoogleSignIn);
    on<EmailSignInRequested>(_onEmailSignIn);
    on<EmailSignUpRequested>(_onEmailSignUp);
    on<SignOutRequested>(_onSignOut);
  }

  Future<void> _onAppStarted(AppStarted event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    final user = _authService.currentUser;
    if (user != null) {
      emit(AuthAuthenticated(user));
    } else {
      emit(AuthUnauthenticated());
    }
  }

  Future<void> _onGoogleSignIn(
      GoogleSignInRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      log('Google sign-in initiated');
      final cred = await _authService.loginWithGoogle();
      if (cred?.user != null) {
        emit(AuthAuthenticated(cred!.user!));
      } else {
        emit(AuthError('Google sign-in cancelled'));
        emit(AuthUnauthenticated());
      }
    } catch (e, st) {
      log('Google sign-in error: $e\n$st');
      emit(AuthError('Google sign-in failed'));
      emit(AuthUnauthenticated());
    }
  }

  Future<void> _onEmailSignIn(
      EmailSignInRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      final user = await _authService.loginUserWithEmailAndPassword(
          event.email.trim(), event.password);
      if (user != null) {
        emit(AuthAuthenticated(user));
      } else {
        emit(AuthError('Invalid email or password'));
        emit(AuthUnauthenticated());
      }
    } catch (e, st) {
      log('Email sign-in error: $e\n$st');
      emit(AuthError('Email sign-in failed'));
      emit(AuthUnauthenticated());
    }
  }

  Future<void> _onEmailSignUp(
      EmailSignUpRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      final user = await _authService.createUserWithEmailAndPassword(
          event.email.trim(), event.password);
      if (user != null) {
        await user.updateDisplayName(event.name.trim());
        await user.reload();
        emit(AuthAuthenticated(_authService.currentUser!));
      } else {
        emit(AuthError('Sign-up failed'));
        emit(AuthUnauthenticated());
      }
    } catch (e, st) {
      log('Email sign-up error: $e\n$st');
      emit(AuthError('Sign-up failed'));
      emit(AuthUnauthenticated());
    }
  }

  Future<void> _onSignOut(
      SignOutRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authService.signOut();
      emit(AuthUnauthenticated());
    } catch (e, st) {
      log('Sign-out error: $e\n$st');
      emit(AuthError('Sign-out failed'));
      emit(AuthUnauthenticated());
    }
  }
}

]

roohbaru_app/lib/blocs/insights_bloc.dart: [
// lib/blocs/insights_bloc.dart
import 'dart:async';
import 'package:bloc/bloc.dart';
import '../models/journal_entry.dart';
import 'journal_bloc.dart';
import 'journal_state.dart';
import 'insights_event.dart';
import 'insights_state.dart';

/// Helper to bundle metric results.
class _Metrics {
  final int total;
  final double percent;
  final bool hasChange;
  final bool isIncrease;
  _Metrics(this.total, this.percent, this.hasChange, this.isIncrease);
}

class InsightsBloc extends Bloc<InsightsEvent, InsightsState> {
  final JournalBloc journalBloc;
  late final StreamSubscription _journalSub;

  /// Define which moods go in which bucket.
  static const Map<String, List<String>> moodCategories = {
    'Positive': [
      'Happy',
      'Excited',
      'Calm',
      'Grateful',
      'Loving',
      'Confident',
      'Inspired'
    ],
    'Neutral': ['Surprised', 'Bored', 'Distracted'],
    'Negative': [
      'Sad',
      'Angry',
      'Anxious',
      'Lonely',
      'Guilty',
      'Jealous',
      'Confused',
      'Restless'
    ],
  };

  InsightsBloc({required this.journalBloc}) : super(InsightsState.initial()) {
    // 1) Handlers
    on<EntriesUpdated>(_onEntriesUpdated);
    on<DurationChanged>(_onDurationChanged);
    on<CategorySelected>(_onCategorySelected);

    // 2) Seed initial if already loaded
    if (journalBloc.state is JournalLoaded) {
      add(EntriesUpdated((journalBloc.state as JournalLoaded).entries));
    }

    // 3) Subscribe for future journal updates
    _journalSub = journalBloc.stream.listen((js) {
      if (js is JournalLoaded) add(EntriesUpdated(js.entries));
    });
  }

  void _onEntriesUpdated(EntriesUpdated event, Emitter<InsightsState> emit) {
    // Always recompute everything based on current filter
    final now = DateTime.now();
    final metrics = _computeMetrics(event.entries, state.durationFilter, now);
    final filtered = _filterEntries(event.entries, state.durationFilter, now);
    final categories = _computeCategoryCounts(filtered);

    emit(state.copyWith(
      allEntries: event.entries,
      totalEntries: metrics.total,
      changePercent: metrics.percent,
      hasChange: metrics.hasChange,
      isIncrease: metrics.isIncrease,
      categoryCounts: categories,
      selectedCategory: null,
      moodBreakdownCounts: {},
    ));
  }

  void _onDurationChanged(DurationChanged event, Emitter<InsightsState> emit) {
    final now = DateTime.now();
    final metrics = _computeMetrics(state.allEntries, event.filter, now);
    final filtered = _filterEntries(state.allEntries, event.filter, now);
    final categories = _computeCategoryCounts(filtered);

    emit(state.copyWith(
      durationFilter: event.filter,
      totalEntries: metrics.total,
      changePercent: metrics.percent,
      hasChange: metrics.hasChange,
      isIncrease: metrics.isIncrease,
      categoryCounts: categories,
      selectedCategory: null,
      moodBreakdownCounts: {},
    ));
  }

  void _onCategorySelected(
      CategorySelected event, Emitter<InsightsState> emit) {
    final now = DateTime.now();
    final filtered =
        _filterEntries(state.allEntries, state.durationFilter, now);
    final moods = moodCategories[event.category]!;
    final breakdown = <String, int>{};
    for (var m in moods) {
      breakdown[m] = filtered.where((e) => e.mood == m).length;
    }

    emit(state.copyWith(
      selectedCategory: event.category,
      moodBreakdownCounts: breakdown,
    ));
  }

  // Helpers:

  List<JournalEntry> _filterEntries(
    List<JournalEntry> all,
    DurationFilter f,
    DateTime now,
  ) {
    if (f == DurationFilter.allTime) return all;
    final cutoff =
        now.subtract(Duration(days: f == DurationFilter.last30Days ? 30 : 7));
    return all.where((e) => e.timestamp.isAfter(cutoff)).toList();
  }

  _Metrics _computeMetrics(
    List<JournalEntry> all,
    DurationFilter f,
    DateTime now,
  ) {
    if (f == DurationFilter.allTime) {
      return _Metrics(all.length, 0, false, true);
    }

    // current window
    final days = f == DurationFilter.last30Days ? 30 : 7;
    final start = now.subtract(Duration(days: days));
    final current = all.where((e) => e.timestamp.isAfter(start)).length;

    // previous window
    final prevStart = now.subtract(Duration(days: days * 2));
    final previous = all
        .where((e) =>
            e.timestamp.isAfter(prevStart) && e.timestamp.isBefore(start))
        .length;

    if (previous == 0) {
      final percent = current == 0 ? 0 : 100.0;
      return _Metrics(current, percent.toDouble(), current > 0, true);
    }

    final diff = current - previous;
    final pct = diff / previous * 100;
    return _Metrics(current, pct.abs(), true, diff >= 0);
  }

  Map<String, int> _computeCategoryCounts(List<JournalEntry> filtered) {
    final map = <String, int>{};
    for (var cat in moodCategories.keys) {
      map[cat] =
          filtered.where((e) => moodCategories[cat]!.contains(e.mood)).length;
    }
    return map;
  }

  @override
  Future<void> close() {
    _journalSub.cancel();
    return super.close();
  }
}

]

roohbaru_app/lib/blocs/auth_state.dart: [
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart';

abstract class AuthState extends Equatable {
  @override
  List<Object?> get props => [];
}

class AuthInitial extends AuthState {}

class AuthLoading extends AuthState {}

class AuthAuthenticated extends AuthState {
  final User user;
  AuthAuthenticated(this.user);
  @override
  List<Object?> get props => [user];
}

class AuthUnauthenticated extends AuthState {}

class AuthError extends AuthState {
  final String message;
  AuthError(this.message);
  @override
  List<Object?> get props => [message];
}

]

roohbaru_app/lib/screens/new_entry_screen.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:roohbaru_app/widgets/navbar_new_entry.dart';
import 'package:uuid/uuid.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart'; // ✅ Phosphor icons
import 'package:flutter_svg/flutter_svg.dart'; // ✅ For SVG support

import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../models/journal_entry.dart';
import '../services/file_storage_service.dart';
import 'entry_detail_screen.dart';

class NewEntryScreen extends StatefulWidget {
  final String userId;
  const NewEntryScreen({Key? key, required this.userId}) : super(key: key);

  @override
  State<NewEntryScreen> createState() => _NewEntryScreenState();
}

class _NewEntryScreenState extends State<NewEntryScreen> {
  final TextEditingController _titleCtrl = TextEditingController();
  final TextEditingController _contentCtrl = TextEditingController();
  final List<Attachment> _attachments = [];
  final FileStorageService _fileService = FileStorageService();
  final ImagePicker _picker = ImagePicker();

  bool _isEditing = false;
  bool _isMicActive = false;
  bool _showTitleError = false;

  @override
  void dispose() {
    _titleCtrl.dispose();
    _contentCtrl.dispose();
    super.dispose();
  }

  void _toggleEditing() {
    setState(() {
      _isEditing = !_isEditing;
    });
  }

  void _toggleMic() {
    setState(() {
      _isMicActive = !_isMicActive;
    });
  }

  Future<void> _pickImages() async {
    try {
      final List<XFile>? picked =
          await _picker.pickMultiImage(imageQuality: 80);
      if (picked == null) return;

      for (var xfile in picked) {
        final saved = await _fileService.saveImageLocally(File(xfile.path));
        setState(() {
          _attachments.add(
            Attachment(
              url: saved.path,
              name: xfile.name,
              type: 'image',
            ),
          );
        });
      }
    } catch (e) {
      debugPrint('Image pick error: $e');
    }
  }

  void _submitEntry() {
    final title = _titleCtrl.text.trim();
    final content = _contentCtrl.text.trim();

    if (title.isEmpty) {
      setState(() => _showTitleError = true);
      return;
    }

    final entry = JournalEntry(
      id: const Uuid().v4(),
      userId: widget.userId,
      title: title,
      content: content,
      timestamp: DateTime.now(),
      attachments: _attachments,
    );

    context.read<JournalBloc>().add(AddEntry(entry));
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: entry.id)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFf8eed5),
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset(
              'assets/images/bg2.png',
              fit: BoxFit.cover,
            ),
          ),
          SafeArea(
            child: Column(
              children: [
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  child: Row(
                    children: [
                      GestureDetector(
                        onTap: () => Navigator.of(context).pop(),
                        // child: const Icon(
                        //   Icons.arrow_back,
                        //   size: 28,
                        //   color: Colors.black,
                        // ),
                        child: const Icon(
                          // Icons.arrow_back,
                          PhosphorIcons.arrowCircleLeft,
                          size: 32,
                          color: Colors.black,
                        ),
                      ),
                      const Spacer(),
                      GestureDetector(
                        onTap: _submitEntry,
                        child: Container(
                          width: 36,
                          height: 36,
                          decoration: const BoxDecoration(
                            color: Color(0xFF473623),
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.check,
                            size: 20,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: TextField(
                    controller: _titleCtrl,
                    readOnly: !_isEditing,
                    style: const TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                    ),
                    decoration: InputDecoration(
                      hintText: 'Give it a title...',
                      hintStyle: TextStyle(
                        color: Colors.grey.shade600,
                        fontFamily: 'lufga-semi-bold',
                        fontSize: 32,
                      ),
                      border: InputBorder.none,
                      errorText: _showTitleError ? 'Title is required' : null,
                    ),
                  ),
                ),
                const SizedBox(height: 2),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 24),
                    child: TextField(
                      controller: _contentCtrl,
                      readOnly: !_isEditing,
                      maxLines: null,
                      expands: true,
                      decoration: const InputDecoration(
                        hintText: 'Write your thoughts...',
                        hintStyle: TextStyle(
                          fontFamily: 'lufga-regular',
                          fontSize: 18,
                        ),
                        border: InputBorder.none,
                      ),
                    ),
                  ),
                ),
                if (_attachments.isNotEmpty)
                  SizedBox(
                    height: 100,
                    child: ListView.builder(
                      padding: const EdgeInsets.symmetric(horizontal: 24),
                      scrollDirection: Axis.horizontal,
                      itemCount: _attachments.length,
                      itemBuilder: (ctx, i) {
                        final a = _attachments[i];
                        return Padding(
                          padding: const EdgeInsets.only(right: 8),
                          child: Stack(
                            children: [
                              ClipRRect(
                                borderRadius: BorderRadius.circular(12),
                                child: Image.file(
                                  File(a.url),
                                  width: 80,
                                  height: 80,
                                  fit: BoxFit.cover,
                                ),
                              ),
                              Positioned(
                                top: 4,
                                right: 4,
                                child: GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      _attachments.removeAt(i);
                                    });
                                  },
                                  child: Container(
                                    width: 20,
                                    height: 20,
                                    decoration: BoxDecoration(
                                      color: Colors.black54,
                                      shape: BoxShape.circle,
                                    ),
                                    child: const Icon(
                                      Icons.close,
                                      color: Colors.white,
                                      size: 14,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                const SizedBox(height: 16),
              ],
            ),
          ),
        ],
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.fromLTRB(85, 0, 85, 45),
        child: Container(
          height: 80,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(50),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.07),
                blurRadius: 10,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _isEditing
                  ? navbarNewEntry(
                      icon: PhosphorIcons.pencilSimple,
                      active: true,
                      onTap: _toggleEditing,
                    )
                  : navbarNewEntry(
                      iconWidget: SvgPicture.asset(
                        'assets/icons/pencil-simple-slash.svg',
                        width: 30,
                        height: 30,
                        colorFilter: const ColorFilter.mode(
                            Colors.black54, BlendMode.srcIn),
                      ),
                      active: false,
                      onTap: _toggleEditing,
                    ),
              navbarNewEntry(
                icon: PhosphorIcons.image,
                active: false,
                onTap: _pickImages,
              ),
              navbarNewEntry(
                icon: _isMicActive
                    ? PhosphorIcons.microphone
                    : PhosphorIcons.microphoneSlash,
                active: _isMicActive,
                onTap: _toggleMic,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/entry_detail_screen.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:open_file/open_file.dart';
import 'package:roohbaru_app/widgets/suggestion_card.dart';

import '../utils/mood_utils.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/journal_state.dart';
import '../blocs/journal_event.dart';
import '../models/journal_entry.dart';
import 'edit_entry_screen.dart';

class EntryDetailScreen extends StatelessWidget {
  final String entryId;
  const EntryDetailScreen({Key? key, required this.entryId}) : super(key: key);

  static const List<String> moodOptions = [
    'Happy',
    'Excited',
    'Calm',
    'Grateful',
    'Loving',
    'Confident',
    'Sad',
    'Angry',
    'Anxious',
    'Lonely',
    'Guilty',
    'Jealous',
    'Confused',
    'Surprised',
    'Bored',
    'Restless',
    'Inspired',
    'Distracted',
  ];

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<JournalBloc, JournalState>(
      builder: (context, state) {
        if (state is JournalLoaded) {
          final idx = state.entries.indexWhere((e) => e.id == entryId);
          if (idx == -1) {
            return Scaffold(
              backgroundColor: defaultMoodBackground,
              body: const Center(child: CircularProgressIndicator()),
            );
          }

          final entry = state.entries[idx];
          final bgColor =
              moodBackgroundColors[entry.mood] ?? defaultMoodBackground;
          final dateStr =
              '${entry.timestamp.day}/${entry.timestamp.month}/${entry.timestamp.year}';

          return Scaffold(
            backgroundColor: bgColor,
            body: Stack(
              children: [
                Positioned.fill(
                  child:
                      Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
                ),
                SafeArea(
                  child: Column(
                    children: [
                      // Top bar (back, edit, delete) – unchanged
                      Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 12),
                        child: Row(
                          children: [
                            GestureDetector(
                              onTap: () => Navigator.of(context).pop(),
                              child: const Icon(
                                PhosphorIcons.arrowCircleLeft,
                                size: 32,
                                color: Colors.black,
                              ),
                            ),
                            const Spacer(),
                            GestureDetector(
                              onTap: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) =>
                                        EditEntryScreen(entry: entry),
                                  ),
                                );
                              },
                              child: const Icon(
                                PhosphorIcons.pencilSimple,
                                size: 28,
                                color: Colors.black,
                              ),
                            ),
                            const SizedBox(width: 16),
                            GestureDetector(
                              onTap: () async {
                                final confirm = await showDialog<bool>(
                                  context: context,
                                  builder: (ctx) => AlertDialog(
                                    title: const Text('Delete Entry'),
                                    content: const Text(
                                        'Are you sure you want to delete this entry?'),
                                    actions: [
                                      TextButton(
                                          onPressed: () =>
                                              Navigator.pop(ctx, false),
                                          child: const Text('Cancel')),
                                      TextButton(
                                          onPressed: () =>
                                              Navigator.pop(ctx, true),
                                          child: const Text('Delete',
                                              style: TextStyle(
                                                  color: Colors.red))),
                                    ],
                                  ),
                                );
                                if (confirm == true) {
                                  context
                                      .read<JournalBloc>()
                                      .add(DeleteEntry(entryId));
                                  Navigator.pop(context);
                                }
                              },
                              child: const Icon(
                                PhosphorIcons.trash,
                                size: 28,
                                color: Colors.black,
                              ),
                            ),
                          ],
                        ),
                      ),

                      // Content
                      Expanded(
                        child: SingleChildScrollView(
                          padding: const EdgeInsets.symmetric(horizontal: 24),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Title, date, mood selector, body, images – unchanged
                              Text(
                                entry.title.toLowerCase(),
                                style: const TextStyle(
                                  fontFamily: 'lufga-bold-italic',
                                  fontSize: 32,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                dateStr,
                                style: const TextStyle(
                                  color: Color(0xFF473623),
                                ),
                              ),
                              const SizedBox(height: 16),
                              Row(
                                children: [
                                  SvgPicture.asset(
                                    'assets/icons/mood.svg',
                                    width: 50,
                                    height: 50,
                                  ),
                                  const SizedBox(width: 8),
                                  Container(
                                    padding: const EdgeInsets.symmetric(
                                        horizontal: 12, vertical: 4),
                                    decoration: BoxDecoration(
                                      color: Colors.white.withOpacity(0.8),
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: DropdownButtonHideUnderline(
                                      child: DropdownButton<String>(
                                        value: moodOptions.contains(entry.mood)
                                            ? entry.mood
                                            : null,
                                        icon: const Icon(
                                            Icons.keyboard_arrow_down),
                                        dropdownColor: Colors.white,
                                        style: const TextStyle(
                                          fontFamily: 'lufga-light',
                                          fontSize: 16,
                                          color: Colors.black,
                                        ),
                                        items: moodOptions
                                            .map((m) => DropdownMenuItem(
                                                  value: m,
                                                  child: Text(m),
                                                ))
                                            .toList(),
                                        onChanged: (newMood) {
                                          if (newMood != null) {
                                            final updated =
                                                entry.copyWith(mood: newMood);
                                            context
                                                .read<JournalBloc>()
                                                .add(UpdateEntry(updated));
                                          }
                                        },
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 16),
                              Text(
                                entry.content,
                                style: const TextStyle(
                                    fontSize: 18, fontFamily: 'lufga-regular'),
                              ),
                              const SizedBox(height: 16),
                              if (entry.attachments.any((a) =>
                                  a.type == 'image' &&
                                  File(a.url).existsSync())) ...[
                                SizedBox(
                                  height: 80,
                                  child: ListView.builder(
                                    scrollDirection: Axis.horizontal,
                                    itemCount: entry.attachments.length,
                                    itemBuilder: (ctx, i) {
                                      final a = entry.attachments[i];
                                      if (a.type == 'image' &&
                                          File(a.url).existsSync()) {
                                        return Padding(
                                          padding:
                                              const EdgeInsets.only(right: 8),
                                          child: GestureDetector(
                                            onTap: () => OpenFile.open(a.url),
                                            child: Image.file(
                                              File(a.url),
                                              width: 64,
                                              height: 64,
                                              fit: BoxFit.cover,
                                            ),
                                          ),
                                        );
                                      }
                                      return const SizedBox.shrink();
                                    },
                                  ),
                                ),
                                const SizedBox(height: 5),
                              ],
                              // Refined Separator
                              Container(
                                height: 1,
                                margin:
                                    const EdgeInsets.symmetric(vertical: 16),
                                decoration: BoxDecoration(
                                  gradient: LinearGradient(
                                    colors: [
                                      Colors.transparent,
                                      Colors.black.withOpacity(0.9),
                                      Colors.transparent,
                                    ],
                                    stops: const [0.0, 0.5, 1.0],
                                    begin: Alignment.centerLeft,
                                    end: Alignment.centerRight,
                                  ),
                                ),
                              ),
                              // const SizedBox(height: 2),

                              // Suggestions Section
                              const Text(
                                'Suggestions',
                                style: TextStyle(
                                  fontFamily: 'lufga-bold',
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  color: Color(0xFF2E2E2E),
                                  letterSpacing: 0.5,
                                ),
                              ),
                              const SizedBox(height: 12),
                              SuggestionCard(
                                  icon: PhosphorIcons.musicNote,
                                  suggestion: entry.suggestions.isNotEmpty
                                      ? entry.suggestions[0]
                                      : 'No music suggestion available',
                                  context: context),
                              const SizedBox(height: 8),
                              SuggestionCard(
                                  icon: PhosphorIcons.filmStrip,
                                  suggestion: entry.suggestions.length > 1
                                      ? entry.suggestions[1]
                                      : 'No movie suggestion available',
                                  context: context),

                              // AI Analysis Section
                              const SizedBox(height: 12),
                              const Text(
                                'AI Insights',
                                style: TextStyle(
                                  fontFamily: 'lufga-bold',
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  color: Color(0xFF2E2E2E),
                                  letterSpacing: 0.5,
                                ),
                              ),
                              const SizedBox(height: 8),
                              AnimatedContainer(
                                duration: const Duration(milliseconds: 300),
                                padding: const EdgeInsets.all(16),
                                decoration: BoxDecoration(
                                  // color: Colors.white.withOpacity(0.3),
                                  color:
                                      const Color(0xFF2E2E2E).withOpacity(0.1),
                                  borderRadius: BorderRadius.circular(12),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.white.withOpacity(0.1),
                                      blurRadius: 8,
                                      offset: const Offset(0, 4),
                                    ),
                                  ],
                                ),
                                child: Text(
                                  entry.analysis.isNotEmpty
                                      ? entry.analysis
                                      : 'No AI insights available at this time.',
                                  style: const TextStyle(
                                    fontFamily: 'lufga-regular',
                                    fontSize: 15,
                                    color: Color(0xFF4A4A4A),
                                    height: 1.5,
                                  ),
                                ),
                              ),

                              const SizedBox(height: 32),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        }

        // Loading / Error
        return Scaffold(
          backgroundColor: defaultMoodBackground,
          body: const Center(child: CircularProgressIndicator()),
        );
      },
    );
  }
}

]

roohbaru_app/lib/screens/search_screen_backup.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_state.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/search_bloc.dart';
import '../blocs/search_event.dart';
import '../blocs/search_state.dart';
import '../models/journal_entry.dart';
import '../utils/mood_utils.dart';
import '../widgets/custom_date_picker.dart';
import 'entry_detail_screen.dart';

class SearchScreen extends StatelessWidget {
  const SearchScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final journalBloc = context.read<JournalBloc>();
    return BlocProvider<SearchBloc>(
      create: (_) => SearchBloc(journalBloc: journalBloc),
      child: const _SearchView(),
    );
  }
}

class _SearchView extends StatefulWidget {
  const _SearchView({Key? key}) : super(key: key);

  @override
  State<_SearchView> createState() => _SearchViewState();
}

class _SearchViewState extends State<_SearchView> {
  final TextEditingController _searchController = TextEditingController();

  bool get _hasAnyFilter {
    final s = context.read<SearchBloc>().state;
    return s.query.isNotEmpty ||
        s.mood != null ||
        s.date != null ||
        s.withPhotosOnly;
  }

  void _executeSearch() {
    context.read<SearchBloc>().add(QueryChanged(_searchController.text.trim()));
  }

  void _resetAllFilters() {
    _searchController.clear();
    final bloc = context.read<SearchBloc>();
    bloc.add(QueryChanged(''));
    bloc.add(MoodFilterChanged(null));
    bloc.add(DateFilterChanged(null));
    bloc.add(PhotosFilterToggled(false));
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final auth = context.read<AuthBloc>().state;
    if (auth is! AuthAuthenticated) {
      return const Scaffold(
        body: Center(child: Text('Not authenticated')),
      );
    }

    final state = context.watch<SearchBloc>().state;

    return Scaffold(
      backgroundColor: defaultMoodBackground,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
          ),
          SafeArea(
            child: Column(
              children: [
                // Back button
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  child: Align(
                    alignment: Alignment.centerLeft,
                    child: GestureDetector(
                      onTap: () => Navigator.of(context).pop(),
                      child: const Icon(Icons.arrow_back, size: 28),
                    ),
                  ),
                ),

                // Redesigned Search field and button
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          Colors.white.withOpacity(0.95),
                          Colors.white.withOpacity(0.85)
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.08),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _searchController,
                            onSubmitted: (_) => _executeSearch(),
                            style: const TextStyle(
                              fontFamily: 'lufga-regular',
                              fontSize: 16,
                              color: Color(0xFF1A1A1A),
                            ),
                            decoration: InputDecoration(
                              hintText: 'Search entries...',
                              hintStyle: TextStyle(
                                color: Colors.grey.shade500,
                                fontFamily: 'lufga-regular',
                              ),
                              border: InputBorder.none,
                              contentPadding: const EdgeInsets.symmetric(
                                horizontal: 20,
                                vertical: 16,
                              ),
                              prefixIcon: Icon(
                                Icons.search,
                                color: Colors.grey.shade600,
                                size: 22,
                              ),
                            ),
                          ),
                        ),
                        Container(
                          margin: const EdgeInsets.only(right: 8),
                          child: ElevatedButton(
                            onPressed: _executeSearch,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFF2E2A1F),
                              foregroundColor: Colors.white,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 24,
                                vertical: 12,
                              ),
                              elevation: 0,
                              textStyle: const TextStyle(
                                fontFamily: 'lufga-semi-bold',
                                fontSize: 14,
                                letterSpacing: 0.5,
                              ),
                            ),
                            child: const Text('Search'),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Redesigned Filters + Reset
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Column(
                    children: [
                      Wrap(
                        spacing: 8,
                        runSpacing: 8,
                        children: [
                          // Mood dropdown
                          Flexible(
                            flex: 2,
                            child: Container(
                              width: double.infinity,
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.92),
                                borderRadius: BorderRadius.circular(16),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.06),
                                    blurRadius: 8,
                                    offset: const Offset(0, 3),
                                  ),
                                ],
                              ),
                              child: DropdownButtonFormField<String?>(
                                value: state.mood,
                                hint: const Text(
                                  'All moods',
                                  style: TextStyle(
                                    fontFamily: 'lufga-regular',
                                    color: Color(0xFF6B7280),
                                    fontSize: 14,
                                  ),
                                ),
                                items: [
                                  const DropdownMenuItem(
                                    value: null,
                                    child: Text(
                                      'All moods',
                                      style: TextStyle(
                                        fontFamily: 'lufga-regular',
                                        color: Color(0xFF1A1A1A),
                                        fontSize: 14,
                                      ),
                                    ),
                                  ),
                                  ..._SearchOptions.moods
                                      .map((m) => DropdownMenuItem(
                                            value: m,
                                            child: Text(
                                              m,
                                              style: const TextStyle(
                                                fontFamily: 'lufga-regular',
                                                color: Color(0xFF1A1A1A),
                                                fontSize: 14,
                                              ),
                                            ),
                                          )),
                                ],
                                onChanged: (m) => context
                                    .read<SearchBloc>()
                                    .add(MoodFilterChanged(m)),
                                decoration: const InputDecoration(
                                  border: InputBorder.none,
                                  contentPadding: EdgeInsets.symmetric(
                                    horizontal: 16,
                                    vertical: 14,
                                  ),
                                ),
                                dropdownColor: Colors.white,
                                icon: Icon(
                                  Icons.arrow_drop_down,
                                  color: Colors.grey.shade600,
                                  size: 24,
                                ),
                              ),
                            ),
                          ),

                          // Date picker
                          Flexible(
                            flex: 1,
                            child: GestureDetector(
                              onTap: () async {
                                final picked = await showCustomDatePicker(
                                  context: context,
                                  initialDate: state.date ?? DateTime.now(),
                                );
                                context
                                    .read<SearchBloc>()
                                    .add(DateFilterChanged(picked));
                              },
                              child: Container(
                                width: double.infinity,
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  vertical: 14,
                                ),
                                decoration: BoxDecoration(
                                  color: Colors.white.withOpacity(0.92),
                                  borderRadius: BorderRadius.circular(16),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.06),
                                      blurRadius: 8,
                                      offset: const Offset(0, 3),
                                    ),
                                  ],
                                ),
                                child: Row(
                                  children: [
                                    Icon(
                                      Icons.calendar_today_outlined,
                                      color: Colors.grey.shade600,
                                      size: 20,
                                    ),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        state.date != null
                                            ? DateFormat('dd/MM/yyyy')
                                                .format(state.date!)
                                            : 'Select Date',
                                        style: TextStyle(
                                          fontFamily: 'lufga-regular',
                                          fontSize: 14,
                                          color: state.date != null
                                              ? const Color(0xFF1A1A1A)
                                              : Colors.grey.shade500,
                                        ),
                                        overflow: TextOverflow.ellipsis,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),

                          // Photos-only switch
                          Flexible(
                            flex: 1,
                            child: Container(
                              width: double.infinity,
                              padding: const EdgeInsets.symmetric(
                                horizontal: 16,
                                vertical: 10,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.92),
                                borderRadius: BorderRadius.circular(16),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.06),
                                    blurRadius: 8,
                                    offset: const Offset(0, 3),
                                  ),
                                ],
                              ),
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Row(
                                    children: [
                                      Icon(
                                        Icons.photo_library_outlined,
                                        color: Colors.grey.shade600,
                                        size: 20,
                                      ),
                                      const SizedBox(width: 8),
                                      Text(
                                        'Photos only',
                                        style: TextStyle(
                                          fontFamily: 'lufga-regular',
                                          fontSize: 14,
                                          color: const Color(0xFF1A1A1A),
                                        ),
                                      ),
                                    ],
                                  ),
                                  Switch(
                                    value: state.withPhotosOnly,
                                    onChanged: (v) => context
                                        .read<SearchBloc>()
                                        .add(PhotosFilterToggled(v)),
                                    activeColor: const Color(0xFF2E2A1F),
                                    inactiveThumbColor: Colors.grey.shade400,
                                    inactiveTrackColor: Colors.grey.shade200,
                                    materialTapTargetSize:
                                        MaterialTapTargetSize.shrinkWrap,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                      if (_hasAnyFilter) ...[
                        const SizedBox(height: 12),
                        Align(
                          alignment: Alignment.centerRight,
                          child: TextButton(
                            onPressed: _resetAllFilters,
                            style: TextButton.styleFrom(
                              foregroundColor: const Color(0xFF2E2A1F),
                              backgroundColor: Colors.white.withOpacity(0.92),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 20,
                                vertical: 10,
                              ),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              textStyle: const TextStyle(
                                fontFamily: 'lufga-semi-bold',
                                fontSize: 14,
                                letterSpacing: 0.5,
                              ),
                            ),
                            child: const Text('Reset Filters'),
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
                const SizedBox(height: 16),

                // Results list
                Expanded(
                  child: !_hasAnyFilter
                      ? const SizedBox.shrink()
                      : state.filteredEntries.isEmpty
                          ? const Center(child: Text('No entries found.'))
                          : ListView.builder(
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 16),
                              itemCount: state.filteredEntries.length,
                              itemBuilder: (ctx, i) {
                                final e = state.filteredEntries[i];
                                return _buildEntryItem(e);
                              },
                            ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEntryItem(JournalEntry e) {
    final dow = DateFormat('EEE').format(e.timestamp).toLowerCase();
    final dayNum = DateFormat('d').format(e.timestamp);
    final imgs = e.attachments
        .where((a) => a.type == 'image' && File(a.url).existsSync())
        .map((a) => a.url)
        .toList();

    return GestureDetector(
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: e.id)),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 13),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 55,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.5),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Text(
                    dow,
                    style: const TextStyle(
                      fontSize: 16,
                      fontFamily: 'lufga-semi-bold',
                      color: Color(0xFF473623),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    dayNum,
                    style: const TextStyle(
                      fontSize: 18,
                      fontFamily: 'lufga-regular',
                      color: Colors.black,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    e.title.toLowerCase(),
                    style: const TextStyle(
                      fontSize: 20,
                      fontFamily: 'lufga-semi-bold-italic',
                      color: Color(0xFF473623),
                    ),
                  ),
                  Text(
                    _truncateWords(e.content, 30).toLowerCase(),
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.4,
                      fontFamily: 'lufga-regular',
                    ),
                  ),
                  if (imgs.isNotEmpty) ...[
                    const SizedBox(height: 12),
                    Row(
                      children: imgs.take(2).map((path) {
                        return Expanded(
                          child: Padding(
                            padding: const EdgeInsets.only(right: 8.0),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.file(
                                File(path),
                                height: 120,
                                fit: BoxFit.cover,
                                errorBuilder: (ctx, _, __) => Container(
                                  height: 120,
                                  color: Colors.grey.shade200,
                                  child: const Icon(Icons.broken_image),
                                ),
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _truncateWords(String text, int limit) {
    final words = text.split(RegExp(r'\s+'));
    if (words.length <= limit) return text;
    return words.take(limit).join(' ') + '...';
  }
}

class _SearchOptions {
  static const List<String> moods = [
    'Happy',
    'Excited',
    'Calm',
    'Grateful',
    'Loving',
    'Confident',
    'Sad',
    'Angry',
    'Anxious',
    'Lonely',
    'Guilty',
    'Jealous',
    'Confused',
    'Surprised',
    'Bored',
    'Restless',
    'Inspired',
    'Distracted',
  ];
}

]

roohbaru_app/lib/screens/signup_screen.dart: [
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'package:roohbaru_app/widgets/social_button.dart';
import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../widgets/primary_button.dart';
import 'home_screen.dart';
import 'login_screen.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _emailCtrl = TextEditingController();
  final _nameCtrl = TextEditingController();
  final _passCtrl = TextEditingController();

  bool _obscurePass = true;
  bool _agreedToTerms = false;
  bool _showPasswordError = false;
  bool _emailValid = false;

  final _passwordRegex = RegExp(r'^(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$&*~]).{8,}$');
  final _emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+');

  @override
  void initState() {
    super.initState();
    _emailCtrl.addListener(() {
      setState(() {
        _emailValid = _emailRegex.hasMatch(_emailCtrl.text.trim());
      });
    });
  }

  @override
  void dispose() {
    _emailCtrl.dispose();
    _nameCtrl.dispose();
    _passCtrl.dispose();
    super.dispose();
  }

  bool get _isPasswordValid => _passwordRegex.hasMatch(_passCtrl.text.trim());

  void _submitSignup() {
    final email = _emailCtrl.text.trim();
    final name = _nameCtrl.text.trim();
    final pass = _passCtrl.text;

    setState(() {
      _showPasswordError = !_isPasswordValid;
    });

    if (!_isPasswordValid) return;

    // if (!_agreedToTerms) {
    //   ScaffoldMessenger.of(context).showSnackBar(
    //     const SnackBar(content: Text("Please agree to the terms first.")),
    //   );
    //   return;
    // }

    context.read<AuthBloc>().add(
          EmailSignUpRequested(name: name, email: email, password: pass),
        );
  }

  void _handleGoogleSignIn() {
    context.read<AuthBloc>().add(GoogleSignInRequested());
  }

  Widget _buildTextField({
    required String hint,
    required IconData icon,
    required TextEditingController controller,
    bool obscure = false,
    Widget? suffixIcon,
  }) {
    return TextField(
      controller: controller,
      obscureText: obscure,
      decoration: InputDecoration(
        prefixIcon: Icon(icon),
        suffixIcon: suffixIcon,
        hintText: hint,
        filled: true,
        fillColor: Colors.white,
        contentPadding:
            const EdgeInsets.symmetric(horizontal: 16, vertical: 18),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocListener<AuthBloc, AuthState>(
        listener: (ctx, state) {
          if (state is AuthAuthenticated) {
            Navigator.of(context).pushAndRemoveUntil(
              MaterialPageRoute(builder: (_) => HomeScreen(user: state.user)),
              (_) => false,
            );
          } else if (state is AuthError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.message)),
            );
          }
        },
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 16),
                  IconButton(
                    // icon: const Icon(Icons.arrow_back),
                    icon: const Icon(
                      // Icons.arrow_back,
                      PhosphorIcons.arrowCircleLeft,
                      size: 32,
                      color: Colors.black,
                    ),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    "Let's Get Started!",
                    style: TextStyle(fontSize: 26, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Sign up, fill the form to continue.',
                    style: TextStyle(fontSize: 14, color: Colors.black54),
                  ),
                  const SizedBox(height: 32),
                  _buildTextField(
                    hint: 'Email',
                    icon: Icons.email_outlined,
                    controller: _emailCtrl,
                    suffixIcon: _emailValid
                        ? Container(
                            margin: const EdgeInsets.only(right: 12),
                            decoration: const BoxDecoration(
                              color: Colors.black,
                              shape: BoxShape.circle,
                            ),
                            child: const Icon(Icons.check,
                                size: 16, color: Colors.white),
                          )
                        : null,
                  ),
                  const SizedBox(height: 20),
                  _buildTextField(
                    hint: 'Name',
                    icon: Icons.person_outline,
                    controller: _nameCtrl,
                  ),
                  const SizedBox(height: 20),
                  _buildTextField(
                    hint: 'Password',
                    icon: Icons.lock_outline,
                    controller: _passCtrl,
                    obscure: _obscurePass,
                    suffixIcon: IconButton(
                      icon: Icon(_obscurePass
                          ? Icons.visibility_off_outlined
                          : Icons.visibility_outlined),
                      onPressed: () =>
                          setState(() => _obscurePass = !_obscurePass),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 8),
                    child: Text(
                      'At least 8 characters, 1 uppercase letter, 1 number, 1 symbol',
                      style: TextStyle(
                        fontSize: 12,
                        color: _showPasswordError ? Colors.red : Colors.black45,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  // Row(
                  //   crossAxisAlignment: CrossAxisAlignment.start,
                  //   children: [
                  //     Transform.scale(
                  //       scale: 1.4,
                  //       child: Checkbox(
                  //         value: _agreedToTerms,
                  //         shape: const CircleBorder(),
                  //         onChanged: (val) =>
                  //             setState(() => _agreedToTerms = val ?? false),
                  //       ),
                  //     ),
                  //     const SizedBox(width: 8),
                  //     Expanded(
                  //       child: Padding(
                  //         padding: const EdgeInsets.only(top: 10),
                  //         child: RichText(
                  //           text: const TextSpan(
                  //             style: TextStyle(
                  //                 fontSize: 13, color: Colors.black54),
                  //             children: [
                  //               TextSpan(
                  //                   text: 'By Signing up, you agree to the '),
                  //               TextSpan(
                  //                 text: 'Terms of Service',
                  //                 style: TextStyle(
                  //                     fontWeight: FontWeight.bold,
                  //                     color: Colors.black),
                  //               ),
                  //               TextSpan(text: ' and '),
                  //               TextSpan(
                  //                 text: 'Privacy Policy',
                  //                 style: TextStyle(
                  //                     fontWeight: FontWeight.bold,
                  //                     color: Colors.black),
                  //               ),
                  //             ],
                  //           ),
                  //         ),
                  //       ),
                  //     ),
                  //   ],
                  // ),
                  // const SizedBox(height: 32),
                  // Row(
                  //   mainAxisAlignment: MainAxisAlignment.center,
                  //   children: [
                  //     GestureDetector(
                  //       onTap: _handleGoogleSignIn,
                  //       child: Container(
                  //         padding: const EdgeInsets.all(12),
                  //         decoration: BoxDecoration(
                  //           shape: BoxShape.circle,
                  //           border: Border.all(color: Colors.grey.shade300),
                  //         ),
                  //         child: Image.asset(
                  //           'assets/images/google.png',
                  //           height: 24,
                  //           width: 24,
                  //         ),
                  //       ),
                  //     ),
                  //     const SizedBox(width: 24),
                  //     Container(
                  //       padding: const EdgeInsets.all(12),
                  //       decoration: BoxDecoration(
                  //         shape: BoxShape.circle,
                  //         border: Border.all(color: Colors.grey.shade300),
                  //       ),
                  //       child: const Icon(Icons.apple, size: 28),
                  //     ),
                  //   ],
                  // ),
                  // const SizedBox(height: 32),
                  BlocBuilder<AuthBloc, AuthState>(
                    builder: (context, state) {
                      if (state is AuthLoading) {
                        return const Center(child: CircularProgressIndicator());
                      }

                      return PrimaryButton(
                        label: 'Sign Up',
                        onPressed: _submitSignup,
                      );
                    },
                  ),
                  // const SizedBox(height: 16),
                  // Row(
                  //   mainAxisAlignment: MainAxisAlignment.center,
                  //   children: [
                  //     const Text("Already have an account? "),
                  //     GestureDetector(
                  //       onTap: () {
                  //         Navigator.pushReplacement(
                  //           context,
                  //           MaterialPageRoute(
                  //               builder: (_) => const LoginScreen()),
                  //         );
                  //       },
                  //       child: const Text(
                  //         'Log in',
                  //         style: TextStyle(
                  //           fontWeight: FontWeight.bold,
                  //           decoration: TextDecoration.underline,
                  //         ),
                  //       ),
                  //     ),
                  //   ],
                  // ),
                  // const SizedBox(height: 32),
                  const SizedBox(height: 24),
                  Row(
                    children: const [
                      Expanded(child: Divider()),
                      Padding(
                        padding: EdgeInsets.symmetric(horizontal: 8),
                        child: Text('Or Sign Up With'),
                      ),
                      Expanded(child: Divider()),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      SocialButton(
                        assetPath: 'assets/images/google.png',
                        onTap: () => context
                            .read<AuthBloc>()
                            .add(GoogleSignInRequested()),
                      ),
                      const SizedBox(width: 12),
                      SocialButton(
                        assetPath: 'assets/images/apple.png',
                        onTap: () {
                          // TODO: implement Apple Sign In
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 32),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text("Already have an account? "),
                      GestureDetector(
                        onTap: () => Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => const LoginScreen()),
                        ),
                        child: Text(
                          'Log In',
                          style: TextStyle(
                            // color: Theme.of(context).colorScheme.primary,
                            color: Colors.blue,
                            fontWeight: FontWeight.w600,
                            // decoration: TextDecoration.underline,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/profile_screen.dart: [
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_state.dart';
import '../utils/mood_utils.dart';
import '../widgets/profile/profile_header.dart';
import '../widgets/profile/avatar_animation.dart';
import '../widgets/profile/profile_info.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({Key? key}) : super(key: key);

  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  bool _showInfo = false;

  void _onAnimationComplete() {
    setState(() {
      _showInfo = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: defaultMoodBackground,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
          ),
          SafeArea(
            child: Column(
              children: [
                const ProfileHeader(),
                const SizedBox(height: 40),
                const SizedBox(height: 24),
                AvatarAnimation(onCompleted: _onAnimationComplete),
                const SizedBox(height: 24),
                if (_showInfo)
                  BlocBuilder<AuthBloc, AuthState>(
                    builder: (context, state) {
                      if (state is AuthAuthenticated) {
                        final user = state.user;
                        return ProfileInfo(
                          name: user.displayName ?? '',
                          email: user.email ?? '',
                        );
                      }
                      return const SizedBox.shrink();
                    },
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

]

roohbaru_app/lib/screens/insights_screen.dart: [
// lib/screens/insights_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:roohbaru_app/models/journal_entry.dart';

import '../blocs/insights_bloc.dart';
import '../blocs/insights_event.dart';
import '../blocs/insights_state.dart';
import '../blocs/journal_bloc.dart';
import '../widgets/insights/duration_selector.dart';
import '../widgets/insights/analytics_card.dart';
import '../widgets/insights/mood_bar_chart.dart';
import '../widgets/insights/mood_pie_chart.dart'; // ← NEW

class InsightsScreen extends StatelessWidget {
  const InsightsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => InsightsBloc(journalBloc: context.read<JournalBloc>()),
      child: const _InsightsView(),
    );
  }
}

class _InsightsView extends StatelessWidget {
  const _InsightsView();

  // same buckets as in the bloc
  static const Map<String, List<String>> _moodCategories = {
    'Positive': [
      'Happy',
      'Excited',
      'Calm',
      'Grateful',
      'Loving',
      'Confident',
      'Inspired'
    ],
    'Neutral': ['Surprised', 'Bored', 'Distracted'],
    'Negative': [
      'Sad',
      'Angry',
      'Anxious',
      'Lonely',
      'Guilty',
      'Jealous',
      'Confused',
      'Restless'
    ],
  };

  // replicate the bloc’s filter logic
  List<JournalEntry> _filteredEntries(
      List<JournalEntry> all, DurationFilter f) {
    if (f == DurationFilter.allTime) return all;
    final now = DateTime.now();
    final days = f == DurationFilter.last30Days ? 30 : 7;
    final cutoff = now.subtract(Duration(days: days));
    return all.where((e) => e.timestamp.isAfter(cutoff)).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Insights'),
        leading: const BackButton(),
      ),
      body: BlocBuilder<InsightsBloc, InsightsState>(
        builder: (ctx, state) {
          final entries =
              _filteredEntries(state.allEntries, state.durationFilter);

          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // 1) Duration selector
                DurationSelector(
                  current: state.durationFilter,
                  onChanged: (f) =>
                      ctx.read<InsightsBloc>().add(DurationChanged(f)),
                ),

                const SizedBox(height: 24),

                // 2) Analytics card
                AnalyticsCard(
                  title: 'Entries',
                  total: state.totalEntries,
                  changePercent: state.changePercent,
                  hasChange: state.hasChange,
                  isIncrease: state.isIncrease,
                ),

                const SizedBox(height: 24),

                // 3) Bar chart
                SizedBox(
                  height: 260,
                  child: MoodBarChart(
                    data: state.categoryCounts,
                    selectedCategory: null,
                    onCategoryTap: (_) {},
                  ),
                ),

                const SizedBox(height: 32),

                // 4) Pie‐chart breakdown for each category
                for (final category in ['Positive', 'Neutral', 'Negative']) ...[
                  Builder(builder: (_) {
                    // build only moods with count ≥ 1
                    final breakdown = <String, int>{};
                    for (var m in _moodCategories[category]!) {
                      final cnt = entries.where((e) => e.mood == m).length;
                      if (cnt > 0) breakdown[m] = cnt;
                    }
                    if (breakdown.isEmpty) return const SizedBox.shrink();

                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          category,
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        // render the pie chart
                        SizedBox(
                          height: 200,
                          child: MoodPieChart(data: breakdown),
                        ),
                        const SizedBox(height: 24),
                      ],
                    );
                  }),
                ],
              ],
            ),
          );
        },
      ),
    );
  }
}

]

roohbaru_app/lib/screens/login_screen.dart: [
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/primary_button.dart';
import '../widgets/social_button.dart';
import 'signup_screen.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailCtrl = TextEditingController();
  final _passCtrl = TextEditingController();
  bool _emailValid = false;
  bool _obscurePass = true;

  @override
  void initState() {
    super.initState();
    _emailCtrl.addListener(_validateEmail);
  }

  @override
  void dispose() {
    _emailCtrl.removeListener(_validateEmail);
    _emailCtrl.dispose();
    _passCtrl.dispose();
    super.dispose();
  }

  void _validateEmail() {
    final regex = RegExp(r'^[^@]+@[^@]+\.[^@]+');
    setState(() => _emailValid = regex.hasMatch(_emailCtrl.text.trim()));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: BlocListener<AuthBloc, AuthState>(
          listener: (ctx, state) {
            if (state is AuthError) {
              ScaffoldMessenger.of(ctx).showSnackBar(
                SnackBar(content: Text(state.message)),
              );
            }
          },
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Row(
                  children: [
                    IconButton(
                      // icon: const Icon(Icons.arrow_back),
                      icon: const Icon(
                        // Icons.arrow_back,
                        PhosphorIcons.arrowCircleLeft,
                        size: 32,
                        color: Colors.black,
                      ),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                    const SizedBox(width: 8),
                    const Text(
                      'Log in',
                      style: TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                CustomTextField(
                  label: 'Email address',
                  hint: 'you@example.com',
                  controller: _emailCtrl,
                  suffixIcon: _emailValid
                      ? Container(
                          margin: const EdgeInsets.only(right: 12),
                          decoration: const BoxDecoration(
                            color: Colors.black,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(Icons.check,
                              size: 16, color: Colors.white),
                        )
                      : null,
                ),
                const SizedBox(height: 24),
                CustomTextField(
                  label: 'Password',
                  hint: '••••••••',
                  controller: _passCtrl,
                  obscureText: _obscurePass,
                  suffixIcon: IconButton(
                    icon: Icon(
                      _obscurePass
                          ? Icons.visibility_off_outlined
                          : Icons.visibility_outlined,
                    ),
                    onPressed: () =>
                        setState(() => _obscurePass = !_obscurePass),
                  ),
                ),
                Align(
                  alignment: Alignment.centerRight,
                  child: TextButton(
                    onPressed: () {
                      // TODO: forgot password
                    },
                    child: const Text('Forgot password?'),
                  ),
                ),
                const SizedBox(height: 16),
                BlocBuilder<AuthBloc, AuthState>(
                  builder: (ctx, state) {
                    if (state is AuthLoading) {
                      return const Center(child: CircularProgressIndicator());
                    }
                    return PrimaryButton(
                      label: 'Log in',
                      onPressed: () {
                        context.read<AuthBloc>().add(
                              EmailSignInRequested(
                                email: _emailCtrl.text.trim(),
                                password: _passCtrl.text,
                              ),
                            );
                      },
                    );
                  },
                ),
                const SizedBox(height: 24),
                Row(
                  children: const [
                    Expanded(child: Divider()),
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 8),
                      child: Text('Or Log In With'),
                    ),
                    Expanded(child: Divider()),
                  ],
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    SocialButton(
                      assetPath: 'assets/images/google.png',
                      onTap: () =>
                          context.read<AuthBloc>().add(GoogleSignInRequested()),
                    ),
                    const SizedBox(width: 12),
                    SocialButton(
                      assetPath: 'assets/images/apple.png',
                      onTap: () {
                        // TODO: implement Apple Sign In
                      },
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Text("Don't have an account? "),
                    GestureDetector(
                      onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(builder: (_) => const SignupScreen()),
                      ),
                      child: Text(
                        'Sign up',
                        style: TextStyle(
                          color: Colors.blue,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/edit_entry_screen.dart: [
// lib/screens/edit_entry_screen.dart

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:roohbaru_app/widgets/navbar_new_entry.dart';
import 'package:open_file/open_file.dart';
import 'package:uuid/uuid.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart'; // ✅ Phosphor icons
import 'package:flutter_svg/flutter_svg.dart'; // ✅ For SVG support

import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../models/journal_entry.dart';
import '../services/file_storage_service.dart';

class EditEntryScreen extends StatefulWidget {
  final JournalEntry entry;
  const EditEntryScreen({Key? key, required this.entry}) : super(key: key);

  @override
  State<EditEntryScreen> createState() => _EditEntryScreenState();
}

class _EditEntryScreenState extends State<EditEntryScreen> {
  late final TextEditingController _titleCtrl;
  late final TextEditingController _contentCtrl;
  final FileStorageService _fileService = FileStorageService();
  final ImagePicker _picker = ImagePicker();
  late List<Attachment> _attachments;
  bool _showTitleError = false;
  bool _isEditing = false;
  bool _isMicActive = false;

  @override
  void initState() {
    super.initState();
    _titleCtrl = TextEditingController(text: widget.entry.title);
    _contentCtrl = TextEditingController(text: widget.entry.content);
    _attachments = List.from(widget.entry.attachments);
  }

  @override
  void dispose() {
    _titleCtrl.dispose();
    _contentCtrl.dispose();
    super.dispose();
  }

  void _toggleEditing() {
    setState(() {
      _isEditing = !_isEditing;
    });
  }

  void _toggleMic() {
    setState(() {
      _isMicActive = !_isMicActive;
    });
  }

  Future<void> _pickImages() async {
    try {
      final List<XFile>? picked =
          await _picker.pickMultiImage(imageQuality: 80);
      if (picked == null) return;

      for (var xfile in picked) {
        final saved = await _fileService.saveImageLocally(File(xfile.path));
        setState(() {
          _attachments.add(
            Attachment(
              url: saved.path,
              name: xfile.name,
              type: 'image',
            ),
          );
        });
      }
    } catch (e) {
      debugPrint('Error picking images: $e');
    }
  }

  void _removeImage(int index) {
    setState(() {
      _attachments.removeAt(index);
    });
  }

  void _submit() {
    final title = _titleCtrl.text.trim();
    final content = _contentCtrl.text.trim();

    if (title.isEmpty) {
      setState(() => _showTitleError = true);
      return;
    }

    final updated = widget.entry.copyWith(
      title: title,
      content: content,
      attachments: _attachments,
    );
    context.read<JournalBloc>().add(UpdateEntry(updated));
    Navigator.of(context).pop();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFf8eed5),
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset(
              'assets/images/bg2.png',
              fit: BoxFit.cover,
            ),
          ),
          SafeArea(
            child: Column(
              children: [
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  child: Row(
                    children: [
                      GestureDetector(
                        onTap: () => Navigator.of(context).pop(),
                        // child: const Icon(
                        //   Icons.arrow_back,
                        //   size: 28,
                        //   color: Colors.black,
                        // ),
                        child: const Icon(
                          // Icons.arrow_back,
                          PhosphorIcons.arrowCircleLeft,
                          size: 32,
                          color: Colors.black,
                        ),
                      ),
                      const Spacer(),
                      GestureDetector(
                        onTap: _submit,
                        child: Container(
                          width: 36,
                          height: 36,
                          decoration: const BoxDecoration(
                            color: Color(0xFF473623),
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.check,
                            size: 20,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: TextField(
                    controller: _titleCtrl,
                    readOnly: !_isEditing,
                    style: const TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                    ),
                    decoration: InputDecoration(
                      hintText: 'Update title...',
                      hintStyle: TextStyle(
                        color: Colors.grey.shade600,
                        fontFamily: 'lufga-semi-bold',
                        fontSize: 32,
                      ),
                      border: InputBorder.none,
                      errorText: _showTitleError ? 'Title is required' : null,
                    ),
                  ),
                ),
                const SizedBox(height: 2),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 24),
                    child: TextField(
                      controller: _contentCtrl,
                      readOnly: !_isEditing,
                      maxLines: null,
                      expands: true,
                      decoration: const InputDecoration(
                        hintText: 'Update your thoughts...',
                        hintStyle: TextStyle(
                          fontFamily: 'lufga-regular',
                          fontSize: 18,
                        ),
                        border: InputBorder.none,
                      ),
                    ),
                  ),
                ),
                if (_attachments.isNotEmpty)
                  SizedBox(
                    height: 100,
                    child: ListView.builder(
                      padding: const EdgeInsets.symmetric(horizontal: 24),
                      scrollDirection: Axis.horizontal,
                      itemCount: _attachments.length,
                      itemBuilder: (ctx, i) {
                        final a = _attachments[i];
                        return Padding(
                          padding: const EdgeInsets.only(right: 8),
                          child: Stack(
                            children: [
                              ClipRRect(
                                borderRadius: BorderRadius.circular(12),
                                child: GestureDetector(
                                  onTap: () => OpenFile.open(a.url),
                                  child: Image.file(
                                    File(a.url),
                                    width: 80,
                                    height: 80,
                                    fit: BoxFit.cover,
                                  ),
                                ),
                              ),
                              Positioned(
                                top: 4,
                                right: 4,
                                child: GestureDetector(
                                  onTap: () => _removeImage(i),
                                  child: Container(
                                    width: 20,
                                    height: 20,
                                    decoration: BoxDecoration(
                                      color: Colors.black54,
                                      shape: BoxShape.circle,
                                    ),
                                    child: const Icon(
                                      Icons.close,
                                      color: Colors.white,
                                      size: 14,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                const SizedBox(height: 16),
              ],
            ),
          ),
        ],
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.fromLTRB(85, 0, 85, 45),
        child: Container(
          height: 80,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(50),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.07),
                blurRadius: 10,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _isEditing
                  ? navbarNewEntry(
                      icon: PhosphorIcons.pencilSimple,
                      active: true,
                      onTap: _toggleEditing,
                    )
                  : navbarNewEntry(
                      iconWidget: SvgPicture.asset(
                        'assets/icons/pencil-simple-slash.svg',
                        width: 30,
                        height: 30,
                        colorFilter: const ColorFilter.mode(
                            Colors.black54, BlendMode.srcIn),
                      ),
                      active: false,
                      onTap: _toggleEditing,
                    ),
              navbarNewEntry(
                icon: PhosphorIcons.image,
                active: false,
                onTap: _pickImages,
              ),
              navbarNewEntry(
                icon: _isMicActive
                    ? PhosphorIcons.microphone
                    : PhosphorIcons.microphoneSlash,
                active: _isMicActive,
                onTap: _toggleMic,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/search_screen.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_state.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/search_bloc.dart';
import '../blocs/search_event.dart';
import '../blocs/search_state.dart';
import '../models/journal_entry.dart';
import '../utils/mood_utils.dart';
import '../widgets/custom_date_picker.dart';
import 'entry_detail_screen.dart';

class SearchScreen extends StatelessWidget {
  const SearchScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final journalBloc = context.read<JournalBloc>();
    return BlocProvider<SearchBloc>(
      create: (_) => SearchBloc(journalBloc: journalBloc),
      child: const _SearchView(),
    );
  }
}

class _SearchView extends StatefulWidget {
  const _SearchView({Key? key}) : super(key: key);

  @override
  State<_SearchView> createState() => _SearchViewState();
}

class _SearchViewState extends State<_SearchView> {
  final TextEditingController _searchController = TextEditingController();

  bool get _hasAnyFilter {
    final s = context.read<SearchBloc>().state;
    return s.query.isNotEmpty ||
        s.mood != null ||
        s.date != null ||
        s.withPhotosOnly;
  }

  void _executeSearch() {
    context.read<SearchBloc>().add(QueryChanged(_searchController.text.trim()));
  }

  void _resetAllFilters() {
    _searchController.clear();
    final bloc = context.read<SearchBloc>();
    bloc.add(QueryChanged(''));
    bloc.add(MoodFilterChanged(null));
    bloc.add(DateFilterChanged(null));
    bloc.add(PhotosFilterToggled(false));
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final auth = context.read<AuthBloc>().state;
    if (auth is! AuthAuthenticated) {
      return const Scaffold(
        body: Center(child: Text('Not authenticated')),
      );
    }

    final state = context.watch<SearchBloc>().state;

    return Scaffold(
      backgroundColor: defaultMoodBackground,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
          ),
          SafeArea(
            child: Column(
              children: [
                // Back button
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  child: Row(
                    children: [
                      Align(
                        alignment: Alignment.centerLeft,
                        child: GestureDetector(
                          onTap: () => Navigator.of(context).pop(),
                          child: const Icon(
                            PhosphorIcons.arrowCircleLeft,
                            size: 32,
                            color: Colors.black,
                          ),
                        ),
                      ),
                      const SizedBox(width: 16),
                      const Text(
                        'Search',
                        style: TextStyle(
                          fontFamily: 'lufga-bold',
                          fontSize: 24,
                          // fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),

                // Redesigned search bar
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          Colors.white.withOpacity(0.95),
                          Colors.white.withOpacity(0.85)
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.08),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _searchController,
                            onSubmitted: (_) => _executeSearch(),
                            style: const TextStyle(
                              fontFamily: 'lufga-regular',
                              fontSize: 16,
                              color: Color(0xFF1A1A1A),
                            ),
                            decoration: InputDecoration(
                              hintText: 'Search entries...',
                              hintStyle: TextStyle(
                                color: Colors.grey.shade500,
                                fontFamily: 'lufga-regular',
                              ),
                              border: InputBorder.none,
                              contentPadding: const EdgeInsets.symmetric(
                                horizontal: 20,
                                vertical: 16,
                              ),
                              prefixIcon: Icon(
                                Icons.search,
                                color: Colors.grey.shade600,
                                size: 22,
                              ),
                            ),
                          ),
                        ),
                        Container(
                          margin: const EdgeInsets.only(right: 8),
                          child: ElevatedButton(
                            onPressed: _executeSearch,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFF1A1A1A),
                              foregroundColor: Colors.white,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 24,
                                vertical: 12,
                              ),
                              elevation: 0,
                              textStyle: const TextStyle(
                                fontFamily: 'lufga-semi-bold',
                                fontSize: 14,
                                letterSpacing: 0.5,
                              ),
                            ),
                            child: const Text('Search'),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Redesigned filters section
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                        vertical: 16, horizontal: 16),
                    decoration: BoxDecoration(
                      color: Colors.grey.withOpacity(0.4),
                      borderRadius: BorderRadius.circular(24),
                      boxShadow: [
                        // BoxShadow(
                        //   color: Colors.black12,
                        //   blurRadius: 2,
                        //   offset: Offset(0, 3),
                        // ),
                      ],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            // Mood dropdown

                            // Expanded(
                            //   child: DropdownButtonFormField<String?>(
                            //     value: state.mood,
                            //     hint: const Text('Mood'),
                            //     items: [
                            //       const DropdownMenuItem(
                            //           value: null, child: Text('All moods')),
                            //       ..._SearchOptions.moods.map((m) =>
                            //           DropdownMenuItem(
                            //               value: m, child: Text(m))),
                            //     ],
                            //     onChanged: (m) => context
                            //         .read<SearchBloc>()
                            //         .add(MoodFilterChanged(m)),
                            //     decoration: InputDecoration(
                            //       isDense: true,
                            //       contentPadding:
                            //           const EdgeInsets.fromLTRB(12, 14, 60, 14),
                            //       border: OutlineInputBorder(
                            //         borderRadius: BorderRadius.circular(16),
                            //         borderSide: BorderSide.none,
                            //       ),
                            //       filled: true,
                            //       fillColor: Colors.grey.shade100,
                            //     ),
                            //   ),
                            // ),

                            Flexible(
                              flex: 11,
                              child: DropdownButtonFormField<String?>(
                                value: state.mood,
                                hint: const Text('Mood'),
                                items: [
                                  const DropdownMenuItem(
                                      value: null, child: Text('All moods')),
                                  ..._SearchOptions.moods.map((m) =>
                                      DropdownMenuItem(
                                          value: m, child: Text(m))),
                                ],
                                onChanged: (m) => context
                                    .read<SearchBloc>()
                                    .add(MoodFilterChanged(m)),
                                decoration: InputDecoration(
                                  isDense: true,
                                  contentPadding: const EdgeInsets.symmetric(
                                      horizontal: 12, vertical: 14),
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(16),
                                    borderSide: BorderSide.none,
                                  ),
                                  filled: true,
                                  fillColor: Colors.white.withOpacity(0.92),
                                  // fillColor: Colors.red,
                                ),
                              ),
                            ),
                            const SizedBox(width: 12),

                            // Date picker
                            //     GestureDetector(
                            //       onTap: () async {
                            //         final picked = await showCustomDatePicker(
                            //           context: context,
                            //           initialDate: state.date ?? DateTime.now(),
                            //         );
                            //         context
                            //             .read<SearchBloc>()
                            //             .add(DateFilterChanged(picked));
                            //       },
                            //       child: Container(
                            //         padding: const EdgeInsets.symmetric(
                            //             horizontal: 16, vertical: 14),
                            //         decoration: BoxDecoration(
                            //           color: Colors.grey.shade100,
                            //           borderRadius: BorderRadius.circular(16),
                            //         ),
                            //         child: Text(
                            //           state.date != null
                            //               ? DateFormat('dd/MM/yyyy')
                            //                   .format(state.date!)
                            //               : 'Date',
                            //           style: const TextStyle(fontSize: 14),
                            //         ),
                            //       ),
                            //     ),
                            //   ],
                            // ),
                            Flexible(
                              flex: 11,
                              child: GestureDetector(
                                onTap: () async {
                                  final picked = await showCustomDatePicker(
                                    context: context,
                                    initialDate: state.date ?? DateTime.now(),
                                  );
                                  context
                                      .read<SearchBloc>()
                                      .add(DateFilterChanged(picked));
                                },
                                child: Container(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 16, vertical: 14.5),
                                  decoration: BoxDecoration(
                                    // color: Colors.white.withOpacity(0.8),
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(16),
                                    // boxShadow: [
                                    //   BoxShadow(
                                    //     color: Colors.black.withOpacity(0.06),
                                    //     blurRadius: 8,
                                    //     offset: const Offset(0, 3),
                                    //   ),
                                    // ],
                                  ),
                                  child: Row(
                                    children: [
                                      Icon(
                                        // Icons.calendar_today_outlined,
                                        PhosphorIcons.calendar,
                                        size: 24,
                                        color: Colors.black,
                                      ),
                                      const SizedBox(width: 8),
                                      Expanded(
                                        child: Text(
                                          state.date != null
                                              ? DateFormat('dd/MM/yyyy')
                                                  .format(state.date!)
                                              : 'Select Date',
                                          style: TextStyle(
                                            // fontFamily: 'lufga-regular',
                                            fontSize: 14,
                                            color: state.date != null
                                                ? const Color(0xFF1A1A1A)
                                                : Colors.grey.shade500,
                                          ),
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 12),

                        // Photos only switch

                        // Padding(
                        //   padding: const EdgeInsets.only(left: 12.0, right: 2),
                        //   child: Row(
                        //     children: [
                        //       const Icon(Icons.photo_library_outlined,
                        //           size: 20, color: Colors.black54),
                        //       const SizedBox(width: 8),
                        //       const Text(
                        //         'Photos only',
                        //         style: TextStyle(
                        //             fontSize: 15, fontWeight: FontWeight.w500),
                        //       ),
                        //       const Spacer(),
                        //       Switch(
                        //         value: state.withPhotosOnly,
                        //         onChanged: (v) => context
                        //             .read<SearchBloc>()
                        //             .add(PhotosFilterToggled(v)),
                        //       ),
                        //     ],
                        //   ),
                        // ),

                        const SizedBox(height: 8),
                        Padding(
                          padding: const EdgeInsets.fromLTRB(10, 0, 8, 0),
                          child: Row(
                            children: [
                              const Icon(
                                Icons.photo_library_outlined,
                                size: 20,
                                color: Colors.black,
                              ),
                              const SizedBox(width: 8),
                              const Text(
                                'Photos only',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              const Spacer(),
                              GestureDetector(
                                onTap: () {
                                  final newVal = !state.withPhotosOnly;
                                  context
                                      .read<SearchBloc>()
                                      .add(PhotosFilterToggled(newVal));
                                },
                                child: AnimatedContainer(
                                  duration: const Duration(milliseconds: 200),
                                  width: 48,
                                  height: 28,
                                  padding: const EdgeInsets.all(3),
                                  decoration: BoxDecoration(
                                    color: state.withPhotosOnly
                                        ? Colors.black87
                                        : Colors.grey.shade300,
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Align(
                                    alignment: state.withPhotosOnly
                                        ? Alignment.centerRight
                                        : Alignment.centerLeft,
                                    child: Container(
                                      width: 20,
                                      height: 22,
                                      decoration: BoxDecoration(
                                        color: Colors.white,
                                        borderRadius: BorderRadius.circular(6),
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 8),

                        if (_hasAnyFilter)
                          Align(
                            alignment: Alignment.centerRight,
                            // child: TextButton(
                            //   onPressed: _resetAllFilters,
                            //   child: const Text(
                            //     'Reset filters',
                            //     style: TextStyle(
                            //       fontWeight: FontWeight.w500,
                            //       color: Colors.black87,
                            //     ),
                            //   ),
                            // ),
                            child: TextButton(
                              onPressed: _resetAllFilters,
                              style: TextButton.styleFrom(
                                foregroundColor: const Color(0xFF2E2A1F),
                                backgroundColor: Colors.white.withOpacity(0.92),
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 20,
                                  vertical: 10,
                                ),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(16),
                                ),
                                textStyle: const TextStyle(
                                  fontFamily: 'lufga-semi-bold',
                                  fontSize: 14,
                                  letterSpacing: 0.5,
                                ),
                              ),
                              child: const Text('Reset Filters'),
                            ),
                          ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Results
                Expanded(
                  child: !_hasAnyFilter
                      ? const SizedBox.shrink()
                      : state.filteredEntries.isEmpty
                          ? const Center(child: Text('No entries found.'))
                          : ListView.builder(
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 16),
                              itemCount: state.filteredEntries.length,
                              itemBuilder: (ctx, i) {
                                final e = state.filteredEntries[i];
                                return _buildEntryItem(e);
                              },
                            ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEntryItem(JournalEntry e) {
    final dow = DateFormat('EEE').format(e.timestamp).toLowerCase();
    final dayNum = DateFormat('d').format(e.timestamp);
    final imgs = e.attachments
        .where((a) => a.type == 'image' && File(a.url).existsSync())
        .map((a) => a.url)
        .toList();

    return GestureDetector(
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: e.id)),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 13),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 55,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.5),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Text(
                    dow,
                    style: const TextStyle(
                      fontSize: 16,
                      fontFamily: 'lufga-semi-bold',
                      color: Color(0xFF473623),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    dayNum,
                    style: const TextStyle(
                      fontSize: 18,
                      fontFamily: 'lufga-regular',
                      color: Colors.black,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    e.title.toLowerCase(),
                    style: const TextStyle(
                      fontSize: 20,
                      fontFamily: 'lufga-semi-bold-italic',
                      color: Color(0xFF473623),
                    ),
                  ),
                  Text(
                    _truncateWords(e.content, 30).toLowerCase(),
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.4,
                      fontFamily: 'lufga-regular',
                    ),
                  ),
                  if (imgs.isNotEmpty) ...[
                    const SizedBox(height: 12),
                    Row(
                      children: imgs.take(2).map((path) {
                        return Expanded(
                          child: Padding(
                            padding: const EdgeInsets.only(right: 8.0),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.file(
                                File(path),
                                height: 120,
                                fit: BoxFit.cover,
                                errorBuilder: (ctx, _, __) => Container(
                                  height: 120,
                                  color: Colors.grey.shade200,
                                  child: const Icon(Icons.broken_image),
                                ),
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _truncateWords(String text, int limit) {
    final words = text.split(RegExp(r'\s+'));
    if (words.length <= limit) return text;
    return words.take(limit).join(' ') + '...';
  }
}

class _SearchOptions {
  static const List<String> moods = [
    'Happy',
    'Excited',
    'Calm',
    'Grateful',
    'Loving',
    'Confident',
    'Sad',
    'Angry',
    'Anxious',
    'Lonely',
    'Guilty',
    'Jealous',
    'Confused',
    'Surprised',
    'Bored',
    'Restless',
    'Inspired',
    'Distracted',
  ];
}

]

roohbaru_app/lib/screens/home_screen.dart: [
// lib/screens/home_screen.dart

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import 'package:roohbaru_app/screens/insights_screen.dart';
import 'package:roohbaru_app/screens/profile_screen.dart';
import 'package:roohbaru_app/screens/search_screen.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../blocs/journal_state.dart';
import '../models/journal_entry.dart';
import '../services/quote_service.dart';
import '../utils/mood_utils.dart';
import '../widgets/navbar.dart';
import '../widgets/header_row.dart';
import '../widgets/greeting_section.dart';
import '../widgets/quote_section.dart';
import '../widgets/custom_date_picker.dart'; // ← NEW import
import 'intro_screen.dart';
import 'new_entry_screen.dart';
import 'entry_detail_screen.dart';

class HomeScreen extends StatefulWidget {
  final User user;
  const HomeScreen({Key? key, required this.user}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late Future<Quote> _quoteFuture;
  int _selectedIndex = 0;
  DateTime? _selectedDate; // ← track the picked date

  static const _defaultBg = defaultMoodBackground;

  @override
  void initState() {
    super.initState();
    context.read<JournalBloc>().add(LoadEntries(widget.user.uid));
    _quoteFuture = QuoteService.fetchTodayQuote();
  }

  String get _greeting {
    final h = DateTime.now().hour;
    if (h < 12) return 'good morning';
    if (h < 17) return 'good afternoon';
    return 'good evening';
  }

  String _truncateWords(String text, int limit) {
    final words = text.split(RegExp(r'\s+'));
    if (words.length <= limit) return text;
    return words.take(limit).join(' ') + '...';
  }

  Future<void> _pickDate() async {
    final picked = await showCustomDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
    );
    if (picked != null) {
      setState(() {
        _selectedDate = DateTime(picked.year, picked.month, picked.day);
      });
    }
  }

  void _resetDate() {
    setState(() {
      _selectedDate = null;
    });
  }

  void _onAddPressed() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => NewEntryScreen(userId: widget.user.uid),
      ),
    );
  }

  void _onItemSelected(int index) {
    if (index == 1) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const SearchScreen()),
      );
    } else if (index == 2) {
      // ← HANDLES INSIGHTS TAB
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const InsightsScreen()),
      );
    } else if (index == 3) {
      // ← HANDLES INSIGHTS TAB
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const ProfileScreen()),
      );
    } else {
      setState(() => _selectedIndex = index);
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (ctx, st) {
        if (st is AuthUnauthenticated) {
          Navigator.of(ctx).pushAndRemoveUntil(
            MaterialPageRoute(builder: (_) => const IntroScreen()),
            (_) => false,
          );
        } else if (st is AuthError) {
          ScaffoldMessenger.of(ctx)
              .showSnackBar(SnackBar(content: Text(st.message)));
        }
      },
      child: BlocBuilder<JournalBloc, JournalState>(
        builder: (ctx, journalState) {
          Color bg = _defaultBg;
          List<JournalEntry> all = [];
          if (journalState is JournalLoaded) {
            all = journalState.entries;
            if (all.isNotEmpty) {
              bg = moodBackgroundColors[all.first.mood] ?? _defaultBg;
            }
          }

          return Scaffold(
            backgroundColor: bg,
            body: Stack(
              children: [
                Container(color: bg),
                Positioned.fill(
                  child: Image.asset(
                    'assets/images/bg.png',
                    fit: BoxFit.cover,
                  ),
                ),
                SafeArea(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: SingleChildScrollView(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // ← only this row is updated to toggle calendar/reset
                          HeaderRow(
                            onCalendarPressed: _pickDate,
                            isDateSelected: _selectedDate != null,
                            onReset: _resetDate,
                            onLogoutPressed: () {
                              context.read<AuthBloc>().add(SignOutRequested());
                            },
                          ),

                          GreetingSection(greeting: _greeting),
                          const SizedBox(height: 24),
                          QuoteSection(quoteFuture: _quoteFuture),
                          const SizedBox(height: 6),
                          if (journalState is JournalLoading)
                            const Center(child: CircularProgressIndicator())
                          else if (journalState is JournalError)
                            Center(child: Text(journalState.message))
                          else if (all.isEmpty)
                            const Center(child: Text('No entries yet.'))
                          else
                            ..._buildMonthlySections(all),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
            bottomNavigationBar: Container(
              color: bg,
              child: CustomNavbar(
                selectedIndex: _selectedIndex,
                onItemSelected: _onItemSelected,
                onAddPressed: _onAddPressed,
              ),
            ),
          );
        },
      ),
    );
  }

  List<Widget> _buildMonthlySections(List<JournalEntry> all) {
    // If a date is selected, filter down and show only that day's entries
    if (_selectedDate != null) {
      final filtered = all.where((e) {
        final d = e.timestamp;
        return d.year == _selectedDate!.year &&
            d.month == _selectedDate!.month &&
            d.day == _selectedDate!.day;
      }).toList();

      final label =
          DateFormat('d MMM yyyy').format(_selectedDate!).toLowerCase();

      return [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 10),
          child: Row(
            children: [
              Text(
                label, // header now shows the picked date
                style: const TextStyle(
                  fontSize: 20,
                  fontFamily: 'lufga-bold',
                  color: Color(0xFF473623),
                ),
              ),
              const Spacer(),
              GestureDetector(
                onTap: _onAddPressed,
                child: const Text(
                  '+ add new',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.blue,
                  ),
                ),
              ),
            ],
          ),
        ),
        for (var e in filtered) _buildEntryItem(e),
      ];
    }

    // Otherwise original month‐grouping
    final Map<DateTime, List<JournalEntry>> byMonth = {};
    for (var e in all) {
      final key = DateTime(e.timestamp.year, e.timestamp.month);
      byMonth.putIfAbsent(key, () => []).add(e);
    }
    final months = byMonth.keys.toList()..sort((a, b) => b.compareTo(a));

    final List<Widget> sections = [];
    for (var month in months) {
      final label = DateFormat('MMMM yyyy').format(month);
      final entries = byMonth[month]!
        ..sort((a, b) => b.timestamp.compareTo(a.timestamp));

      sections.add(
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 10),
          child: Row(
            children: [
              Text(
                label.toLowerCase(), // original month label
                style: const TextStyle(
                  fontSize: 20,
                  fontFamily: 'lufga-bold',
                  color: Color(0xFF473623),
                ),
              ),
              const Spacer(),
              GestureDetector(
                onTap: _onAddPressed,
                child: const Text(
                  '+ add new',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.blue,
                  ),
                ),
              ),
            ],
          ),
        ),
      );
      for (var e in entries) {
        sections.add(_buildEntryItem(e));
      }
    }
    return sections;
  }

  Widget _buildEntryItem(JournalEntry e) {
    final dow = DateFormat('EEE').format(e.timestamp).toLowerCase();
    final dayNum = DateFormat('d').format(e.timestamp);

    final imgs = e.attachments
        .where((a) => a.type == 'image' && File(a.url).existsSync())
        .map((a) => a.url)
        .toList();

    return GestureDetector(
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: e.id)),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 13),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 55,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.5),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Text(
                    dow,
                    style: const TextStyle(
                      fontSize: 16,
                      fontFamily: 'lufga-semi-bold',
                      color: Color(0xFF473623),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    dayNum,
                    style: const TextStyle(
                      fontSize: 18,
                      fontFamily: 'lufga-regular',
                      color: Colors.black,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    e.title.toLowerCase(),
                    style: const TextStyle(
                      fontSize: 20,
                      fontFamily: 'lufga-semi-bold-italic',
                      color: Color(0xFF473623),
                    ),
                  ),
                  Text(
                    _truncateWords(e.content, 30).toLowerCase(),
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.4,
                      fontFamily: 'lufga-regular',
                    ),
                  ),
                  if (imgs.isNotEmpty) ...[
                    const SizedBox(height: 12),
                    Row(
                      children: imgs.take(2).map((path) {
                        return Expanded(
                          child: Padding(
                            padding: const EdgeInsets.only(right: 8.0),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.file(
                                File(path),
                                height: 120,
                                fit: BoxFit.cover,
                                errorBuilder: (ctx, _, __) => Container(
                                  height: 120,
                                  color: Colors.grey.shade200,
                                  child: const Icon(Icons.broken_image),
                                ),
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/intro_screen.dart: [
import 'package:flutter/material.dart';
// import 'package:video_player/video_player.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:roohbaru_app/screens/login_screen.dart';
import 'package:roohbaru_app/screens/signup_screen.dart';
import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import 'home_screen.dart';
import '../widgets/primary_button.dart';
import '../widgets/secondary_button.dart';

class IntroScreen extends StatefulWidget {
  const IntroScreen({super.key});

  @override
  State<IntroScreen> createState() => _IntroScreenState();
}

class _IntroScreenState extends State<IntroScreen> {
  // late VideoPlayerController _controller;

  @override
  void initState() {
    super.initState();

    // _controller = VideoPlayerController.asset('assets/videos/intro.mp4')
    //   ..initialize().then((_) {
    //     _controller.setLooping(false);
    //     _controller.setVolume(0);
    //     // _controller.play();
    //     if (mounted) setState(() {});
    //   });
  }

  @override
  void dispose() {
    // _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocListener<AuthBloc, AuthState>(
        listener: (ctx, state) {
          if (state is AuthAuthenticated) {
            Navigator.of(context).pushAndRemoveUntil(
              MaterialPageRoute(builder: (_) => HomeScreen(user: state.user)),
              (_) => false,
            );
          }
        },
        child: Stack(
          fit: StackFit.expand,
          children: [
            Image.asset(
              'assets/images/intro.png',
              fit: BoxFit.cover,
            ),
            Container(color: Colors.black.withOpacity(0.3)),
            SafeArea(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 24),
                child: Column(
                  children: [
                    const Spacer(flex: 2),
                    Image.asset(
                      'assets/images/logo.png',
                      height: 130,
                      fit: BoxFit.contain,
                    ),
                    const Spacer(flex: 4),

                    // Sign Up
                    PrimaryButton(
                      label: 'Sign Up',
                      backgroundColor: Colors.white,
                      textColor: Colors.black,
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => const SignupScreen()),
                        );
                      },
                    ),
                    const SizedBox(height: 16),

                    // Sign In
                    SecondaryButton(
                      label: 'Sign In',
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => const LoginScreen()),
                        );
                      },
                    ),

                    const SizedBox(height: 28),
                    Container(
                      width: 80,
                      height: 4,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(2),
                      ),
                    ),
                    const SizedBox(height: 16),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/services/file_storage_service.dart: [
// lib/services/file_storage_service.dart

import 'dart:io';
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';

class FileStorageService {
  /// Saves ONLY image files under /attachments/images in app storage.
  /// Throws if file is not an allowed image format.
  Future<File> saveImageLocally(File sourceFile) async {
    final ext = path.extension(sourceFile.path).toLowerCase();
    if (!['.jpg', '.jpeg', '.png', '.gif'].contains(ext)) {
      throw Exception('Unsupported image format: $ext');
    }

    final appDir = await getApplicationDocumentsDirectory();
    final imagesDir = Directory('${appDir.path}/attachments/images');
    if (!await imagesDir.exists()) {
      await imagesDir.create(recursive: true);
    }

    final fileName = path.basename(sourceFile.path);
    final savedPath = path.join(imagesDir.path, fileName);
    return sourceFile.copy(savedPath);
  }
}

]

roohbaru_app/lib/services/quote_service.dart: [
// lib/services/quote_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;

class Quote {
  final String text;
  final String author;

  Quote({
    required this.text,
    required this.author,
  });

  factory Quote.fromJson(Map<String, dynamic> json) => Quote(
        text: json['q'] as String,
        author: json['a'] as String,
      );
}

class QuoteService {
  /// Fetches today’s quote from zenquotes.io
  static Future<Quote> fetchTodayQuote() async {
    final resp = await http.get(Uri.parse('https://zenquotes.io/api/today'));
    if (resp.statusCode != 200) {
      throw Exception('Failed to load quote (${resp.statusCode})');
    }

    // ZenQuotes returns a List of Map, e.g. [ { "q": "...", "a": "...", ... } ]
    final data = jsonDecode(resp.body);
    if (data is! List || data.isEmpty) {
      throw Exception('Unexpected response format from quote API');
    }

    final first = data.first;
    if (first is! Map<String, dynamic>) {
      throw Exception('Unexpected item type in quote API response');
    }

    return Quote.fromJson(first);
  }
}

]

roohbaru_app/lib/services/auth_service.dart: [
import 'dart:developer';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn(scopes: ['email']);

  User? get currentUser => _auth.currentUser;

  Future<UserCredential?> loginWithGoogle() async {
    try {
      final googleUser = await _googleSignIn.signIn();
      if (googleUser == null) return null;
      final googleAuth = await googleUser.authentication;
      final cred = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );
      return _auth.signInWithCredential(cred);
    } catch (e, st) {
      log('loginWithGoogle error: $e\n$st');
      rethrow;
    }
  }

  Future<User?> createUserWithEmailAndPassword(
      String email, String password) async {
    try {
      final cred = await _auth.createUserWithEmailAndPassword(
          email: email, password: password);
      return cred.user;
    } catch (e) {
      log('Email signup failed: $e');
      return null;
    }
  }

  Future<User?> loginUserWithEmailAndPassword(
      String email, String password) async {
    try {
      final cred = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      return cred.user;
    } catch (e) {
      log('Email login failed: $e');
      return null;
    }
  }

  Future<void> signOut() async {
    try {
      await _googleSignIn.signOut();
      await _auth.signOut();
    } catch (e) {
      log('Sign-out error: $e');
    }
  }
}

]

roohbaru_app/lib/services/ai_service.dart: [
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class AIResult {
  final String sentiment;
  final String mood;
  final String song;
  final String movie;
  final String analysis; // ← New field

  AIResult({
    required this.sentiment,
    required this.mood,
    required this.song,
    required this.movie,
    required this.analysis,
  });

  List<String> get suggestions => [song, movie];
}

class AIService {
  // Eight one-word personalities you can toggle:
  final bool calm;
  final bool cheerful;
  final bool empathetic;
  final bool gentle;
  final bool supportive;
  final bool humorous;
  final bool mindful;
  final bool optimistic;

  AIService({
    this.calm = false,
    this.cheerful = false,
    this.empathetic = false,
    this.gentle = false,
    this.supportive = true, // ← default must pick at least one
    this.humorous = false,
    this.mindful = false,
    this.optimistic = false,
  }) : assert(
          calm ||
              cheerful ||
              empathetic ||
              gentle ||
              supportive ||
              humorous ||
              mindful ||
              optimistic,
          'At least one personality must be true',
        );

  final String _apiKey = dotenv.env['GROQ_API_KEY'] ?? '';
  static const _endpoint = 'https://api.groq.com/openai/v1/chat/completions';
  static const _model = 'llama3-8b-8192';

  Future<AIResult> analyzeEntry(String content) async {
    if (_apiKey.isEmpty) {
      throw Exception('GROQ_API_KEY not set in .env');
    }

    // Build list of selected personalities
    final names = <String>[];
    if (calm) names.add('calm');
    if (cheerful) names.add('cheerful');
    if (empathetic) names.add('empathetic');
    if (gentle) names.add('gentle');
    if (supportive) names.add('supportive');
    if (humorous) names.add('humorous');
    if (mindful) names.add('mindful');
    if (optimistic) names.add('optimistic');
    final pList = names.join(', ');

    final systemPrompt = '''
You are a $pList assistant acting as a friendly, amateur psychiatrist. 
Analyze the following journal entry and return strict JSON with:
- "sentiment": Positive, Negative, or Neutral
- "mood": one of: Happy, Excited, Calm, Grateful, Loving, Confident, Sad, Angry, Anxious, Lonely, Guilty, Jealous, Confused, Surprised, Bored, Restless, Inspired, Distracted
- "song": one song recommendation for the mood
- "movie": one movie recommendation for the mood
- "analysis": a 2–3 line soothing comment or suggestion as if you were a caring friend

Example:
{"sentiment":"Positive","mood":"Calm","song":"Weightless by Marconi Union","movie":"The Secret Life of Walter Mitty","analysis":"It sounds like you’re finding peace in small moments—keep nurturing this calm by taking a few deep breaths when things feel overwhelming. Remember, every step forward, no matter how gentle, is progress. Feel free to revisit this exercise whenever you need a moment of quiet."}

Only return strict JSON. No extra text.
''';

    final messages = [
      {'role': 'system', 'content': systemPrompt},
      {'role': 'user', 'content': content},
    ];

    final body = {'model': _model, 'messages': messages, 'temperature': 0.3};

    final response = await http.post(
      Uri.parse(_endpoint),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $_apiKey',
      },
      body: jsonEncode(body),
    );

    if (response.statusCode != 200) {
      throw Exception(
          'Groq API error ${response.statusCode}: ${response.body}');
    }

    final decoded = jsonDecode(response.body);
    final raw = decoded['choices'][0]['message']['content'] as String;

    try {
      final jsonText = _extractJson(raw);
      final data = jsonDecode(jsonText);
      return AIResult(
        sentiment: data['sentiment'] ?? 'Neutral',
        mood: data['mood'] ?? 'Calm',
        song: data['song'] ?? 'No suggestion',
        movie: data['movie'] ?? 'No suggestion',
        analysis: data['analysis'] ?? '',
      );
    } catch (e) {
      print('⚠️ Failed to parse JSON:\n$raw\nError: $e');
      return AIResult(
        sentiment: 'Neutral',
        mood: 'Calm',
        song: 'Weightless by Marconi Union',
        movie: 'The Secret Life of Walter Mitty',
        analysis:
            'I’m here to listen—remember to take slow, deep breaths and be gentle with yourself. You’re doing your best, and that’s enough.',
      );
    }
  }

  String _extractJson(String raw) {
    final start = raw.indexOf('{');
    final end = raw.lastIndexOf('}');
    if (start < 0 || end <= start) {
      throw FormatException('No valid JSON object found.');
    }
    return raw.substring(start, end + 1);
  }
}

]

roohbaru_app/lib/widgets/custom_date_picker.dart: [
// lib/widgets/custom_date_picker.dart

import 'package:flutter/material.dart';

/// Shows a calendar dialog styled exactly like your mockup,
/// but only allowing selection up to today (no future dates).
/// Usage:
/// ```dart
/// final picked = await showCustomDatePicker(
///   context: context,
///   initialDate: DateTime.now(),
/// );
/// ```
Future<DateTime?> showCustomDatePicker({
  required BuildContext context,
  required DateTime initialDate,
  DateTime? firstDate,
  // Force lastDate to today if not provided
  DateTime? lastDate,
}) {
  final today = DateTime.now();
  return showDatePicker(
    context: context,
    initialDate: initialDate.isAfter(today) ? today : initialDate,
    firstDate: firstDate ?? DateTime(2000),
    lastDate: lastDate ?? today,
    builder: (ctx, child) {
      return Theme(
        data: Theme.of(ctx).copyWith(
          colorScheme: ColorScheme.light(
            primary: const Color(0xFFF2D96C), // header bg & selected day
            onPrimary: Colors.black, // header text & selected text
            surface: Colors.white, // calendar surface
            onSurface: Colors.black87, // dates & weekdays
          ),
          dialogBackgroundColor: const Color(0xFFF8EED5), // overall bg
          textButtonTheme: TextButtonThemeData(
            style: TextButton.styleFrom(
              foregroundColor: const Color(0xFF4E4039), // OK/Cancel
            ),
          ),
        ),
        child: child!,
      );
    },
  );
}

]

roohbaru_app/lib/widgets/navbar_new_entry.dart: [
import 'package:flutter/material.dart';

class navbarNewEntry extends StatefulWidget {
  const navbarNewEntry({
    super.key,
    this.icon,
    this.iconWidget,
    required this.active,
    required this.onTap,
  });

  final IconData? icon;
  final Widget? iconWidget;
  final bool active;
  final VoidCallback onTap;

  @override
  State<navbarNewEntry> createState() => _navbarNewEntryState();
}

class _navbarNewEntryState extends State<navbarNewEntry>
    with SingleTickerProviderStateMixin {
  double _scale = 1.0;

  void _onTapDown(TapDownDetails details) {
    setState(() {
      _scale = 0.9;
    });
  }

  void _onTapUp(TapUpDetails details) {
    setState(() {
      _scale = 1.0;
    });
    widget.onTap();
  }

  void _onTapCancel() {
    setState(() {
      _scale = 1.0;
    });
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown: _onTapDown,
      onTapUp: _onTapUp,
      onTapCancel: _onTapCancel,
      child: AnimatedScale(
        scale: _scale,
        duration: const Duration(milliseconds: 150),
        child: Container(
          width: 64,
          height: 64,
          decoration: BoxDecoration(
            color: widget.active
                ? const Color(0xFFB6F09C)
                : const Color(0xFFced4da),
            // color: active ? const Color(0xFFB6F09C) : const Color(0xFFb1b1b1),
            shape: BoxShape.circle,
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                spreadRadius: 1,
                blurRadius: 5,
                offset: const Offset(0, 3),
              ),
            ],
          ),
          child: Center(
            child: widget.iconWidget ??
                Icon(
                  widget.icon,
                  size: 30,
                  color: widget.active ? Colors.black : Colors.black54,
                ),
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/primary_button.dart: [
import 'package:flutter/material.dart';

class PrimaryButton extends StatelessWidget {
  final String label;
  final VoidCallback? onPressed;
  final Color backgroundColor;
  final Color textColor;

  const PrimaryButton({
    super.key,
    required this.label,
    this.onPressed,
    this.backgroundColor = Colors.black, // default: black
    this.textColor = Colors.white, // default: white
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: 52,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          foregroundColor: textColor,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: Text(
          label,
          style: TextStyle(
            color: textColor,
            fontSize: 16,
            // fontWeight: FontWeight.w600,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/navbar.dart: [
import 'package:flutter/material.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';

class CustomNavbar extends StatefulWidget {
  final int selectedIndex;
  final void Function(int) onItemSelected;
  final VoidCallback onAddPressed;

  const CustomNavbar({
    super.key,
    required this.selectedIndex,
    required this.onItemSelected,
    required this.onAddPressed,
  });

  @override
  State<CustomNavbar> createState() => _CustomNavbarState();
}

class _CustomNavbarState extends State<CustomNavbar>
    with TickerProviderStateMixin {
  late final List<AnimationController> _controllers;

  @override
  void initState() {
    super.initState();
    _controllers = List.generate(4, (index) {
      return AnimationController(
        vsync: this,
        duration: const Duration(milliseconds: 300),
        lowerBound: 1.2,
        upperBound: 2,
      )..addStatusListener((status) {
          if (status == AnimationStatus.completed) {
            _controllers[index].reverse(); // Bounce back
          }
        });
    });
  }

  @override
  void dispose() {
    for (final controller in _controllers) {
      controller.dispose();
    }
    super.dispose();
  }

  void _onItemTapped(int index) {
    widget.onItemSelected(index);
    _controllers[index].forward(); // Trigger bounce animation
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(left: 20, right: 20, bottom: 20, top: 2),
      height: 65,
      decoration: BoxDecoration(
        // color: Colors.white,
        // color: Color(0xFF473623),
        color: Colors.black,
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            blurRadius: 12,
            color: Colors.black12,
            // offset: Offset(0, 4),
          ),
        ],
      ),
      child: Stack(
        alignment: Alignment.center,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _buildAnimatedNavItem(
                0,
                'Home',
                Icons.home_rounded,
                // PhosphorIcons.house,
              ),
              _buildAnimatedNavItem(
                1,
                'Search',
                Icons.search_rounded,
                // PhosphorIcons.magnifyingGlass,
              ),
              const SizedBox(width: 48), // Reduced spacer for smaller FAB
              _buildAnimatedNavItem(
                2,
                'Insights',
                Icons.bar_chart_rounded,
              ),
              _buildAnimatedNavItem(
                3,
                'Profile',
                Icons.person,
                // PhosphorIcons.user,
                // PhosphorIcons.userCircle,
              ),
            ],
          ),
          Positioned(
            child: SizedBox(
              width: 50, // Smaller FAB width
              height: 50, // Smaller FAB height
              child: FloatingActionButton(
                backgroundColor: Colors.white,
                onPressed: widget.onAddPressed,
                shape: const CircleBorder(),
                child: const Icon(
                  Icons.add,
                  color: Colors.black,
                  size: 24, // Smaller icon
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAnimatedNavItem(int index, String label, IconData icon) {
    final isSelected = widget.selectedIndex == index;

    return GestureDetector(
      onTap: () => _onItemTapped(index),
      child: SizedBox(
        width: 56,
        height: 56,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ScaleTransition(
              scale: _controllers[index].drive(Tween(begin: 1.0, end: 1.2)),
              child: Icon(
                icon,
                color: isSelected ? Colors.blue : Colors.white,
                size: 28,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              label,
              style: TextStyle(
                fontSize: 10,
                fontFamily: 'lufga-bold',
                // fontWeight: FontWeight.bold,
                color: isSelected ? Colors.blue : Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/quote_section.dart: [
// lib/widgets/quote_section.dart

import 'package:flutter/material.dart';
import '../services/quote_service.dart';

class QuoteSection extends StatelessWidget {
  final Future<Quote> quoteFuture;

  const QuoteSection({Key? key, required this.quoteFuture}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<Quote>(
      future: quoteFuture,
      builder: (c, snap) {
        if (snap.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        if (snap.hasError) {
          return Text(
            'Error loading quote',
            style: TextStyle(color: Colors.red),
          );
        }
        final q = snap.data!;
        return Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.5),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: const [
                  Text(
                    "today’s quote",
                    style: TextStyle(
                      fontFamily: 'lufga-regular',
                      fontSize: 18,
                      color: Colors.black54,
                    ),
                  ),
                  Icon(
                    Icons.format_quote_rounded,
                    size: 40,
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                q.text.toLowerCase(),
                style: const TextStyle(
                  fontFamily: 'lufga-light-italic',
                  fontSize: 20,
                  color: Color(0xFF473623),
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              Text(
                '- ${q.author}',
                style: const TextStyle(
                  fontFamily: 'lufga-semi-bold',
                  fontSize: 14,
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}

]

roohbaru_app/lib/widgets/suggestion_card.dart: [
import 'package:flutter/material.dart';

class SuggestionCard extends StatelessWidget {
  const SuggestionCard({
    super.key,
    required this.icon,
    required this.suggestion,
    required this.context,
  });

  final IconData icon;
  final String suggestion;
  final BuildContext context;

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: suggestion.isNotEmpty ? 1.0 : 0.7,
      duration: const Duration(milliseconds: 300),
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        padding: const EdgeInsets.all(12),
        // decoration: BoxDecoration(
        //   color: const Color(0xFF2E2E2E).withOpacity(0.1),
        //   // color: Colors.white.withOpacity(0.4),
        //   borderRadius: BorderRadius.circular(10),
        //   // border: Border.all(
        //   //   color: Colors.black.withOpacity(0.1),
        //   //   width: 1,
        //   // ),
        // ),
        decoration: BoxDecoration(
          // color: Colors.white.withOpacity(0.3),
          color: const Color(0xFF2E2E2E).withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.white.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: const Color(0xFFE8ECEF),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                icon,
                size: 20,
                color: const Color(0xFF2E2E2E),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.only(top: 8.0),
                child: Text(
                  suggestion,
                  style: const TextStyle(
                      fontFamily: 'lufga-regular',
                      fontSize: 14,
                      // color: Color(0xFF4A4A4A),
                      color: Colors.black),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/secondary_button.dart: [
import 'package:flutter/material.dart';

class SecondaryButton extends StatelessWidget {
  final String label;
  final VoidCallback? onPressed;

  const SecondaryButton({
    super.key,
    required this.label,
    this.onPressed,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: 52,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.black.withOpacity(0.3),
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12), // rectangular, not pill
          ),
          elevation: 0,
        ),
        child: Text(
          label,
          style: const TextStyle(
            // fontWeight: FontWeight.w500,
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/header_row.dart: [
// // lib/widgets/header_row.dart

// import 'package:flutter/material.dart';

// class HeaderRow extends StatelessWidget {
//   final VoidCallback onCalendarPressed;
//   final VoidCallback onLogoutPressed;

//   const HeaderRow({
//     Key? key,
//     required this.onCalendarPressed,
//     required this.onLogoutPressed,
//   }) : super(key: key);

//   @override
//   Widget build(BuildContext context) {
//     return Row(
//       children: [
//         IconButton(
//           icon: const Icon(
//             Icons.calendar_month_rounded,
//             size: 30,
//             color: Colors.black,
//           ),
//           onPressed: onCalendarPressed,
//         ),
//         const Spacer(),
//         IconButton(
//           icon: const Icon(
//             Icons.logout,
//             size: 25,
//             color: Colors.black,
//           ),
//           onPressed: onLogoutPressed,
//         ),
//       ],
//     );
//   }
// }

// lib/widgets/header_row.dart

// lib/widgets/header_row.dart

import 'package:flutter/material.dart';

class HeaderRow extends StatelessWidget {
  /// Called when the calendar icon is tapped (only when [isDateSelected] is false).
  final VoidCallback onCalendarPressed;

  /// Called when the logout icon is tapped.
  final VoidCallback onLogoutPressed;

  /// If true, show the Reset pill instead of the calendar icon.
  final bool isDateSelected;

  /// Called when the Reset pill is tapped (only when [isDateSelected] is true).
  final VoidCallback? onReset;

  const HeaderRow({
    Key? key,
    required this.onCalendarPressed,
    required this.onLogoutPressed,
    this.isDateSelected = false,
    this.onReset,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        // Animated switch between calendar icon and Reset pill
        AnimatedSwitcher(
          duration: const Duration(milliseconds: 300),
          switchInCurve: Curves.easeIn,
          switchOutCurve: Curves.easeOut,
          transitionBuilder: (child, animation) {
            return FadeTransition(opacity: animation, child: child);
          },
          child: isDateSelected
              ? GestureDetector(
                  key: const ValueKey('reset'),
                  onTap: onReset,
                  child: Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(30),
                    ),
                    child: const Text(
                      'Reset',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.black,
                      ),
                    ),
                  ),
                )
              : IconButton(
                  key: const ValueKey('calendar'),
                  icon: const Icon(
                    Icons.calendar_month_rounded,
                    size: 30,
                    color: Colors.black,
                  ),
                  onPressed: onCalendarPressed,
                ),
        ),

        const Spacer(),

        IconButton(
          icon: const Icon(
            Icons.logout,
            size: 25,
            color: Colors.black,
          ),
          onPressed: onLogoutPressed,
        ),
      ],
    );
  }
}

]

roohbaru_app/lib/widgets/greeting_section.dart: [
// lib/widgets/greeting_section.dart

import 'package:flutter/material.dart';

class GreetingSection extends StatelessWidget {
  final String greeting;

  const GreetingSection({Key? key, required this.greeting}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        children: [
          Text(
            greeting,
            style: const TextStyle(
              fontFamily: 'lufga-bold',
              fontSize: 32,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 4),
          const Text(
            'reflect, grow, thrive',
            style: TextStyle(
              fontFamily: 'lufga-regular',
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/custom_text_field.dart: [
import 'package:flutter/material.dart';

class CustomTextField extends StatelessWidget {
  final String label;
  final String hint;
  final TextEditingController controller;
  final bool obscureText;
  final Widget? suffixIcon;
  final String? errorText;

  const CustomTextField({
    super.key,
    required this.label,
    required this.hint,
    required this.controller,
    this.obscureText = false,
    this.suffixIcon,
    this.errorText,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label,
            style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500)),
        const SizedBox(height: 8),
        TextField(
          controller: controller,
          obscureText: obscureText,
          decoration: InputDecoration(
            hintText: hint,
            suffixIcon: suffixIcon,
            errorText: errorText,
            contentPadding:
                const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: Colors.grey),
            ),
          ),
        ),
      ],
    );
  }
}

]

roohbaru_app/lib/widgets/social_button.dart: [
import 'package:flutter/material.dart';

class SocialButton extends StatelessWidget {
  final String assetPath;
  final VoidCallback? onTap;

  const SocialButton({
    super.key,
    required this.assetPath,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          height: 48,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.grey.shade300, width: 1),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Center(
            child: Image.asset(assetPath, height: 24, width: 24),
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/insights/mood_bar_chart.dart: [
// lib/widgets/insights/mood_bar_chart.dart

import 'package:flutter/material.dart';

typedef CategoryTap = void Function(String category);

class MoodBarChart extends StatelessWidget {
  final Map<String, int> data;
  final String? selectedCategory;
  final CategoryTap onCategoryTap;

  const MoodBarChart({
    super.key,
    required this.data,
    required this.selectedCategory,
    required this.onCategoryTap,
  });

  @override
  Widget build(BuildContext context) {
    // 1) Compute both max and total
    final maxValue =
        data.values.isEmpty ? 1 : data.values.reduce((a, b) => a > b ? a : b);

    final total = data.values.fold<int>(0, (sum, v) => sum + v);

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: data.entries.map((entry) {
          final value = entry.value;

          // 2) Height ratio: you can choose max-value scaling...
          // final heightRatio = maxValue == 0 ? 0.0 : value / maxValue;

          // ...or total-share scaling. Here we use total-share so bars reflect % of all entries:
          final heightRatio = total == 0 ? 0.0 : value / total;

          // 3) Share ratio for label
          final shareRatio = total == 0 ? 0.0 : value / total;
          final percentage = '${(shareRatio * 100).round()}%';

          // pick your colors
          final isSelected = entry.key == selectedCategory;
          final base = _getBarColor(entry.key);
          final color = isSelected ? base : base.withOpacity(0.85);
          final dark = _darken(color, 0.2);

          return GestureDetector(
            onTap: () => onCategoryTap(entry.key),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                // Outer container for fixed height
                AnimatedContainer(
                  duration: const Duration(milliseconds: 300),
                  height: 180,
                  width: 60,
                  alignment: Alignment.bottomCenter,
                  child: AnimatedContainer(
                    duration: const Duration(milliseconds: 300),
                    // 4) Use heightRatio * maxInnerHeight
                    height: 160 * heightRatio,
                    width: 48,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(16),
                      gradient: LinearGradient(
                        colors: [color, dark],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      boxShadow: isSelected
                          ? [
                              BoxShadow(
                                color: color.withOpacity(0.6),
                                blurRadius: 12,
                                offset: const Offset(0, 5),
                              )
                            ]
                          : [
                              const BoxShadow(
                                color: Colors.black26,
                                blurRadius: 6,
                                offset: Offset(0, 4),
                              )
                            ],
                    ),
                    alignment: Alignment.center,
                    child: Text(
                      percentage,
                      style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 8),
                SizedBox(
                  width: 60,
                  child: Text(
                    entry.key,
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Theme.of(context).brightness == Brightness.dark
                          ? Colors.white70
                          : Colors.black87,
                      fontSize: 13,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ),
    );
  }

  Color _getBarColor(String category) {
    switch (category.toLowerCase()) {
      case 'positive':
        return const Color(0xFF00D26A);
      case 'neutral':
        return const Color(0xFFFAA937);
      case 'negative':
        return const Color(0xFFE84855);
      default:
        return Colors.grey;
    }
  }

  Color _darken(Color color, double amt) {
    final hsl = HSLColor.fromColor(color);
    return hsl.withLightness((hsl.lightness - amt).clamp(0.0, 1.0)).toColor();
  }
}

]

roohbaru_app/lib/widgets/insights/analytics_card.dart: [
// lib/widgets/analytics_card.dart
import 'package:flutter/material.dart';

class AnalyticsCard extends StatelessWidget {
  final String title;
  final int total;
  final double changePercent;
  final bool hasChange;
  final bool isIncrease;

  const AnalyticsCard({
    super.key,
    required this.title,
    required this.total,
    required this.changePercent,
    required this.hasChange,
    required this.isIncrease,
  });

  @override
  Widget build(BuildContext context) {
    final changeText = hasChange
        ? '${isIncrease ? '+' : '-'}${changePercent.toStringAsFixed(0)}%'
        : '-';
    final changeColor =
        !hasChange ? Colors.grey : (isIncrease ? Colors.green : Colors.red);

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        boxShadow: [BoxShadow(color: Colors.black12, blurRadius: 6)],
      ),
      child: Row(
        children: [
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title,
                    style:
                        const TextStyle(fontSize: 16, color: Colors.black54)),
                const SizedBox(height: 4),
                Text('$total',
                    style: const TextStyle(
                        fontSize: 28, fontWeight: FontWeight.bold)),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: changeColor.withOpacity(0.15),
              borderRadius: BorderRadius.circular(4),
            ),
            child: Text(changeText,
                style:
                    TextStyle(color: changeColor, fontWeight: FontWeight.w600)),
          ),
        ],
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/insights/duration_selector.dart: [
// lib/widgets/duration_selector.dart
import 'package:flutter/material.dart';
import '../../blocs/insights_event.dart';

class DurationSelector extends StatelessWidget {
  final DurationFilter current;
  final ValueChanged<DurationFilter> onChanged;

  const DurationSelector({
    super.key,
    required this.current,
    required this.onChanged,
  });

  Widget _buildButton(
    String label,
    DurationFilter filter,
    bool isSelected,
    VoidCallback onTap,
  ) {
    return Expanded(
      child: GestureDetector(
        onTap: onTap,
        child: Container(
          height: 36,
          alignment: Alignment.center,
          decoration: BoxDecoration(
            color: isSelected ? Colors.black : Colors.white,
            border: Border.all(color: Colors.grey),
            borderRadius: BorderRadius.circular(4),
          ),
          child: Text(
            label,
            style: TextStyle(
              color: isSelected ? Colors.white : Colors.black,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        _buildButton(
          'All-Time',
          DurationFilter.allTime,
          current == DurationFilter.allTime,
          () => onChanged(DurationFilter.allTime),
        ),
        const SizedBox(width: 8),
        _buildButton(
          '30d',
          DurationFilter.last30Days,
          current == DurationFilter.last30Days,
          () => onChanged(DurationFilter.last30Days),
        ),
        const SizedBox(width: 8),
        _buildButton(
          '7d',
          DurationFilter.last7Days,
          current == DurationFilter.last7Days,
          () => onChanged(DurationFilter.last7Days),
        ),
      ],
    );
  }
}

]

roohbaru_app/lib/widgets/insights/mood_pie_chart.dart: [
// lib/widgets/insights/mood_pie_chart.dart

import 'dart:math';
import 'package:flutter/material.dart';
import '../../utils/mood_utils.dart'; // for moodBackgroundColors

class MoodPieChart extends StatelessWidget {
  final Map<String, int> data;

  const MoodPieChart({super.key, required this.data});

  @override
  Widget build(BuildContext context) {
    return CustomPaint(
      painter: _MoodPieChartPainter(data),
      child: const SizedBox.expand(),
    );
  }
}

class _MoodPieChartPainter extends CustomPainter {
  final Map<String, int> data;
  _MoodPieChartPainter(this.data);

  @override
  void paint(Canvas canvas, Size size) {
    final total = data.values.fold<int>(0, (sum, v) => sum + v);
    if (total == 0) return;

    final center = Offset(size.width / 2, size.height / 2);
    final radius = min(size.width, size.height) / 2 * 0.9;
    var startAngle = -pi / 2; // start at top

    final textPainter = TextPainter(
      textDirection: TextDirection.ltr,
    );

    data.forEach((mood, count) {
      final sweep = 2 * pi * (count / total);
      final paint = Paint()
        ..style = PaintingStyle.fill
        ..color = moodBackgroundColors[mood] ?? Colors.grey;

      // draw slice
      canvas.drawArc(
        Rect.fromCircle(center: center, radius: radius),
        startAngle,
        sweep,
        true,
        paint,
      );

      // midpoint angle for label
      final midAngle = startAngle + sweep / 2;
      final labelRadius = radius * 0.65;
      final labelX = center.dx + cos(midAngle) * labelRadius;
      final labelY = center.dy + sin(midAngle) * labelRadius;

      // prepare label text: “Mood (xx%)”
      final percent = (count / total * 100).round();
      textPainter.text = TextSpan(
        text: '$mood\n$percent%',
        style: const TextStyle(
          color: Colors.black87,
          fontSize: 12,
          fontWeight: FontWeight.bold,
        ),
      );
      textPainter.layout();

      // paint label centered
      final labelOffset = Offset(
        labelX - textPainter.width / 2,
        labelY - textPainter.height / 2,
      );
      textPainter.paint(canvas, labelOffset);

      startAngle += sweep;
    });
  }

  @override
  bool shouldRepaint(covariant _MoodPieChartPainter old) {
    return old.data != data;
  }
}

]

roohbaru_app/lib/widgets/profile/profile_header.dart: [
import 'package:flutter/material.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';

class ProfileHeader extends StatelessWidget {
  const ProfileHeader({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      child: Row(
        children: [
          GestureDetector(
            onTap: () => Navigator.of(context).pop(),
            child: const Icon(
              PhosphorIcons.arrowCircleLeft,
              size: 32,
              color: Colors.black,
            ),
          ),
          const SizedBox(width: 16),
          const Text(
            'Profile',
            style: TextStyle(
              fontFamily: 'lufga-bold',
              fontSize: 24,
              // fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/profile/avatar_animation.dart: [
import 'package:flutter/material.dart';

typedef AnimationCompleted = void Function();

class AvatarAnimation extends StatefulWidget {
  final AnimationCompleted onCompleted;
  const AvatarAnimation({Key? key, required this.onCompleted})
      : super(key: key);

  @override
  _AvatarAnimationState createState() => _AvatarAnimationState();
}

class _AvatarAnimationState extends State<AvatarAnimation>
    with SingleTickerProviderStateMixin {
  late final AnimationController _ctrl;
  late final Animation<Offset> _shapeMoveUp;
  late final Animation<Offset> _avatarSlideUp;

  @override
  void initState() {
    super.initState();
    _ctrl = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 500),
    );

    // Shape starts immediately and moves the full duration
    _shapeMoveUp = Tween<Offset>(
      begin: Offset.zero,
      end: const Offset(0, -0.2),
    ).animate(
      CurvedAnimation(
        parent: _ctrl,
        curve: const Interval(0.0, 1.0, curve: Curves.easeOut),
      ),
    );

    // Avatar waits a bit (20%), then moves up together with the shape
    _avatarSlideUp = Tween<Offset>(
      begin: const Offset(0, 0.5),
      end: Offset.zero,
    ).animate(
      CurvedAnimation(
        parent: _ctrl,
        curve: const Interval(0.2, 1.0, curve: Curves.easeOut),
      ),
    );

    _ctrl.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        widget.onCompleted();
      }
    });

    _ctrl.forward();
  }

  @override
  void dispose() {
    _ctrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 250,
      child: Stack(
        alignment: Alignment.center,
        children: [
          SlideTransition(
            position: _shapeMoveUp,
            child: Image.asset('assets/images/shape.png'),
          ),
          SlideTransition(
            position: _avatarSlideUp,
            child: Image.asset('assets/images/avatar.png'),
          ),
        ],
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/profile/profile_info.dart: [
import 'package:flutter/material.dart';

class ProfileInfo extends StatelessWidget {
  final String name;
  final String email;

  const ProfileInfo({
    Key? key,
    required this.name,
    required this.email,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text(
          name,
          style: const TextStyle(
            fontFamily: 'lufga-bold',
            color: Color(0xFF473623),
            fontSize: 34,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 2),
        Text(
          email,
          style: const TextStyle(
            fontSize: 14,
            color: Colors.black54,
          ),
        ),
      ],
    );
  }
}

]

