roohbaru_app/lib/screens/new_entry_screen.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:roohbaru_app/widgets/navbar_new_entry.dart';
import 'package:uuid/uuid.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart'; // ✅ Phosphor icons
import 'package:flutter_svg/flutter_svg.dart'; // ✅ For SVG support

import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../models/journal_entry.dart';
import '../services/file_storage_service.dart';
import 'entry_detail_screen.dart';

class NewEntryScreen extends StatefulWidget {
  final String userId;
  const NewEntryScreen({Key? key, required this.userId}) : super(key: key);

  @override
  State<NewEntryScreen> createState() => _NewEntryScreenState();
}

class _NewEntryScreenState extends State<NewEntryScreen> {
  final TextEditingController _titleCtrl = TextEditingController();
  final TextEditingController _contentCtrl = TextEditingController();
  final List<Attachment> _attachments = [];
  final FileStorageService _fileService = FileStorageService();
  final ImagePicker _picker = ImagePicker();

  bool _isEditing = false;
  bool _isMicActive = false;
  bool _showTitleError = false;

  @override
  void dispose() {
    _titleCtrl.dispose();
    _contentCtrl.dispose();
    super.dispose();
  }

  void _toggleEditing() {
    setState(() {
      _isEditing = !_isEditing;
    });
  }

  void _toggleMic() {
    setState(() {
      _isMicActive = !_isMicActive;
    });
  }

  Future<void> _pickImages() async {
    try {
      final List<XFile>? picked =
          await _picker.pickMultiImage(imageQuality: 80);
      if (picked == null) return;

      for (var xfile in picked) {
        final saved = await _fileService.saveImageLocally(File(xfile.path));
        setState(() {
          _attachments.add(
            Attachment(
              url: saved.path,
              name: xfile.name,
              type: 'image',
            ),
          );
        });
      }
    } catch (e) {
      debugPrint('Image pick error: $e');
    }
  }

  void _submitEntry() {
    final title = _titleCtrl.text.trim();
    final content = _contentCtrl.text.trim();

    if (title.isEmpty) {
      setState(() => _showTitleError = true);
      return;
    }

    final entry = JournalEntry(
      id: const Uuid().v4(),
      userId: widget.userId,
      title: title,
      content: content,
      timestamp: DateTime.now(),
      attachments: _attachments,
    );

    context.read<JournalBloc>().add(AddEntry(entry));
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: entry.id)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFf8eed5),
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset(
              'assets/images/bg2.png',
              fit: BoxFit.cover,
            ),
          ),
          SafeArea(
            child: Column(
              children: [
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  child: Row(
                    children: [
                      GestureDetector(
                        onTap: () => Navigator.of(context).pop(),
                        // child: const Icon(
                        //   Icons.arrow_back,
                        //   size: 28,
                        //   color: Colors.black,
                        // ),
                        child: const Icon(
                          // Icons.arrow_back,
                          PhosphorIcons.arrowCircleLeft,
                          size: 32,
                          color: Colors.black,
                        ),
                      ),
                      const Spacer(),
                      GestureDetector(
                        onTap: _submitEntry,
                        child: Container(
                          width: 36,
                          height: 36,
                          decoration: const BoxDecoration(
                            color: Color(0xFF473623),
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.check,
                            size: 20,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: TextField(
                    controller: _titleCtrl,
                    readOnly: !_isEditing,
                    style: const TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                    ),
                    decoration: InputDecoration(
                      hintText: 'Give it a title...',
                      hintStyle: TextStyle(
                        color: Colors.grey.shade600,
                        fontFamily: 'lufga-semi-bold',
                        fontSize: 32,
                      ),
                      border: InputBorder.none,
                      errorText: _showTitleError ? 'Title is required' : null,
                    ),
                  ),
                ),
                const SizedBox(height: 2),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 24),
                    child: TextField(
                      controller: _contentCtrl,
                      readOnly: !_isEditing,
                      maxLines: null,
                      expands: true,
                      decoration: const InputDecoration(
                        hintText: 'Write your thoughts...',
                        hintStyle: TextStyle(
                          fontFamily: 'lufga-regular',
                          fontSize: 18,
                        ),
                        border: InputBorder.none,
                      ),
                    ),
                  ),
                ),
                if (_attachments.isNotEmpty)
                  SizedBox(
                    height: 100,
                    child: ListView.builder(
                      padding: const EdgeInsets.symmetric(horizontal: 24),
                      scrollDirection: Axis.horizontal,
                      itemCount: _attachments.length,
                      itemBuilder: (ctx, i) {
                        final a = _attachments[i];
                        return Padding(
                          padding: const EdgeInsets.only(right: 8),
                          child: Stack(
                            children: [
                              ClipRRect(
                                borderRadius: BorderRadius.circular(12),
                                child: Image.file(
                                  File(a.url),
                                  width: 80,
                                  height: 80,
                                  fit: BoxFit.cover,
                                ),
                              ),
                              Positioned(
                                top: 4,
                                right: 4,
                                child: GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      _attachments.removeAt(i);
                                    });
                                  },
                                  child: Container(
                                    width: 20,
                                    height: 20,
                                    decoration: BoxDecoration(
                                      color: Colors.black54,
                                      shape: BoxShape.circle,
                                    ),
                                    child: const Icon(
                                      Icons.close,
                                      color: Colors.white,
                                      size: 14,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                const SizedBox(height: 16),
              ],
            ),
          ),
        ],
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.fromLTRB(85, 0, 85, 45),
        child: Container(
          height: 80,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(50),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.07),
                blurRadius: 10,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _isEditing
                  ? navbarNewEntry(
                      icon: PhosphorIcons.pencilSimple,
                      active: true,
                      onTap: _toggleEditing,
                    )
                  : navbarNewEntry(
                      iconWidget: SvgPicture.asset(
                        'assets/icons/pencil-simple-slash.svg',
                        width: 30,
                        height: 30,
                        colorFilter: const ColorFilter.mode(
                            Colors.black54, BlendMode.srcIn),
                      ),
                      active: false,
                      onTap: _toggleEditing,
                    ),
              navbarNewEntry(
                icon: PhosphorIcons.image,
                active: false,
                onTap: _pickImages,
              ),
              navbarNewEntry(
                icon: _isMicActive
                    ? PhosphorIcons.microphone
                    : PhosphorIcons.microphoneSlash,
                active: _isMicActive,
                onTap: _toggleMic,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/entry_detail_screen.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:open_file/open_file.dart';
import 'package:roohbaru_app/widgets/suggestion_card.dart';

import '../utils/mood_utils.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/journal_state.dart';
import '../blocs/journal_event.dart';
import '../models/journal_entry.dart';
import 'edit_entry_screen.dart';

class EntryDetailScreen extends StatelessWidget {
  final String entryId;
  const EntryDetailScreen({Key? key, required this.entryId}) : super(key: key);

  static const List<String> moodOptions = [
    'Happy',
    'Excited',
    'Calm',
    'Grateful',
    'Loving',
    'Confident',
    'Sad',
    'Angry',
    'Anxious',
    'Lonely',
    'Guilty',
    'Jealous',
    'Confused',
    'Surprised',
    'Bored',
    'Restless',
    'Inspired',
    'Distracted',
  ];

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<JournalBloc, JournalState>(
      builder: (context, state) {
        if (state is JournalLoaded) {
          final idx = state.entries.indexWhere((e) => e.id == entryId);
          if (idx == -1) {
            return Scaffold(
              backgroundColor: defaultMoodBackground,
              body: const Center(child: CircularProgressIndicator()),
            );
          }

          final entry = state.entries[idx];
          final bgColor =
              moodBackgroundColors[entry.mood] ?? defaultMoodBackground;
          final dateStr =
              '${entry.timestamp.day}/${entry.timestamp.month}/${entry.timestamp.year}';

          return Scaffold(
            backgroundColor: bgColor,
            body: Stack(
              children: [
                Positioned.fill(
                  child:
                      Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
                ),
                SafeArea(
                  child: Column(
                    children: [
                      // Top bar (back, edit, delete) – unchanged
                      Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 12),
                        child: Row(
                          children: [
                            GestureDetector(
                              onTap: () => Navigator.of(context).pop(),
                              child: const Icon(
                                PhosphorIcons.arrowCircleLeft,
                                size: 32,
                                color: Colors.black,
                              ),
                            ),
                            const Spacer(),
                            GestureDetector(
                              onTap: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) =>
                                        EditEntryScreen(entry: entry),
                                  ),
                                );
                              },
                              child: const Icon(
                                PhosphorIcons.pencilSimple,
                                size: 28,
                                color: Colors.black,
                              ),
                            ),
                            const SizedBox(width: 16),
                            GestureDetector(
                              onTap: () async {
                                final confirm = await showDialog<bool>(
                                  context: context,
                                  builder: (ctx) => AlertDialog(
                                    title: const Text('Delete Entry'),
                                    content: const Text(
                                        'Are you sure you want to delete this entry?'),
                                    actions: [
                                      TextButton(
                                          onPressed: () =>
                                              Navigator.pop(ctx, false),
                                          child: const Text('Cancel')),
                                      TextButton(
                                          onPressed: () =>
                                              Navigator.pop(ctx, true),
                                          child: const Text('Delete',
                                              style: TextStyle(
                                                  color: Colors.red))),
                                    ],
                                  ),
                                );
                                if (confirm == true) {
                                  context
                                      .read<JournalBloc>()
                                      .add(DeleteEntry(entryId));
                                  Navigator.pop(context);
                                }
                              },
                              child: const Icon(
                                PhosphorIcons.trash,
                                size: 28,
                                color: Colors.black,
                              ),
                            ),
                          ],
                        ),
                      ),

                      // Content
                      Expanded(
                        child: SingleChildScrollView(
                          padding: const EdgeInsets.symmetric(horizontal: 24),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Title, date, mood selector, body, images – unchanged
                              Text(
                                entry.title.toLowerCase(),
                                style: const TextStyle(
                                  fontFamily: 'lufga-bold-italic',
                                  fontSize: 32,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                dateStr,
                                style: const TextStyle(
                                  color: Color(0xFF473623),
                                ),
                              ),
                              const SizedBox(height: 16),
                              Row(
                                children: [
                                  SvgPicture.asset(
                                    'assets/icons/mood.svg',
                                    width: 50,
                                    height: 50,
                                  ),
                                  const SizedBox(width: 8),
                                  Container(
                                    padding: const EdgeInsets.symmetric(
                                        horizontal: 12, vertical: 4),
                                    decoration: BoxDecoration(
                                      color: Colors.white.withOpacity(0.8),
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: DropdownButtonHideUnderline(
                                      child: DropdownButton<String>(
                                        value: moodOptions.contains(entry.mood)
                                            ? entry.mood
                                            : null,
                                        icon: const Icon(
                                            Icons.keyboard_arrow_down),
                                        dropdownColor: Colors.white,
                                        style: const TextStyle(
                                          fontFamily: 'lufga-light',
                                          fontSize: 16,
                                          color: Colors.black,
                                        ),
                                        items: moodOptions
                                            .map((m) => DropdownMenuItem(
                                                  value: m,
                                                  child: Text(m),
                                                ))
                                            .toList(),
                                        onChanged: (newMood) {
                                          if (newMood != null) {
                                            final updated =
                                                entry.copyWith(mood: newMood);
                                            context
                                                .read<JournalBloc>()
                                                .add(UpdateEntry(updated));
                                          }
                                        },
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 16),
                              Text(
                                entry.content,
                                style: const TextStyle(
                                    fontSize: 18, fontFamily: 'lufga-regular'),
                              ),
                              const SizedBox(height: 16),
                              if (entry.attachments.any((a) =>
                                  a.type == 'image' &&
                                  File(a.url).existsSync())) ...[
                                SizedBox(
                                  height: 80,
                                  child: ListView.builder(
                                    scrollDirection: Axis.horizontal,
                                    itemCount: entry.attachments.length,
                                    itemBuilder: (ctx, i) {
                                      final a = entry.attachments[i];
                                      if (a.type == 'image' &&
                                          File(a.url).existsSync()) {
                                        return Padding(
                                          padding:
                                              const EdgeInsets.only(right: 8),
                                          child: GestureDetector(
                                            onTap: () => OpenFile.open(a.url),
                                            child: Image.file(
                                              File(a.url),
                                              width: 64,
                                              height: 64,
                                              fit: BoxFit.cover,
                                            ),
                                          ),
                                        );
                                      }
                                      return const SizedBox.shrink();
                                    },
                                  ),
                                ),
                                const SizedBox(height: 5),
                              ],
                              // Refined Separator
                              Container(
                                height: 1,
                                margin:
                                    const EdgeInsets.symmetric(vertical: 16),
                                decoration: BoxDecoration(
                                  gradient: LinearGradient(
                                    colors: [
                                      Colors.transparent,
                                      Colors.black.withOpacity(0.9),
                                      Colors.transparent,
                                    ],
                                    stops: const [0.0, 0.5, 1.0],
                                    begin: Alignment.centerLeft,
                                    end: Alignment.centerRight,
                                  ),
                                ),
                              ),
                              // const SizedBox(height: 2),

                              // Suggestions Section
                              const Text(
                                'Suggestions',
                                style: TextStyle(
                                  fontFamily: 'lufga-bold',
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  color: Color(0xFF2E2E2E),
                                  letterSpacing: 0.5,
                                ),
                              ),
                              const SizedBox(height: 12),
                              SuggestionCard(
                                  icon: PhosphorIcons.musicNote,
                                  suggestion: entry.suggestions.isNotEmpty
                                      ? entry.suggestions[0]
                                      : 'No music suggestion available',
                                  context: context),
                              const SizedBox(height: 8),
                              SuggestionCard(
                                  icon: PhosphorIcons.filmStrip,
                                  suggestion: entry.suggestions.length > 1
                                      ? entry.suggestions[1]
                                      : 'No movie suggestion available',
                                  context: context),

                              // AI Analysis Section
                              const SizedBox(height: 12),
                              const Text(
                                'AI Insights',
                                style: TextStyle(
                                  fontFamily: 'lufga-bold',
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  color: Color(0xFF2E2E2E),
                                  letterSpacing: 0.5,
                                ),
                              ),
                              const SizedBox(height: 8),
                              AnimatedContainer(
                                duration: const Duration(milliseconds: 300),
                                padding: const EdgeInsets.all(16),
                                decoration: BoxDecoration(
                                  // color: Colors.white.withOpacity(0.3),
                                  color:
                                      const Color(0xFF2E2E2E).withOpacity(0.1),
                                  borderRadius: BorderRadius.circular(12),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.white.withOpacity(0.1),
                                      blurRadius: 8,
                                      offset: const Offset(0, 4),
                                    ),
                                  ],
                                ),
                                child: Text(
                                  entry.analysis.isNotEmpty
                                      ? entry.analysis
                                      : 'No AI insights available at this time.',
                                  style: const TextStyle(
                                    fontFamily: 'lufga-regular',
                                    fontSize: 15,
                                    color: Color(0xFF4A4A4A),
                                    height: 1.5,
                                  ),
                                ),
                              ),

                              const SizedBox(height: 32),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        }

        // Loading / Error
        return Scaffold(
          backgroundColor: defaultMoodBackground,
          body: const Center(child: CircularProgressIndicator()),
        );
      },
    );
  }
}

]

roohbaru_app/lib/screens/search_screen_backup.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_state.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/search_bloc.dart';
import '../blocs/search_event.dart';
import '../blocs/search_state.dart';
import '../models/journal_entry.dart';
import '../utils/mood_utils.dart';
import '../widgets/custom_date_picker.dart';
import 'entry_detail_screen.dart';

class SearchScreen extends StatelessWidget {
  const SearchScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final journalBloc = context.read<JournalBloc>();
    return BlocProvider<SearchBloc>(
      create: (_) => SearchBloc(journalBloc: journalBloc),
      child: const _SearchView(),
    );
  }
}

class _SearchView extends StatefulWidget {
  const _SearchView({Key? key}) : super(key: key);

  @override
  State<_SearchView> createState() => _SearchViewState();
}

class _SearchViewState extends State<_SearchView> {
  final TextEditingController _searchController = TextEditingController();

  bool get _hasAnyFilter {
    final s = context.read<SearchBloc>().state;
    return s.query.isNotEmpty ||
        s.mood != null ||
        s.date != null ||
        s.withPhotosOnly;
  }

  void _executeSearch() {
    context.read<SearchBloc>().add(QueryChanged(_searchController.text.trim()));
  }

  void _resetAllFilters() {
    _searchController.clear();
    final bloc = context.read<SearchBloc>();
    bloc.add(QueryChanged(''));
    bloc.add(MoodFilterChanged(null));
    bloc.add(DateFilterChanged(null));
    bloc.add(PhotosFilterToggled(false));
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final auth = context.read<AuthBloc>().state;
    if (auth is! AuthAuthenticated) {
      return const Scaffold(
        body: Center(child: Text('Not authenticated')),
      );
    }

    final state = context.watch<SearchBloc>().state;

    return Scaffold(
      backgroundColor: defaultMoodBackground,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
          ),
          SafeArea(
            child: Column(
              children: [
                // Back button
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  child: Align(
                    alignment: Alignment.centerLeft,
                    child: GestureDetector(
                      onTap: () => Navigator.of(context).pop(),
                      child: const Icon(Icons.arrow_back, size: 28),
                    ),
                  ),
                ),

                // Redesigned Search field and button
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          Colors.white.withOpacity(0.95),
                          Colors.white.withOpacity(0.85)
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.08),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _searchController,
                            onSubmitted: (_) => _executeSearch(),
                            style: const TextStyle(
                              fontFamily: 'lufga-regular',
                              fontSize: 16,
                              color: Color(0xFF1A1A1A),
                            ),
                            decoration: InputDecoration(
                              hintText: 'Search entries...',
                              hintStyle: TextStyle(
                                color: Colors.grey.shade500,
                                fontFamily: 'lufga-regular',
                              ),
                              border: InputBorder.none,
                              contentPadding: const EdgeInsets.symmetric(
                                horizontal: 20,
                                vertical: 16,
                              ),
                              prefixIcon: Icon(
                                Icons.search,
                                color: Colors.grey.shade600,
                                size: 22,
                              ),
                            ),
                          ),
                        ),
                        Container(
                          margin: const EdgeInsets.only(right: 8),
                          child: ElevatedButton(
                            onPressed: _executeSearch,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFF2E2A1F),
                              foregroundColor: Colors.white,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 24,
                                vertical: 12,
                              ),
                              elevation: 0,
                              textStyle: const TextStyle(
                                fontFamily: 'lufga-semi-bold',
                                fontSize: 14,
                                letterSpacing: 0.5,
                              ),
                            ),
                            child: const Text('Search'),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Redesigned Filters + Reset
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Column(
                    children: [
                      Wrap(
                        spacing: 8,
                        runSpacing: 8,
                        children: [
                          // Mood dropdown
                          Flexible(
                            flex: 2,
                            child: Container(
                              width: double.infinity,
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.92),
                                borderRadius: BorderRadius.circular(16),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.06),
                                    blurRadius: 8,
                                    offset: const Offset(0, 3),
                                  ),
                                ],
                              ),
                              child: DropdownButtonFormField<String?>(
                                value: state.mood,
                                hint: const Text(
                                  'All moods',
                                  style: TextStyle(
                                    fontFamily: 'lufga-regular',
                                    color: Color(0xFF6B7280),
                                    fontSize: 14,
                                  ),
                                ),
                                items: [
                                  const DropdownMenuItem(
                                    value: null,
                                    child: Text(
                                      'All moods',
                                      style: TextStyle(
                                        fontFamily: 'lufga-regular',
                                        color: Color(0xFF1A1A1A),
                                        fontSize: 14,
                                      ),
                                    ),
                                  ),
                                  ..._SearchOptions.moods
                                      .map((m) => DropdownMenuItem(
                                            value: m,
                                            child: Text(
                                              m,
                                              style: const TextStyle(
                                                fontFamily: 'lufga-regular',
                                                color: Color(0xFF1A1A1A),
                                                fontSize: 14,
                                              ),
                                            ),
                                          )),
                                ],
                                onChanged: (m) => context
                                    .read<SearchBloc>()
                                    .add(MoodFilterChanged(m)),
                                decoration: const InputDecoration(
                                  border: InputBorder.none,
                                  contentPadding: EdgeInsets.symmetric(
                                    horizontal: 16,
                                    vertical: 14,
                                  ),
                                ),
                                dropdownColor: Colors.white,
                                icon: Icon(
                                  Icons.arrow_drop_down,
                                  color: Colors.grey.shade600,
                                  size: 24,
                                ),
                              ),
                            ),
                          ),

                          // Date picker
                          Flexible(
                            flex: 1,
                            child: GestureDetector(
                              onTap: () async {
                                final picked = await showCustomDatePicker(
                                  context: context,
                                  initialDate: state.date ?? DateTime.now(),
                                );
                                context
                                    .read<SearchBloc>()
                                    .add(DateFilterChanged(picked));
                              },
                              child: Container(
                                width: double.infinity,
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  vertical: 14,
                                ),
                                decoration: BoxDecoration(
                                  color: Colors.white.withOpacity(0.92),
                                  borderRadius: BorderRadius.circular(16),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.06),
                                      blurRadius: 8,
                                      offset: const Offset(0, 3),
                                    ),
                                  ],
                                ),
                                child: Row(
                                  children: [
                                    Icon(
                                      Icons.calendar_today_outlined,
                                      color: Colors.grey.shade600,
                                      size: 20,
                                    ),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        state.date != null
                                            ? DateFormat('dd/MM/yyyy')
                                                .format(state.date!)
                                            : 'Select Date',
                                        style: TextStyle(
                                          fontFamily: 'lufga-regular',
                                          fontSize: 14,
                                          color: state.date != null
                                              ? const Color(0xFF1A1A1A)
                                              : Colors.grey.shade500,
                                        ),
                                        overflow: TextOverflow.ellipsis,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),

                          // Photos-only switch
                          Flexible(
                            flex: 1,
                            child: Container(
                              width: double.infinity,
                              padding: const EdgeInsets.symmetric(
                                horizontal: 16,
                                vertical: 10,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.92),
                                borderRadius: BorderRadius.circular(16),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.06),
                                    blurRadius: 8,
                                    offset: const Offset(0, 3),
                                  ),
                                ],
                              ),
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Row(
                                    children: [
                                      Icon(
                                        Icons.photo_library_outlined,
                                        color: Colors.grey.shade600,
                                        size: 20,
                                      ),
                                      const SizedBox(width: 8),
                                      Text(
                                        'Photos only',
                                        style: TextStyle(
                                          fontFamily: 'lufga-regular',
                                          fontSize: 14,
                                          color: const Color(0xFF1A1A1A),
                                        ),
                                      ),
                                    ],
                                  ),
                                  Switch(
                                    value: state.withPhotosOnly,
                                    onChanged: (v) => context
                                        .read<SearchBloc>()
                                        .add(PhotosFilterToggled(v)),
                                    activeColor: const Color(0xFF2E2A1F),
                                    inactiveThumbColor: Colors.grey.shade400,
                                    inactiveTrackColor: Colors.grey.shade200,
                                    materialTapTargetSize:
                                        MaterialTapTargetSize.shrinkWrap,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                      if (_hasAnyFilter) ...[
                        const SizedBox(height: 12),
                        Align(
                          alignment: Alignment.centerRight,
                          child: TextButton(
                            onPressed: _resetAllFilters,
                            style: TextButton.styleFrom(
                              foregroundColor: const Color(0xFF2E2A1F),
                              backgroundColor: Colors.white.withOpacity(0.92),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 20,
                                vertical: 10,
                              ),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              textStyle: const TextStyle(
                                fontFamily: 'lufga-semi-bold',
                                fontSize: 14,
                                letterSpacing: 0.5,
                              ),
                            ),
                            child: const Text('Reset Filters'),
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
                const SizedBox(height: 16),

                // Results list
                Expanded(
                  child: !_hasAnyFilter
                      ? const SizedBox.shrink()
                      : state.filteredEntries.isEmpty
                          ? const Center(child: Text('No entries found.'))
                          : ListView.builder(
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 16),
                              itemCount: state.filteredEntries.length,
                              itemBuilder: (ctx, i) {
                                final e = state.filteredEntries[i];
                                return _buildEntryItem(e);
                              },
                            ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEntryItem(JournalEntry e) {
    final dow = DateFormat('EEE').format(e.timestamp).toLowerCase();
    final dayNum = DateFormat('d').format(e.timestamp);
    final imgs = e.attachments
        .where((a) => a.type == 'image' && File(a.url).existsSync())
        .map((a) => a.url)
        .toList();

    return GestureDetector(
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: e.id)),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 13),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 55,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.5),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Text(
                    dow,
                    style: const TextStyle(
                      fontSize: 16,
                      fontFamily: 'lufga-semi-bold',
                      color: Color(0xFF473623),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    dayNum,
                    style: const TextStyle(
                      fontSize: 18,
                      fontFamily: 'lufga-regular',
                      color: Colors.black,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    e.title.toLowerCase(),
                    style: const TextStyle(
                      fontSize: 20,
                      fontFamily: 'lufga-semi-bold-italic',
                      color: Color(0xFF473623),
                    ),
                  ),
                  Text(
                    _truncateWords(e.content, 30).toLowerCase(),
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.4,
                      fontFamily: 'lufga-regular',
                    ),
                  ),
                  if (imgs.isNotEmpty) ...[
                    const SizedBox(height: 12),
                    Row(
                      children: imgs.take(2).map((path) {
                        return Expanded(
                          child: Padding(
                            padding: const EdgeInsets.only(right: 8.0),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.file(
                                File(path),
                                height: 120,
                                fit: BoxFit.cover,
                                errorBuilder: (ctx, _, __) => Container(
                                  height: 120,
                                  color: Colors.grey.shade200,
                                  child: const Icon(Icons.broken_image),
                                ),
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _truncateWords(String text, int limit) {
    final words = text.split(RegExp(r'\s+'));
    if (words.length <= limit) return text;
    return words.take(limit).join(' ') + '...';
  }
}

class _SearchOptions {
  static const List<String> moods = [
    'Happy',
    'Excited',
    'Calm',
    'Grateful',
    'Loving',
    'Confident',
    'Sad',
    'Angry',
    'Anxious',
    'Lonely',
    'Guilty',
    'Jealous',
    'Confused',
    'Surprised',
    'Bored',
    'Restless',
    'Inspired',
    'Distracted',
  ];
}

]

roohbaru_app/lib/screens/signup_screen.dart: [
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'package:roohbaru_app/widgets/social_button.dart';
import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../widgets/primary_button.dart';
import 'home_screen.dart';
import 'login_screen.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _emailCtrl = TextEditingController();
  final _nameCtrl = TextEditingController();
  final _passCtrl = TextEditingController();

  bool _obscurePass = true;
  bool _agreedToTerms = false;
  bool _showPasswordError = false;
  bool _emailValid = false;

  final _passwordRegex = RegExp(r'^(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$&*~]).{8,}$');
  final _emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+');

  @override
  void initState() {
    super.initState();
    _emailCtrl.addListener(() {
      setState(() {
        _emailValid = _emailRegex.hasMatch(_emailCtrl.text.trim());
      });
    });
  }

  @override
  void dispose() {
    _emailCtrl.dispose();
    _nameCtrl.dispose();
    _passCtrl.dispose();
    super.dispose();
  }

  bool get _isPasswordValid => _passwordRegex.hasMatch(_passCtrl.text.trim());

  void _submitSignup() {
    final email = _emailCtrl.text.trim();
    final name = _nameCtrl.text.trim();
    final pass = _passCtrl.text;

    setState(() {
      _showPasswordError = !_isPasswordValid;
    });

    if (!_isPasswordValid) return;

    // if (!_agreedToTerms) {
    //   ScaffoldMessenger.of(context).showSnackBar(
    //     const SnackBar(content: Text("Please agree to the terms first.")),
    //   );
    //   return;
    // }

    context.read<AuthBloc>().add(
          EmailSignUpRequested(name: name, email: email, password: pass),
        );
  }

  void _handleGoogleSignIn() {
    context.read<AuthBloc>().add(GoogleSignInRequested());
  }

  Widget _buildTextField({
    required String hint,
    required IconData icon,
    required TextEditingController controller,
    bool obscure = false,
    Widget? suffixIcon,
  }) {
    return TextField(
      controller: controller,
      obscureText: obscure,
      decoration: InputDecoration(
        prefixIcon: Icon(icon),
        suffixIcon: suffixIcon,
        hintText: hint,
        filled: true,
        fillColor: Colors.white,
        contentPadding:
            const EdgeInsets.symmetric(horizontal: 16, vertical: 18),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocListener<AuthBloc, AuthState>(
        listener: (ctx, state) {
          if (state is AuthAuthenticated) {
            Navigator.of(context).pushAndRemoveUntil(
              MaterialPageRoute(builder: (_) => HomeScreen(user: state.user)),
              (_) => false,
            );
          } else if (state is AuthError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.message)),
            );
          }
        },
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 16),
                  IconButton(
                    // icon: const Icon(Icons.arrow_back),
                    icon: const Icon(
                      // Icons.arrow_back,
                      PhosphorIcons.arrowCircleLeft,
                      size: 32,
                      color: Colors.black,
                    ),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    "Let's Get Started!",
                    style: TextStyle(fontSize: 26, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Sign up, fill the form to continue.',
                    style: TextStyle(fontSize: 14, color: Colors.black54),
                  ),
                  const SizedBox(height: 32),
                  _buildTextField(
                    hint: 'Email',
                    icon: Icons.email_outlined,
                    controller: _emailCtrl,
                    suffixIcon: _emailValid
                        ? Container(
                            margin: const EdgeInsets.only(right: 12),
                            decoration: const BoxDecoration(
                              color: Colors.black,
                              shape: BoxShape.circle,
                            ),
                            child: const Icon(Icons.check,
                                size: 16, color: Colors.white),
                          )
                        : null,
                  ),
                  const SizedBox(height: 20),
                  _buildTextField(
                    hint: 'Name',
                    icon: Icons.person_outline,
                    controller: _nameCtrl,
                  ),
                  const SizedBox(height: 20),
                  _buildTextField(
                    hint: 'Password',
                    icon: Icons.lock_outline,
                    controller: _passCtrl,
                    obscure: _obscurePass,
                    suffixIcon: IconButton(
                      icon: Icon(_obscurePass
                          ? Icons.visibility_off_outlined
                          : Icons.visibility_outlined),
                      onPressed: () =>
                          setState(() => _obscurePass = !_obscurePass),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 8),
                    child: Text(
                      'At least 8 characters, 1 uppercase letter, 1 number, 1 symbol',
                      style: TextStyle(
                        fontSize: 12,
                        color: _showPasswordError ? Colors.red : Colors.black45,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  // Row(
                  //   crossAxisAlignment: CrossAxisAlignment.start,
                  //   children: [
                  //     Transform.scale(
                  //       scale: 1.4,
                  //       child: Checkbox(
                  //         value: _agreedToTerms,
                  //         shape: const CircleBorder(),
                  //         onChanged: (val) =>
                  //             setState(() => _agreedToTerms = val ?? false),
                  //       ),
                  //     ),
                  //     const SizedBox(width: 8),
                  //     Expanded(
                  //       child: Padding(
                  //         padding: const EdgeInsets.only(top: 10),
                  //         child: RichText(
                  //           text: const TextSpan(
                  //             style: TextStyle(
                  //                 fontSize: 13, color: Colors.black54),
                  //             children: [
                  //               TextSpan(
                  //                   text: 'By Signing up, you agree to the '),
                  //               TextSpan(
                  //                 text: 'Terms of Service',
                  //                 style: TextStyle(
                  //                     fontWeight: FontWeight.bold,
                  //                     color: Colors.black),
                  //               ),
                  //               TextSpan(text: ' and '),
                  //               TextSpan(
                  //                 text: 'Privacy Policy',
                  //                 style: TextStyle(
                  //                     fontWeight: FontWeight.bold,
                  //                     color: Colors.black),
                  //               ),
                  //             ],
                  //           ),
                  //         ),
                  //       ),
                  //     ),
                  //   ],
                  // ),
                  // const SizedBox(height: 32),
                  // Row(
                  //   mainAxisAlignment: MainAxisAlignment.center,
                  //   children: [
                  //     GestureDetector(
                  //       onTap: _handleGoogleSignIn,
                  //       child: Container(
                  //         padding: const EdgeInsets.all(12),
                  //         decoration: BoxDecoration(
                  //           shape: BoxShape.circle,
                  //           border: Border.all(color: Colors.grey.shade300),
                  //         ),
                  //         child: Image.asset(
                  //           'assets/images/google.png',
                  //           height: 24,
                  //           width: 24,
                  //         ),
                  //       ),
                  //     ),
                  //     const SizedBox(width: 24),
                  //     Container(
                  //       padding: const EdgeInsets.all(12),
                  //       decoration: BoxDecoration(
                  //         shape: BoxShape.circle,
                  //         border: Border.all(color: Colors.grey.shade300),
                  //       ),
                  //       child: const Icon(Icons.apple, size: 28),
                  //     ),
                  //   ],
                  // ),
                  // const SizedBox(height: 32),
                  BlocBuilder<AuthBloc, AuthState>(
                    builder: (context, state) {
                      if (state is AuthLoading) {
                        return const Center(child: CircularProgressIndicator());
                      }

                      return PrimaryButton(
                        label: 'Sign Up',
                        onPressed: _submitSignup,
                      );
                    },
                  ),
                  // const SizedBox(height: 16),
                  // Row(
                  //   mainAxisAlignment: MainAxisAlignment.center,
                  //   children: [
                  //     const Text("Already have an account? "),
                  //     GestureDetector(
                  //       onTap: () {
                  //         Navigator.pushReplacement(
                  //           context,
                  //           MaterialPageRoute(
                  //               builder: (_) => const LoginScreen()),
                  //         );
                  //       },
                  //       child: const Text(
                  //         'Log in',
                  //         style: TextStyle(
                  //           fontWeight: FontWeight.bold,
                  //           decoration: TextDecoration.underline,
                  //         ),
                  //       ),
                  //     ),
                  //   ],
                  // ),
                  // const SizedBox(height: 32),
                  const SizedBox(height: 24),
                  Row(
                    children: const [
                      Expanded(child: Divider()),
                      Padding(
                        padding: EdgeInsets.symmetric(horizontal: 8),
                        child: Text('Or Sign Up With'),
                      ),
                      Expanded(child: Divider()),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      SocialButton(
                        assetPath: 'assets/images/google.png',
                        onTap: () => context
                            .read<AuthBloc>()
                            .add(GoogleSignInRequested()),
                      ),
                      const SizedBox(width: 12),
                      SocialButton(
                        assetPath: 'assets/images/apple.png',
                        onTap: () {
                          // TODO: implement Apple Sign In
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 32),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text("Already have an account? "),
                      GestureDetector(
                        onTap: () => Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => const LoginScreen()),
                        ),
                        child: Text(
                          'Log In',
                          style: TextStyle(
                            // color: Theme.of(context).colorScheme.primary,
                            color: Colors.blue,
                            fontWeight: FontWeight.w600,
                            // decoration: TextDecoration.underline,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/profile_screen.dart: [
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_state.dart';
import '../blocs/personality_bloc.dart';
import '../utils/mood_utils.dart';
import '../widgets/profile/profile_header.dart';
import '../widgets/profile/avatar_animation.dart';
import '../widgets/profile/profile_info.dart';
import '../widgets/profile/personality_selector.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({Key? key}) : super(key: key);

  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  bool _showInfo = false;

  void _onAnimationComplete() {
    setState(() {
      _showInfo = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => PersonalityBloc(),
      child: Scaffold(
        backgroundColor: defaultMoodBackground,
        body: Stack(
          children: [
            Positioned.fill(
              child: Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
            ),
            SafeArea(
              child: SingleChildScrollView(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    const ProfileHeader(),
                    const SizedBox(height: 40),
                    AvatarAnimation(onCompleted: _onAnimationComplete),
                    const SizedBox(height: 16),
                    if (_showInfo)
                      BlocBuilder<AuthBloc, AuthState>(
                        builder: (context, state) {
                          if (state is AuthAuthenticated) {
                            final user = state.user;
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                ProfileInfo(
                                  name: user.displayName ?? '',
                                  email: user.email ?? '',
                                ),
                                const SizedBox(height: 8),
                                Container(
                                  height: 1,
                                  margin: const EdgeInsets.fromLTRB(0, 8, 0, 4),
                                  decoration: BoxDecoration(
                                    gradient: LinearGradient(
                                      colors: [
                                        Colors.transparent,
                                        Colors.black.withOpacity(0.9),
                                        Colors.transparent,
                                      ],
                                      stops: const [0.0, 0.5, 1.0],
                                      begin: Alignment.centerLeft,
                                      end: Alignment.centerRight,
                                    ),
                                  ),
                                ),
                                Center(child: const PersonalitySelector()),
                              ],
                            );
                          }
                          return const SizedBox.shrink();
                        },
                      ),
                    const SizedBox(height: 40),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/insights_screen.dart: [
// lib/screens/insights_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'package:roohbaru_app/models/journal_entry.dart';
import 'package:roohbaru_app/utils/mood_utils.dart';

import '../blocs/insights_bloc.dart';
import '../blocs/insights_event.dart';
import '../blocs/insights_state.dart';
import '../blocs/journal_bloc.dart';
import '../widgets/insights/duration_selector.dart';
import '../widgets/insights/analytics_card.dart';
import '../widgets/insights/mood_bar_chart.dart';
import '../widgets/insights/mood_donut_chart.dart'; // ← NEW

class InsightsScreen extends StatelessWidget {
  const InsightsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => InsightsBloc(journalBloc: context.read<JournalBloc>()),
      child: const _InsightsView(),
    );
  }
}

class _InsightsView extends StatelessWidget {
  const _InsightsView();

  // same buckets as in the bloc
  static const Map<String, List<String>> _moodCategories = {
    'Positive': [
      'Happy',
      'Excited',
      'Calm',
      'Grateful',
      'Loving',
      'Confident',
      'Inspired'
    ],
    'Neutral': ['Surprised', 'Bored', 'Distracted'],
    'Negative': [
      'Sad',
      'Angry',
      'Anxious',
      'Lonely',
      'Guilty',
      'Jealous',
      'Confused',
      'Restless'
    ],
  };

  // replicate the bloc’s filter logic
  List<JournalEntry> _filteredEntries(
      List<JournalEntry> all, DurationFilter f) {
    if (f == DurationFilter.allTime) return all;
    final now = DateTime.now();
    final days = f == DurationFilter.last30Days ? 30 : 7;
    final cutoff = now.subtract(Duration(days: days));
    return all.where((e) => e.timestamp.isAfter(cutoff)).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: defaultMoodBackground,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
          ),
          SafeArea(
            child: BlocBuilder<InsightsBloc, InsightsState>(
              builder: (ctx, state) {
                final entries =
                    _filteredEntries(state.allEntries, state.durationFilter);
                return SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Padding(
                        padding: const EdgeInsets.only(bottom: 12),
                        child: Row(
                          children: [
                            GestureDetector(
                              onTap: () => Navigator.of(context).pop(),
                              child: const Icon(
                                PhosphorIcons.arrowCircleLeft,
                                size: 32,
                                color: Colors.black,
                              ),
                            ),
                            const SizedBox(width: 16),
                            const Text(
                              'Insights',
                              style: TextStyle(
                                fontFamily: 'lufga-bold',
                                fontSize: 24,
                              ),
                            ),
                          ],
                        ),
                      ),

                      // 1) Duration selector
                      DurationSelector(
                        current: state.durationFilter,
                        onChanged: (f) =>
                            ctx.read<InsightsBloc>().add(DurationChanged(f)),
                      ),

                      const SizedBox(height: 12),

                      // 2) Analytics card
                      AnalyticsCard(
                        title: 'Total Entries',
                        total: state.totalEntries,
                        changePercent: state.changePercent,
                        hasChange: state.hasChange,
                        isIncrease: state.isIncrease,
                      ),

                      const SizedBox(height: 2),

                      // 3) Bar chart
                      SizedBox(
                        height: 300,
                        child: MoodBarChart(
                          data: state.categoryCounts,
                          selectedCategory: null,
                          onCategoryTap: (_) {},
                        ),
                      ),

                      const SizedBox(height: 2),

                      // 4) Pie‐chart breakdown for each category
                      for (final category in [
                        'Positive',
                        'Neutral',
                        'Negative'
                      ]) ...[
                        Builder(builder: (_) {
                          // build only moods with count ≥ 1
                          final breakdown = <String, int>{};
                          for (var m in _moodCategories[category]!) {
                            final cnt =
                                entries.where((e) => e.mood == m).length;
                            if (cnt > 0) breakdown[m] = cnt;
                          }
                          if (breakdown.isEmpty) return const SizedBox.shrink();

                          return Container(
                            padding: const EdgeInsets.fromLTRB(0, 10, 0, 0),
                            margin: const EdgeInsets.only(bottom: 18),
                            // decoration: BoxDecoration(
                            //   borderRadius: BorderRadius.circular(24),
                            //   color: Colors.white.withOpacity(0.95),
                            //   boxShadow: [
                            //     BoxShadow(
                            //       color: Colors.black.withOpacity(0.08),
                            //       blurRadius: 12,
                            //       spreadRadius: 2,
                            //       offset: const Offset(0, 4),
                            //     ),
                            //   ],
                            // ),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(24.0),
                              // color: Colors.white.withOpacity(0.9),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withOpacity(0.05),
                                  blurRadius: 20,
                                  spreadRadius: 5,
                                  offset: const Offset(0, 10),
                                ),
                              ],
                              border: Border.all(
                                color: Colors.black,
                                width: 1,
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Center(
                                  child: Text(
                                    '$category Entries Breakdown',
                                    style: const TextStyle(
                                      fontSize: 18,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                                const SizedBox(height: 2),
                                // render the pie chart
                                SizedBox(
                                  height: 300,
                                  child: MoodDonutChart(data: breakdown),
                                ),
                                // SizedBox(
                                //   height: 300,
                                //   child: MoodRadarChart(data: breakdown),
                                // ),
                                // const SizedBox(height: 2),
                              ],
                            ),
                          );
                        }),
                      ],
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

]

roohbaru_app/lib/screens/login_screen.dart: [
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/primary_button.dart';
import '../widgets/social_button.dart';
import 'signup_screen.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailCtrl = TextEditingController();
  final _passCtrl = TextEditingController();
  bool _emailValid = false;
  bool _obscurePass = true;

  @override
  void initState() {
    super.initState();
    _emailCtrl.addListener(_validateEmail);
  }

  @override
  void dispose() {
    _emailCtrl.removeListener(_validateEmail);
    _emailCtrl.dispose();
    _passCtrl.dispose();
    super.dispose();
  }

  void _validateEmail() {
    final regex = RegExp(r'^[^@]+@[^@]+\.[^@]+');
    setState(() => _emailValid = regex.hasMatch(_emailCtrl.text.trim()));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: BlocListener<AuthBloc, AuthState>(
          listener: (ctx, state) {
            if (state is AuthError) {
              ScaffoldMessenger.of(ctx).showSnackBar(
                SnackBar(content: Text(state.message)),
              );
            }
          },
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Row(
                  children: [
                    IconButton(
                      // icon: const Icon(Icons.arrow_back),
                      icon: const Icon(
                        // Icons.arrow_back,
                        PhosphorIcons.arrowCircleLeft,
                        size: 32,
                        color: Colors.black,
                      ),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                    const SizedBox(width: 8),
                    const Text(
                      'Log in',
                      style: TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                CustomTextField(
                  label: 'Email address',
                  hint: 'you@example.com',
                  controller: _emailCtrl,
                  suffixIcon: _emailValid
                      ? Container(
                          margin: const EdgeInsets.only(right: 12),
                          decoration: const BoxDecoration(
                            color: Colors.black,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(Icons.check,
                              size: 16, color: Colors.white),
                        )
                      : null,
                ),
                const SizedBox(height: 24),
                CustomTextField(
                  label: 'Password',
                  hint: '••••••••',
                  controller: _passCtrl,
                  obscureText: _obscurePass,
                  suffixIcon: IconButton(
                    icon: Icon(
                      _obscurePass
                          ? Icons.visibility_off_outlined
                          : Icons.visibility_outlined,
                    ),
                    onPressed: () =>
                        setState(() => _obscurePass = !_obscurePass),
                  ),
                ),
                Align(
                  alignment: Alignment.centerRight,
                  child: TextButton(
                    onPressed: () {
                      // TODO: forgot password
                    },
                    child: const Text('Forgot password?'),
                  ),
                ),
                const SizedBox(height: 16),
                BlocBuilder<AuthBloc, AuthState>(
                  builder: (ctx, state) {
                    if (state is AuthLoading) {
                      return const Center(child: CircularProgressIndicator());
                    }
                    return PrimaryButton(
                      label: 'Log in',
                      onPressed: () {
                        context.read<AuthBloc>().add(
                              EmailSignInRequested(
                                email: _emailCtrl.text.trim(),
                                password: _passCtrl.text,
                              ),
                            );
                      },
                    );
                  },
                ),
                const SizedBox(height: 24),
                Row(
                  children: const [
                    Expanded(child: Divider()),
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 8),
                      child: Text('Or Log In With'),
                    ),
                    Expanded(child: Divider()),
                  ],
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    SocialButton(
                      assetPath: 'assets/images/google.png',
                      onTap: () =>
                          context.read<AuthBloc>().add(GoogleSignInRequested()),
                    ),
                    const SizedBox(width: 12),
                    SocialButton(
                      assetPath: 'assets/images/apple.png',
                      onTap: () {
                        // TODO: implement Apple Sign In
                      },
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Text("Don't have an account? "),
                    GestureDetector(
                      onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(builder: (_) => const SignupScreen()),
                      ),
                      child: Text(
                        'Sign up',
                        style: TextStyle(
                          color: Colors.blue,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/edit_entry_screen.dart: [
// lib/screens/edit_entry_screen.dart

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:roohbaru_app/widgets/navbar_new_entry.dart';
import 'package:open_file/open_file.dart';
import 'package:uuid/uuid.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart'; // ✅ Phosphor icons
import 'package:flutter_svg/flutter_svg.dart'; // ✅ For SVG support

import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../models/journal_entry.dart';
import '../services/file_storage_service.dart';

class EditEntryScreen extends StatefulWidget {
  final JournalEntry entry;
  const EditEntryScreen({Key? key, required this.entry}) : super(key: key);

  @override
  State<EditEntryScreen> createState() => _EditEntryScreenState();
}

class _EditEntryScreenState extends State<EditEntryScreen> {
  late final TextEditingController _titleCtrl;
  late final TextEditingController _contentCtrl;
  final FileStorageService _fileService = FileStorageService();
  final ImagePicker _picker = ImagePicker();
  late List<Attachment> _attachments;
  bool _showTitleError = false;
  bool _isEditing = false;
  bool _isMicActive = false;

  @override
  void initState() {
    super.initState();
    _titleCtrl = TextEditingController(text: widget.entry.title);
    _contentCtrl = TextEditingController(text: widget.entry.content);
    _attachments = List.from(widget.entry.attachments);
  }

  @override
  void dispose() {
    _titleCtrl.dispose();
    _contentCtrl.dispose();
    super.dispose();
  }

  void _toggleEditing() {
    setState(() {
      _isEditing = !_isEditing;
    });
  }

  void _toggleMic() {
    setState(() {
      _isMicActive = !_isMicActive;
    });
  }

  Future<void> _pickImages() async {
    try {
      final List<XFile>? picked =
          await _picker.pickMultiImage(imageQuality: 80);
      if (picked == null) return;

      for (var xfile in picked) {
        final saved = await _fileService.saveImageLocally(File(xfile.path));
        setState(() {
          _attachments.add(
            Attachment(
              url: saved.path,
              name: xfile.name,
              type: 'image',
            ),
          );
        });
      }
    } catch (e) {
      debugPrint('Error picking images: $e');
    }
  }

  void _removeImage(int index) {
    setState(() {
      _attachments.removeAt(index);
    });
  }

  void _submit() {
    final title = _titleCtrl.text.trim();
    final content = _contentCtrl.text.trim();

    if (title.isEmpty) {
      setState(() => _showTitleError = true);
      return;
    }

    final updated = widget.entry.copyWith(
      title: title,
      content: content,
      attachments: _attachments,
    );
    context.read<JournalBloc>().add(UpdateEntry(updated));
    Navigator.of(context).pop();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFf8eed5),
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset(
              'assets/images/bg2.png',
              fit: BoxFit.cover,
            ),
          ),
          SafeArea(
            child: Column(
              children: [
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  child: Row(
                    children: [
                      GestureDetector(
                        onTap: () => Navigator.of(context).pop(),
                        // child: const Icon(
                        //   Icons.arrow_back,
                        //   size: 28,
                        //   color: Colors.black,
                        // ),
                        child: const Icon(
                          // Icons.arrow_back,
                          PhosphorIcons.arrowCircleLeft,
                          size: 32,
                          color: Colors.black,
                        ),
                      ),
                      const Spacer(),
                      GestureDetector(
                        onTap: _submit,
                        child: Container(
                          width: 36,
                          height: 36,
                          decoration: const BoxDecoration(
                            color: Color(0xFF473623),
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.check,
                            size: 20,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: TextField(
                    controller: _titleCtrl,
                    readOnly: !_isEditing,
                    style: const TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                    ),
                    decoration: InputDecoration(
                      hintText: 'Update title...',
                      hintStyle: TextStyle(
                        color: Colors.grey.shade600,
                        fontFamily: 'lufga-semi-bold',
                        fontSize: 32,
                      ),
                      border: InputBorder.none,
                      errorText: _showTitleError ? 'Title is required' : null,
                    ),
                  ),
                ),
                const SizedBox(height: 2),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 24),
                    child: TextField(
                      controller: _contentCtrl,
                      readOnly: !_isEditing,
                      maxLines: null,
                      expands: true,
                      decoration: const InputDecoration(
                        hintText: 'Update your thoughts...',
                        hintStyle: TextStyle(
                          fontFamily: 'lufga-regular',
                          fontSize: 18,
                        ),
                        border: InputBorder.none,
                      ),
                    ),
                  ),
                ),
                if (_attachments.isNotEmpty)
                  SizedBox(
                    height: 100,
                    child: ListView.builder(
                      padding: const EdgeInsets.symmetric(horizontal: 24),
                      scrollDirection: Axis.horizontal,
                      itemCount: _attachments.length,
                      itemBuilder: (ctx, i) {
                        final a = _attachments[i];
                        return Padding(
                          padding: const EdgeInsets.only(right: 8),
                          child: Stack(
                            children: [
                              ClipRRect(
                                borderRadius: BorderRadius.circular(12),
                                child: GestureDetector(
                                  onTap: () => OpenFile.open(a.url),
                                  child: Image.file(
                                    File(a.url),
                                    width: 80,
                                    height: 80,
                                    fit: BoxFit.cover,
                                  ),
                                ),
                              ),
                              Positioned(
                                top: 4,
                                right: 4,
                                child: GestureDetector(
                                  onTap: () => _removeImage(i),
                                  child: Container(
                                    width: 20,
                                    height: 20,
                                    decoration: BoxDecoration(
                                      color: Colors.black54,
                                      shape: BoxShape.circle,
                                    ),
                                    child: const Icon(
                                      Icons.close,
                                      color: Colors.white,
                                      size: 14,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                const SizedBox(height: 16),
              ],
            ),
          ),
        ],
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.fromLTRB(85, 0, 85, 45),
        child: Container(
          height: 80,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(50),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.07),
                blurRadius: 10,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _isEditing
                  ? navbarNewEntry(
                      icon: PhosphorIcons.pencilSimple,
                      active: true,
                      onTap: _toggleEditing,
                    )
                  : navbarNewEntry(
                      iconWidget: SvgPicture.asset(
                        'assets/icons/pencil-simple-slash.svg',
                        width: 30,
                        height: 30,
                        colorFilter: const ColorFilter.mode(
                            Colors.black54, BlendMode.srcIn),
                      ),
                      active: false,
                      onTap: _toggleEditing,
                    ),
              navbarNewEntry(
                icon: PhosphorIcons.image,
                active: false,
                onTap: _pickImages,
              ),
              navbarNewEntry(
                icon: _isMicActive
                    ? PhosphorIcons.microphone
                    : PhosphorIcons.microphoneSlash,
                active: _isMicActive,
                onTap: _toggleMic,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/search_screen.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_state.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/search_bloc.dart';
import '../blocs/search_event.dart';
import '../blocs/search_state.dart';
import '../models/journal_entry.dart';
import '../utils/mood_utils.dart';
import '../widgets/custom_date_picker.dart';
import 'entry_detail_screen.dart';

class SearchScreen extends StatelessWidget {
  const SearchScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final journalBloc = context.read<JournalBloc>();
    return BlocProvider<SearchBloc>(
      create: (_) => SearchBloc(journalBloc: journalBloc),
      child: const _SearchView(),
    );
  }
}

class _SearchView extends StatefulWidget {
  const _SearchView({Key? key}) : super(key: key);

  @override
  State<_SearchView> createState() => _SearchViewState();
}

class _SearchViewState extends State<_SearchView> {
  final TextEditingController _searchController = TextEditingController();

  bool get _hasAnyFilter {
    final s = context.read<SearchBloc>().state;
    return s.query.isNotEmpty ||
        s.mood != null ||
        s.date != null ||
        s.withPhotosOnly;
  }

  void _executeSearch() {
    context.read<SearchBloc>().add(QueryChanged(_searchController.text.trim()));
  }

  void _resetAllFilters() {
    _searchController.clear();
    final bloc = context.read<SearchBloc>();
    bloc.add(QueryChanged(''));
    bloc.add(MoodFilterChanged(null));
    bloc.add(DateFilterChanged(null));
    bloc.add(PhotosFilterToggled(false));
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final auth = context.read<AuthBloc>().state;
    if (auth is! AuthAuthenticated) {
      return const Scaffold(
        body: Center(child: Text('Not authenticated')),
      );
    }

    final state = context.watch<SearchBloc>().state;

    return Scaffold(
      backgroundColor: defaultMoodBackground,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset('assets/images/bg2.png', fit: BoxFit.cover),
          ),
          SafeArea(
            child: Column(
              children: [
                // Back button
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  child: Row(
                    children: [
                      Align(
                        alignment: Alignment.centerLeft,
                        child: GestureDetector(
                          onTap: () => Navigator.of(context).pop(),
                          child: const Icon(
                            PhosphorIcons.arrowCircleLeft,
                            size: 32,
                            color: Colors.black,
                          ),
                        ),
                      ),
                      const SizedBox(width: 16),
                      const Text(
                        'Search',
                        style: TextStyle(
                          fontFamily: 'lufga-bold',
                          fontSize: 24,
                          // fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),

                // Redesigned search bar
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          Colors.white.withOpacity(0.95),
                          Colors.white.withOpacity(0.85)
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.08),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _searchController,
                            onSubmitted: (_) => _executeSearch(),
                            style: const TextStyle(
                              fontFamily: 'lufga-regular',
                              fontSize: 16,
                              color: Color(0xFF1A1A1A),
                            ),
                            decoration: InputDecoration(
                              hintText: 'Search entries...',
                              hintStyle: TextStyle(
                                color: Colors.grey.shade500,
                                fontFamily: 'lufga-regular',
                              ),
                              border: InputBorder.none,
                              contentPadding: const EdgeInsets.symmetric(
                                horizontal: 20,
                                vertical: 16,
                              ),
                              prefixIcon: Icon(
                                Icons.search,
                                color: Colors.grey.shade600,
                                size: 22,
                              ),
                            ),
                          ),
                        ),
                        Container(
                          margin: const EdgeInsets.only(right: 8),
                          child: ElevatedButton(
                            onPressed: _executeSearch,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFF1A1A1A),
                              foregroundColor: Colors.white,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 24,
                                vertical: 12,
                              ),
                              elevation: 0,
                              textStyle: const TextStyle(
                                fontFamily: 'lufga-semi-bold',
                                fontSize: 14,
                                letterSpacing: 0.5,
                              ),
                            ),
                            child: const Text('Search'),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Redesigned filters section
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                        vertical: 16, horizontal: 16),
                    decoration: BoxDecoration(
                      color: Colors.grey.withOpacity(0.4),
                      borderRadius: BorderRadius.circular(24),
                      boxShadow: [
                        // BoxShadow(
                        //   color: Colors.black12,
                        //   blurRadius: 2,
                        //   offset: Offset(0, 3),
                        // ),
                      ],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            // Mood dropdown

                            // Expanded(
                            //   child: DropdownButtonFormField<String?>(
                            //     value: state.mood,
                            //     hint: const Text('Mood'),
                            //     items: [
                            //       const DropdownMenuItem(
                            //           value: null, child: Text('All moods')),
                            //       ..._SearchOptions.moods.map((m) =>
                            //           DropdownMenuItem(
                            //               value: m, child: Text(m))),
                            //     ],
                            //     onChanged: (m) => context
                            //         .read<SearchBloc>()
                            //         .add(MoodFilterChanged(m)),
                            //     decoration: InputDecoration(
                            //       isDense: true,
                            //       contentPadding:
                            //           const EdgeInsets.fromLTRB(12, 14, 60, 14),
                            //       border: OutlineInputBorder(
                            //         borderRadius: BorderRadius.circular(16),
                            //         borderSide: BorderSide.none,
                            //       ),
                            //       filled: true,
                            //       fillColor: Colors.grey.shade100,
                            //     ),
                            //   ),
                            // ),

                            Flexible(
                              flex: 11,
                              child: DropdownButtonFormField<String?>(
                                value: state.mood,
                                hint: const Text('Mood'),
                                items: [
                                  const DropdownMenuItem(
                                      value: null, child: Text('All moods')),
                                  ..._SearchOptions.moods.map((m) =>
                                      DropdownMenuItem(
                                          value: m, child: Text(m))),
                                ],
                                onChanged: (m) => context
                                    .read<SearchBloc>()
                                    .add(MoodFilterChanged(m)),
                                decoration: InputDecoration(
                                  isDense: true,
                                  contentPadding: const EdgeInsets.symmetric(
                                      horizontal: 12, vertical: 14),
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(16),
                                    borderSide: BorderSide.none,
                                  ),
                                  filled: true,
                                  fillColor: Colors.white.withOpacity(0.92),
                                  // fillColor: Colors.red,
                                ),
                              ),
                            ),
                            const SizedBox(width: 12),

                            // Date picker
                            //     GestureDetector(
                            //       onTap: () async {
                            //         final picked = await showCustomDatePicker(
                            //           context: context,
                            //           initialDate: state.date ?? DateTime.now(),
                            //         );
                            //         context
                            //             .read<SearchBloc>()
                            //             .add(DateFilterChanged(picked));
                            //       },
                            //       child: Container(
                            //         padding: const EdgeInsets.symmetric(
                            //             horizontal: 16, vertical: 14),
                            //         decoration: BoxDecoration(
                            //           color: Colors.grey.shade100,
                            //           borderRadius: BorderRadius.circular(16),
                            //         ),
                            //         child: Text(
                            //           state.date != null
                            //               ? DateFormat('dd/MM/yyyy')
                            //                   .format(state.date!)
                            //               : 'Date',
                            //           style: const TextStyle(fontSize: 14),
                            //         ),
                            //       ),
                            //     ),
                            //   ],
                            // ),
                            Flexible(
                              flex: 11,
                              child: GestureDetector(
                                onTap: () async {
                                  final picked = await showCustomDatePicker(
                                    context: context,
                                    initialDate: state.date ?? DateTime.now(),
                                  );
                                  context
                                      .read<SearchBloc>()
                                      .add(DateFilterChanged(picked));
                                },
                                child: Container(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 16, vertical: 14.5),
                                  decoration: BoxDecoration(
                                    // color: Colors.white.withOpacity(0.8),
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(16),
                                    // boxShadow: [
                                    //   BoxShadow(
                                    //     color: Colors.black.withOpacity(0.06),
                                    //     blurRadius: 8,
                                    //     offset: const Offset(0, 3),
                                    //   ),
                                    // ],
                                  ),
                                  child: Row(
                                    children: [
                                      Icon(
                                        // Icons.calendar_today_outlined,
                                        PhosphorIcons.calendar,
                                        size: 24,
                                        color: Colors.black,
                                      ),
                                      const SizedBox(width: 8),
                                      Expanded(
                                        child: Text(
                                          state.date != null
                                              ? DateFormat('dd/MM/yyyy')
                                                  .format(state.date!)
                                              : 'Select Date',
                                          style: TextStyle(
                                            // fontFamily: 'lufga-regular',
                                            fontSize: 14,
                                            color: state.date != null
                                                ? const Color(0xFF1A1A1A)
                                                : Colors.grey.shade500,
                                          ),
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 12),

                        // Photos only switch

                        // Padding(
                        //   padding: const EdgeInsets.only(left: 12.0, right: 2),
                        //   child: Row(
                        //     children: [
                        //       const Icon(Icons.photo_library_outlined,
                        //           size: 20, color: Colors.black54),
                        //       const SizedBox(width: 8),
                        //       const Text(
                        //         'Photos only',
                        //         style: TextStyle(
                        //             fontSize: 15, fontWeight: FontWeight.w500),
                        //       ),
                        //       const Spacer(),
                        //       Switch(
                        //         value: state.withPhotosOnly,
                        //         onChanged: (v) => context
                        //             .read<SearchBloc>()
                        //             .add(PhotosFilterToggled(v)),
                        //       ),
                        //     ],
                        //   ),
                        // ),

                        const SizedBox(height: 8),
                        Padding(
                          padding: const EdgeInsets.fromLTRB(10, 0, 8, 0),
                          child: Row(
                            children: [
                              const Icon(
                                Icons.photo_library_outlined,
                                size: 20,
                                color: Colors.black,
                              ),
                              const SizedBox(width: 8),
                              const Text(
                                'Photos only',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              const Spacer(),
                              GestureDetector(
                                onTap: () {
                                  final newVal = !state.withPhotosOnly;
                                  context
                                      .read<SearchBloc>()
                                      .add(PhotosFilterToggled(newVal));
                                },
                                child: AnimatedContainer(
                                  duration: const Duration(milliseconds: 200),
                                  width: 48,
                                  height: 28,
                                  padding: const EdgeInsets.all(3),
                                  decoration: BoxDecoration(
                                    color: state.withPhotosOnly
                                        ? Colors.black87
                                        : Colors.grey.shade300,
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Align(
                                    alignment: state.withPhotosOnly
                                        ? Alignment.centerRight
                                        : Alignment.centerLeft,
                                    child: Container(
                                      width: 20,
                                      height: 22,
                                      decoration: BoxDecoration(
                                        color: Colors.white,
                                        borderRadius: BorderRadius.circular(6),
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 8),

                        if (_hasAnyFilter)
                          Align(
                            alignment: Alignment.centerRight,
                            // child: TextButton(
                            //   onPressed: _resetAllFilters,
                            //   child: const Text(
                            //     'Reset filters',
                            //     style: TextStyle(
                            //       fontWeight: FontWeight.w500,
                            //       color: Colors.black87,
                            //     ),
                            //   ),
                            // ),
                            child: TextButton(
                              onPressed: _resetAllFilters,
                              style: TextButton.styleFrom(
                                foregroundColor: const Color(0xFF2E2A1F),
                                backgroundColor: Colors.white.withOpacity(0.92),
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 20,
                                  vertical: 10,
                                ),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(16),
                                ),
                                textStyle: const TextStyle(
                                  fontFamily: 'lufga-semi-bold',
                                  fontSize: 14,
                                  letterSpacing: 0.5,
                                ),
                              ),
                              child: const Text('Reset Filters'),
                            ),
                          ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Results
                Expanded(
                  child: !_hasAnyFilter
                      ? const SizedBox.shrink()
                      : state.filteredEntries.isEmpty
                          ? const Center(child: Text('No entries found.'))
                          : ListView.builder(
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 16),
                              itemCount: state.filteredEntries.length,
                              itemBuilder: (ctx, i) {
                                final e = state.filteredEntries[i];
                                return _buildEntryItem(e);
                              },
                            ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEntryItem(JournalEntry e) {
    final dow = DateFormat('EEE').format(e.timestamp).toLowerCase();
    final dayNum = DateFormat('d').format(e.timestamp);
    final imgs = e.attachments
        .where((a) => a.type == 'image' && File(a.url).existsSync())
        .map((a) => a.url)
        .toList();

    return GestureDetector(
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: e.id)),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 13),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 55,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.5),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Text(
                    dow,
                    style: const TextStyle(
                      fontSize: 16,
                      fontFamily: 'lufga-semi-bold',
                      color: Color(0xFF473623),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    dayNum,
                    style: const TextStyle(
                      fontSize: 18,
                      fontFamily: 'lufga-regular',
                      color: Colors.black,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    e.title.toLowerCase(),
                    style: const TextStyle(
                      fontSize: 20,
                      fontFamily: 'lufga-semi-bold-italic',
                      color: Color(0xFF473623),
                    ),
                  ),
                  Text(
                    _truncateWords(e.content, 30).toLowerCase(),
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.4,
                      fontFamily: 'lufga-regular',
                    ),
                  ),
                  if (imgs.isNotEmpty) ...[
                    const SizedBox(height: 12),
                    Row(
                      children: imgs.take(2).map((path) {
                        return Expanded(
                          child: Padding(
                            padding: const EdgeInsets.only(right: 8.0),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.file(
                                File(path),
                                height: 120,
                                fit: BoxFit.cover,
                                errorBuilder: (ctx, _, __) => Container(
                                  height: 120,
                                  color: Colors.grey.shade200,
                                  child: const Icon(Icons.broken_image),
                                ),
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _truncateWords(String text, int limit) {
    final words = text.split(RegExp(r'\s+'));
    if (words.length <= limit) return text;
    return words.take(limit).join(' ') + '...';
  }
}

class _SearchOptions {
  static const List<String> moods = [
    'Happy',
    'Excited',
    'Calm',
    'Grateful',
    'Loving',
    'Confident',
    'Sad',
    'Angry',
    'Anxious',
    'Lonely',
    'Guilty',
    'Jealous',
    'Confused',
    'Surprised',
    'Bored',
    'Restless',
    'Inspired',
    'Distracted',
  ];
}

]

roohbaru_app/lib/screens/home_screen.dart: [
// lib/screens/home_screen.dart

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import 'package:roohbaru_app/screens/insights_screen.dart';
import 'package:roohbaru_app/screens/profile_screen.dart';
import 'package:roohbaru_app/screens/search_screen.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../blocs/journal_state.dart';
import '../models/journal_entry.dart';
import '../services/quote_service.dart';
import '../utils/mood_utils.dart';
import '../widgets/navbar.dart';
import '../widgets/header_row.dart';
import '../widgets/greeting_section.dart';
import '../widgets/quote_section.dart';
import '../widgets/custom_date_picker.dart'; // ← NEW import
import 'intro_screen.dart';
import 'new_entry_screen.dart';
import 'entry_detail_screen.dart';

class HomeScreen extends StatefulWidget {
  final User user;
  const HomeScreen({Key? key, required this.user}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late Future<Quote> _quoteFuture;
  int _selectedIndex = 0;
  DateTime? _selectedDate; // ← track the picked date

  static const _defaultBg = defaultMoodBackground;

  @override
  void initState() {
    super.initState();
    context.read<JournalBloc>().add(LoadEntries(widget.user.uid));
    _quoteFuture = QuoteService.fetchTodayQuote();
  }

  String get _greeting {
    final h = DateTime.now().hour;
    if (h < 12) return 'good morning';
    if (h < 17) return 'good afternoon';
    return 'good evening';
  }

  String _truncateWords(String text, int limit) {
    final words = text.split(RegExp(r'\s+'));
    if (words.length <= limit) return text;
    return words.take(limit).join(' ') + '...';
  }

  Future<void> _pickDate() async {
    final picked = await showCustomDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
    );
    if (picked != null) {
      setState(() {
        _selectedDate = DateTime(picked.year, picked.month, picked.day);
      });
    }
  }

  void _resetDate() {
    setState(() {
      _selectedDate = null;
    });
  }

  void _onAddPressed() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => NewEntryScreen(userId: widget.user.uid),
      ),
    );
  }

  void _onItemSelected(int index) {
    if (index == 1) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const SearchScreen()),
      );
    } else if (index == 2) {
      // ← HANDLES INSIGHTS TAB
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const InsightsScreen()),
      );
    } else if (index == 3) {
      // ← HANDLES INSIGHTS TAB
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const ProfileScreen()),
      );
    } else {
      setState(() => _selectedIndex = index);
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (ctx, st) {
        if (st is AuthUnauthenticated) {
          Navigator.of(ctx).pushAndRemoveUntil(
            MaterialPageRoute(builder: (_) => const IntroScreen()),
            (_) => false,
          );
        } else if (st is AuthError) {
          ScaffoldMessenger.of(ctx)
              .showSnackBar(SnackBar(content: Text(st.message)));
        }
      },
      child: BlocBuilder<JournalBloc, JournalState>(
        builder: (ctx, journalState) {
          Color bg = _defaultBg;
          List<JournalEntry> all = [];
          if (journalState is JournalLoaded) {
            all = journalState.entries;
            if (all.isNotEmpty) {
              bg = moodBackgroundColors[all.first.mood] ?? _defaultBg;
            }
          }

          return Scaffold(
            backgroundColor: bg,
            body: Stack(
              children: [
                Container(color: bg),
                Positioned.fill(
                  child: Image.asset(
                    'assets/images/bg.png',
                    fit: BoxFit.cover,
                  ),
                ),
                SafeArea(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: SingleChildScrollView(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // ← only this row is updated to toggle calendar/reset
                          HeaderRow(
                            onCalendarPressed: _pickDate,
                            isDateSelected: _selectedDate != null,
                            onReset: _resetDate,
                            onLogoutPressed: () {
                              context.read<AuthBloc>().add(SignOutRequested());
                            },
                          ),

                          GreetingSection(greeting: _greeting),
                          const SizedBox(height: 24),
                          QuoteSection(quoteFuture: _quoteFuture),
                          const SizedBox(height: 6),
                          if (journalState is JournalLoading)
                            const Center(child: CircularProgressIndicator())
                          else if (journalState is JournalError)
                            Center(child: Text(journalState.message))
                          else if (all.isEmpty)
                            const Center(child: Text('No entries yet.'))
                          else
                            ..._buildMonthlySections(all),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
            bottomNavigationBar: Container(
              color: bg,
              child: CustomNavbar(
                selectedIndex: _selectedIndex,
                onItemSelected: _onItemSelected,
                onAddPressed: _onAddPressed,
              ),
            ),
          );
        },
      ),
    );
  }

  List<Widget> _buildMonthlySections(List<JournalEntry> all) {
    // If a date is selected, filter down and show only that day's entries
    if (_selectedDate != null) {
      final filtered = all.where((e) {
        final d = e.timestamp;
        return d.year == _selectedDate!.year &&
            d.month == _selectedDate!.month &&
            d.day == _selectedDate!.day;
      }).toList();

      final label =
          DateFormat('d MMM yyyy').format(_selectedDate!).toLowerCase();

      return [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 10),
          child: Row(
            children: [
              Text(
                label, // header now shows the picked date
                style: const TextStyle(
                  fontSize: 20,
                  fontFamily: 'lufga-bold',
                  color: Color(0xFF473623),
                ),
              ),
              const Spacer(),
              GestureDetector(
                onTap: _onAddPressed,
                child: const Text(
                  '+ add new',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.blue,
                  ),
                ),
              ),
            ],
          ),
        ),
        for (var e in filtered) _buildEntryItem(e),
      ];
    }

    // Otherwise original month‐grouping
    final Map<DateTime, List<JournalEntry>> byMonth = {};
    for (var e in all) {
      final key = DateTime(e.timestamp.year, e.timestamp.month);
      byMonth.putIfAbsent(key, () => []).add(e);
    }
    final months = byMonth.keys.toList()..sort((a, b) => b.compareTo(a));

    final List<Widget> sections = [];
    for (var month in months) {
      final label = DateFormat('MMMM yyyy').format(month);
      final entries = byMonth[month]!
        ..sort((a, b) => b.timestamp.compareTo(a.timestamp));

      sections.add(
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 10),
          child: Row(
            children: [
              Text(
                label.toLowerCase(), // original month label
                style: const TextStyle(
                  fontSize: 20,
                  fontFamily: 'lufga-bold',
                  color: Color(0xFF473623),
                ),
              ),
              const Spacer(),
              GestureDetector(
                onTap: _onAddPressed,
                child: const Text(
                  '+ add new',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.blue,
                  ),
                ),
              ),
            ],
          ),
        ),
      );
      for (var e in entries) {
        sections.add(_buildEntryItem(e));
      }
    }
    return sections;
  }

  Widget _buildEntryItem(JournalEntry e) {
    final dow = DateFormat('EEE').format(e.timestamp).toLowerCase();
    final dayNum = DateFormat('d').format(e.timestamp);

    final imgs = e.attachments
        .where((a) => a.type == 'image' && File(a.url).existsSync())
        .map((a) => a.url)
        .toList();

    return GestureDetector(
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: e.id)),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 13),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 55,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.5),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Text(
                    dow,
                    style: const TextStyle(
                      fontSize: 16,
                      fontFamily: 'lufga-semi-bold',
                      color: Color(0xFF473623),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    dayNum,
                    style: const TextStyle(
                      fontSize: 18,
                      fontFamily: 'lufga-regular',
                      color: Colors.black,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    e.title.toLowerCase(),
                    style: const TextStyle(
                      fontSize: 20,
                      fontFamily: 'lufga-semi-bold-italic',
                      color: Color(0xFF473623),
                    ),
                  ),
                  Text(
                    _truncateWords(e.content, 30).toLowerCase(),
                    style: const TextStyle(
                      fontSize: 16,
                      height: 1.4,
                      fontFamily: 'lufga-regular',
                    ),
                  ),
                  if (imgs.isNotEmpty) ...[
                    const SizedBox(height: 12),
                    Row(
                      children: imgs.take(2).map((path) {
                        return Expanded(
                          child: Padding(
                            padding: const EdgeInsets.only(right: 8.0),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.file(
                                File(path),
                                height: 120,
                                fit: BoxFit.cover,
                                errorBuilder: (ctx, _, __) => Container(
                                  height: 120,
                                  color: Colors.grey.shade200,
                                  child: const Icon(Icons.broken_image),
                                ),
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/intro_screen.dart: [
import 'package:flutter/material.dart';
// import 'package:video_player/video_player.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:roohbaru_app/screens/login_screen.dart';
import 'package:roohbaru_app/screens/signup_screen.dart';
import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import 'home_screen.dart';
import '../widgets/primary_button.dart';
import '../widgets/secondary_button.dart';

class IntroScreen extends StatefulWidget {
  const IntroScreen({super.key});

  @override
  State<IntroScreen> createState() => _IntroScreenState();
}

class _IntroScreenState extends State<IntroScreen> {
  // late VideoPlayerController _controller;

  @override
  void initState() {
    super.initState();

    // _controller = VideoPlayerController.asset('assets/videos/intro.mp4')
    //   ..initialize().then((_) {
    //     _controller.setLooping(false);
    //     _controller.setVolume(0);
    //     // _controller.play();
    //     if (mounted) setState(() {});
    //   });
  }

  @override
  void dispose() {
    // _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocListener<AuthBloc, AuthState>(
        listener: (ctx, state) {
          if (state is AuthAuthenticated) {
            Navigator.of(context).pushAndRemoveUntil(
              MaterialPageRoute(builder: (_) => HomeScreen(user: state.user)),
              (_) => false,
            );
          }
        },
        child: Stack(
          fit: StackFit.expand,
          children: [
            Image.asset(
              'assets/images/intro.png',
              fit: BoxFit.cover,
            ),
            Container(color: Colors.black.withOpacity(0.3)),
            SafeArea(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 24),
                child: Column(
                  children: [
                    const Spacer(flex: 2),
                    Image.asset(
                      'assets/images/logo.png',
                      height: 130,
                      fit: BoxFit.contain,
                    ),
                    const Spacer(flex: 4),

                    // Sign Up
                    PrimaryButton(
                      label: 'Sign Up',
                      backgroundColor: Colors.white,
                      textColor: Colors.black,
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => const SignupScreen()),
                        );
                      },
                    ),
                    const SizedBox(height: 16),

                    // Sign In
                    SecondaryButton(
                      label: 'Sign In',
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => const LoginScreen()),
                        );
                      },
                    ),

                    const SizedBox(height: 28),
                    Container(
                      width: 80,
                      height: 4,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(2),
                      ),
                    ),
                    const SizedBox(height: 16),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

]

