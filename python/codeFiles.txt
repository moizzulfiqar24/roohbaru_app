roohbaru_app/lib/main.dart: [
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

import 'services/auth_service.dart';
import 'blocs/auth_bloc.dart';
import 'blocs/auth_event.dart';
import 'blocs/auth_state.dart';
import 'blocs/journal_bloc.dart';
import 'screens/home_screen.dart';
import 'screens/intro_screen.dart';

// import 'package:http/http.dart' as http;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: "assets/.env");
  await Firebase.initializeApp();
  // testNetwork();
  runApp(const MyApp());
}

// void testNetwork() async {
//   try {
//     final r = await http.get(Uri.parse('https://www.google.com'));
//     print('Google status: ${r.statusCode}');
//   } catch (e) {
//     print('Network test failed: $e');
//   }
// }



class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider<AuthBloc>(
          create: (_) => AuthBloc(AuthService())..add(AppStarted()),
        ),
        BlocProvider<JournalBloc>(
          create: (_) => JournalBloc(),
        ),
      ],
      child: MaterialApp(
        title: 'Journal App',
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          useMaterial3: true,
          colorSchemeSeed: Colors.indigo,
          scaffoldBackgroundColor: Colors.white,
          appBarTheme: const AppBarTheme(
            elevation: 0,
            backgroundColor: Colors.transparent,
            iconTheme: IconThemeData(color: Colors.black),
          ),
        ),
        home: BlocBuilder<AuthBloc, AuthState>(
          builder: (context, state) {
            if (state is AuthAuthenticated) {
              return HomeScreen(user: state.user);
            } else {
              return const IntroScreen();
            }
          },
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/utils: no code files are added in this folder yet

roohbaru_app/lib/models/journal_entry.dart: [
import 'package:cloud_firestore/cloud_firestore.dart';

class Attachment {
  final String url;
  final String name;
  final String type; // e.g., 'image', 'pdf', 'doc'

  Attachment({required this.url, required this.name, required this.type});

  factory Attachment.fromMap(Map<String, dynamic> map) {
    return Attachment(
      url: map['url'] as String,
      name: map['name'] as String,
      type: map['type'] as String,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'url': url,
      'name': name,
      'type': type,
    };
  }
}

class JournalEntry {
  final String id;
  final String userId;
  final String title;
  final String content;
  final DateTime timestamp;
  final List<Attachment> attachments;

  // NEW:
  final String sentiment;
  final String mood;
  final List<String> suggestions;

  const JournalEntry({
    required this.id,
    required this.userId,
    required this.title,
    required this.content,
    required this.timestamp,
    this.attachments = const [],
    this.sentiment = '',
    this.mood = '',
    this.suggestions = const [],
  });

  factory JournalEntry.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return JournalEntry(
      id: doc.id,
      userId: data['userId'] as String,
      title: data['title'] as String,
      content: data['content'] as String,
      timestamp: (data['timestamp'] as Timestamp).toDate(),
      attachments: (data['attachments'] as List<dynamic>? ?? [])
          .map((a) => Attachment.fromMap(a as Map<String, dynamic>))
          .toList(),
      sentiment: data['sentiment'] as String? ?? '',
      mood: data['mood'] as String? ?? '',
      suggestions:
          List<String>.from(data['suggestions'] as List<dynamic>? ?? []),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'title': title,
      'content': content,
      'timestamp': Timestamp.fromDate(timestamp),
      'attachments': attachments.map((a) => a.toMap()).toList(),
      'sentiment': sentiment,
      'mood': mood,
      'suggestions': suggestions,
    };
  }

  JournalEntry copyWith({
    String? title,
    String? content,
    List<Attachment>? attachments,
    String? sentiment,
    String? mood,
    List<String>? suggestions,
  }) {
    return JournalEntry(
      id: id,
      userId: userId,
      title: title ?? this.title,
      content: content ?? this.content,
      timestamp: timestamp,
      attachments: attachments ?? this.attachments,
      sentiment: sentiment ?? this.sentiment,
      mood: mood ?? this.mood,
      suggestions: suggestions ?? this.suggestions,
    );
  }
}

]

roohbaru_app/lib/blocs/journal_event.dart: [
import 'package:equatable/equatable.dart';
import '../models/journal_entry.dart';

abstract class JournalEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

class LoadEntries extends JournalEvent {
  final String userId;
  LoadEntries(this.userId);
  @override
  List<Object?> get props => [userId];
}

class AddEntry extends JournalEvent {
  final JournalEntry entry;
  AddEntry(this.entry);
  @override
  List<Object?> get props => [entry];
}

class UpdateEntry extends JournalEvent {
  final JournalEntry entry;
  UpdateEntry(this.entry);
  @override
  List<Object?> get props => [entry];
}

class DeleteEntry extends JournalEvent {
  final String entryId;
  DeleteEntry(this.entryId);
  @override
  List<Object?> get props => [entryId];
}

]

roohbaru_app/lib/blocs/journal_bloc.dart: [
// lib/blocs/journal_bloc.dart

import 'dart:developer';

import 'package:bloc/bloc.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import '../models/journal_entry.dart';
import '../services/ai_service.dart';
import 'journal_event.dart';
import 'journal_state.dart';

class JournalBloc extends Bloc<JournalEvent, JournalState> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final AIService _aiService = AIService();

  JournalBloc() : super(JournalInitial()) {
    on<LoadEntries>(_onLoadEntries);
    on<AddEntry>(_onAddEntry);
    on<UpdateEntry>(_onUpdateEntry);
    on<DeleteEntry>(_onDeleteEntry);
  }

  Future<void> _onLoadEntries(
      LoadEntries event, Emitter<JournalState> emit) async {
    emit(JournalLoading());
    try {
      // build a stream of List<JournalEntry> from your query
      final stream = _firestore
          .collection('entries')
          .where('userId', isEqualTo: event.userId)
          .orderBy('timestamp', descending: true)
          .snapshots()
          .map((snap) =>
              snap.docs.map((d) => JournalEntry.fromFirestore(d)).toList());

      // await emit.forEach keeps the handler alive and routes every new snapshot
      await emit.forEach<List<JournalEntry>>(
        stream,
        onData: (entries) => JournalLoaded(entries),
        onError: (_, __) => JournalError('Failed to load journal entries.'),
      );
    } catch (e, st) {
      log('LoadEntries error: $e\n$st');
      emit(JournalError('Something went wrong: $e'));
    }
  }

  Future<void> _onAddEntry(AddEntry event, Emitter<JournalState> emit) async {
    // no emit(JournalLoading()) here—UI is already showing snapshot state
    try {
      final aiResult = await _aiService.analyzeEntry(event.entry.content);
      final enriched = event.entry.copyWith(
        sentiment: aiResult.sentiment,
        mood: aiResult.mood,
        suggestions: aiResult.suggestions,
      );
      await _firestore
          .collection('entries')
          .doc(enriched.id)
          .set(enriched.toMap());
      // ❌ no local emit—your snapshot handler will fire and emit the new list
    } catch (e, st) {
      log('AddEntry error: $e\n$st');
      emit(JournalError('Failed to add entry: ${e.toString()}'));
    }
  }

  Future<void> _onUpdateEntry(
      UpdateEntry event, Emitter<JournalState> emit) async {
    emit(JournalLoading());
    try {
      final aiResult = await _aiService.analyzeEntry(event.entry.content);
      final enriched = event.entry.copyWith(
        sentiment: aiResult.sentiment,
        mood: aiResult.mood,
        suggestions: aiResult.suggestions,
      );
      await _firestore
          .collection('entries')
          .doc(enriched.id)
          .update(enriched.toMap());
      // snapshot will pick up the change and re-emit
    } catch (e, st) {
      log('UpdateEntry error: $e\n$st');
      emit(JournalError('Failed to update entry: ${e.toString()}'));
    }
  }

  Future<void> _onDeleteEntry(
      DeleteEntry event, Emitter<JournalState> emit) async {
    try {
      await _firestore.collection('entries').doc(event.entryId).delete();
      // snapshot will re-emit remaining entries
    } catch (e, st) {
      log('DeleteEntry error: $e\n$st');
      emit(JournalError('Failed to delete entry: ${e.toString()}'));
    }
  }
}

]

roohbaru_app/lib/blocs/journal_state.dart: [
import 'package:equatable/equatable.dart';
import '../models/journal_entry.dart';

abstract class JournalState extends Equatable {
  @override
  List<Object?> get props => [];
}

class JournalInitial extends JournalState {}

class JournalLoading extends JournalState {}

class JournalLoaded extends JournalState {
  final List<JournalEntry> entries;
  JournalLoaded(this.entries);

  @override
  List<Object?> get props => [entries];
}

class JournalError extends JournalState {
  final String message;
  JournalError(this.message);

  @override
  List<Object?> get props => [message];
}

]

roohbaru_app/lib/blocs/auth_event.dart: [
import 'package:equatable/equatable.dart';

abstract class AuthEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

class AppStarted extends AuthEvent {}

class GoogleSignInRequested extends AuthEvent {}

class EmailSignInRequested extends AuthEvent {
  final String email;
  final String password;
  EmailSignInRequested({required this.email, required this.password});
  @override
  List<Object?> get props => [email, password];
}

class EmailSignUpRequested extends AuthEvent {
  final String name;
  final String email;
  final String password;
  EmailSignUpRequested({
    required this.name,
    required this.email,
    required this.password,
  });
  @override
  List<Object?> get props => [name, email, password];
}

class SignOutRequested extends AuthEvent {}

]

roohbaru_app/lib/blocs/auth_bloc.dart: [
import 'dart:developer';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../services/auth_service.dart';
import 'auth_event.dart';
import 'auth_state.dart';

class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final AuthService _authService;
  AuthBloc(this._authService) : super(AuthInitial()) {
    on<AppStarted>(_onAppStarted);
    on<GoogleSignInRequested>(_onGoogleSignIn);
    on<EmailSignInRequested>(_onEmailSignIn);
    on<EmailSignUpRequested>(_onEmailSignUp);
    on<SignOutRequested>(_onSignOut);
  }

  Future<void> _onAppStarted(AppStarted event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    final user = _authService.currentUser;
    if (user != null) {
      emit(AuthAuthenticated(user));
    } else {
      emit(AuthUnauthenticated());
    }
  }

  Future<void> _onGoogleSignIn(
      GoogleSignInRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      log('Google sign-in initiated');
      final cred = await _authService.loginWithGoogle();
      if (cred?.user != null) {
        emit(AuthAuthenticated(cred!.user!));
      } else {
        emit(AuthError('Google sign-in cancelled'));
        emit(AuthUnauthenticated());
      }
    } catch (e, st) {
      log('Google sign-in error: $e\n$st');
      emit(AuthError('Google sign-in failed'));
      emit(AuthUnauthenticated());
    }
  }

  Future<void> _onEmailSignIn(
      EmailSignInRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      final user = await _authService.loginUserWithEmailAndPassword(
          event.email.trim(), event.password);
      if (user != null) {
        emit(AuthAuthenticated(user));
      } else {
        emit(AuthError('Invalid email or password'));
        emit(AuthUnauthenticated());
      }
    } catch (e, st) {
      log('Email sign-in error: $e\n$st');
      emit(AuthError('Email sign-in failed'));
      emit(AuthUnauthenticated());
    }
  }

  Future<void> _onEmailSignUp(
      EmailSignUpRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      final user = await _authService.createUserWithEmailAndPassword(
          event.email.trim(), event.password);
      if (user != null) {
        await user.updateDisplayName(event.name.trim());
        await user.reload();
        emit(AuthAuthenticated(_authService.currentUser!));
      } else {
        emit(AuthError('Sign-up failed'));
        emit(AuthUnauthenticated());
      }
    } catch (e, st) {
      log('Email sign-up error: $e\n$st');
      emit(AuthError('Sign-up failed'));
      emit(AuthUnauthenticated());
    }
  }

  Future<void> _onSignOut(
      SignOutRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authService.signOut();
      emit(AuthUnauthenticated());
    } catch (e, st) {
      log('Sign-out error: $e\n$st');
      emit(AuthError('Sign-out failed'));
      emit(AuthUnauthenticated());
    }
  }
}

]

roohbaru_app/lib/blocs/auth_state.dart: [
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart';

abstract class AuthState extends Equatable {
  @override
  List<Object?> get props => [];
}

class AuthInitial extends AuthState {}

class AuthLoading extends AuthState {}

class AuthAuthenticated extends AuthState {
  final User user;
  AuthAuthenticated(this.user);
  @override
  List<Object?> get props => [user];
}

class AuthUnauthenticated extends AuthState {}

class AuthError extends AuthState {
  final String message;
  AuthError(this.message);
  @override
  List<Object?> get props => [message];
}

]

roohbaru_app/lib/screens/new_entry_screen.dart: [
import 'dart:io';

import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:uuid/uuid.dart';

import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../models/journal_entry.dart';
import '../services/file_storage_service.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/primary_button.dart';
import 'entry_detail_screen.dart';

class NewEntryScreen extends StatefulWidget {
  final String userId;
  const NewEntryScreen({super.key, required this.userId});

  @override
  State<NewEntryScreen> createState() => _NewEntryScreenState();
}

class _NewEntryScreenState extends State<NewEntryScreen> {
  final TextEditingController _titleCtrl = TextEditingController();
  final TextEditingController _contentCtrl = TextEditingController();

  final List<Attachment> _attachments = [];
  final FileStorageService _fileService = FileStorageService();
  bool _showTitleError = false;

  @override
  void dispose() {
    _titleCtrl.dispose();
    _contentCtrl.dispose();
    super.dispose();
  }

  Future<void> _pickFiles() async {
    final result = await FilePicker.platform.pickFiles(
      allowMultiple: true,
      withReadStream: false,
    );

    if (result != null && result.files.isNotEmpty) {
      for (final file in result.files) {
        if (file.path == null) continue;

        final sourceFile = File(file.path!);
        final savedFile =
            await _fileService.saveFileLocally(sourceFile, file.name);

        final ext = file.extension?.toLowerCase() ?? '';
        String type = 'file';
        if (['jpg', 'jpeg', 'png', 'gif'].contains(ext)) {
          type = 'image';
        } else if (ext == 'pdf') {
          type = 'pdf';
        }

        _attachments.add(Attachment(
          url: savedFile.path,
          name: file.name,
          type: type,
        ));
      }
      setState(() {});
    }
  }

  void _submitEntry() {
    final title = _titleCtrl.text.trim();
    final content = _contentCtrl.text.trim();

    if (title.isEmpty) {
      setState(() => _showTitleError = true);
      return;
    }

    final entry = JournalEntry(
      id: const Uuid().v4(),
      userId: widget.userId,
      title: title,
      content: content,
      timestamp: DateTime.now(),
      attachments: _attachments,
    );

    // 1) Dispatch the AddEntry so it actually lands in Firestore & BLoC
    context.read<JournalBloc>().add(AddEntry(entry));

    // 2) Then navigate to detail—once the BLoC writes it, your snapshot/listener
    //    or optimistic update will include it and EntryDetailScreen will find it.
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(
        builder: (_) => EntryDetailScreen(entryId: entry.id),
      ),
    );
  }

  Widget _buildAttachmentPreview() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: _attachments.map((a) {
        final isImage = a.type == 'image';
        return ListTile(
          leading: isImage
              ? Image.file(File(a.url),
                  width: 40, height: 40, fit: BoxFit.cover)
              : const Icon(Icons.insert_drive_file, size: 32),
          title: Text(a.name),
        );
      }).toList(),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('New Entry')),
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              CustomTextField(
                label: 'Title',
                hint: 'Give it a title...',
                controller: _titleCtrl,
                errorText: _showTitleError ? 'Title is required' : null,
              ),
              const SizedBox(height: 16),
              CustomTextField(
                label: 'Content',
                hint: 'Write your thoughts...',
                controller: _contentCtrl,
              ),
              const SizedBox(height: 24),
              Align(
                alignment: Alignment.centerLeft,
                child: TextButton.icon(
                  onPressed: _pickFiles,
                  icon: const Icon(Icons.attach_file),
                  label: const Text('Add Attachment'),
                ),
              ),
              if (_attachments.isNotEmpty) _buildAttachmentPreview(),
              const SizedBox(height: 24),
              PrimaryButton(
                label: 'Save Entry',
                onPressed: _submitEntry,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/entry_detail_screen.dart: [
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:open_file/open_file.dart';

import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../blocs/journal_state.dart';
import '../models/journal_entry.dart';
import 'edit_entry_screen.dart';

class EntryDetailScreen extends StatelessWidget {
  final String entryId;

  const EntryDetailScreen({Key? key, required this.entryId}) : super(key: key);

  static const List<String> moodOptions = [
    'Happy',
    'Excited',
    'Calm',
    'Grateful',
    'Loving',
    'Confident',
    'Sad',
    'Angry',
    'Anxious',
    'Lonely',
    'Guilty',
    'Jealous',
    'Confused',
    'Surprised',
    'Bored',
    'Restless',
    'Inspired',
    'Distracted',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Entry Detail'),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () {
              final state = context.read<JournalBloc>().state;
              if (state is JournalLoaded) {
                final idx = state.entries.indexWhere((e) => e.id == entryId);
                if (idx != -1) {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) =>
                          EditEntryScreen(entry: state.entries[idx]),
                    ),
                  );
                }
              }
            },
          ),
          IconButton(
            icon: const Icon(Icons.delete),
            onPressed: () async {
              final confirm = await showDialog<bool>(
                context: context,
                builder: (ctx) => AlertDialog(
                  title: const Text('Delete Entry'),
                  content:
                      const Text('Are you sure you want to delete this entry?'),
                  actions: [
                    TextButton(
                        onPressed: () => Navigator.pop(ctx, false),
                        child: const Text('Cancel')),
                    TextButton(
                        onPressed: () => Navigator.pop(ctx, true),
                        child: const Text('Delete',
                            style: TextStyle(color: Colors.red))),
                  ],
                ),
              );
              if (confirm == true) {
                context.read<JournalBloc>().add(DeleteEntry(entryId));
                Navigator.pop(context);
              }
            },
          ),
        ],
      ),
      body: BlocBuilder<JournalBloc, JournalState>(
        builder: (context, state) {
          if (state is JournalLoaded) {
            final idx = state.entries.indexWhere((e) => e.id == entryId);
            if (idx == -1) {
              return const Center(child: Text("Entry not found."));
            }

            final entry = state.entries[idx];
            final date =
                "${entry.timestamp.day}/${entry.timestamp.month}/${entry.timestamp.year}";

            return SingleChildScrollView(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(entry.title,
                      style: const TextStyle(
                          fontSize: 22, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 8),
                  Text(date, style: TextStyle(color: Colors.grey[600])),
                  const SizedBox(height: 16),
                  Text(entry.content, style: const TextStyle(fontSize: 16)),
                  const SizedBox(height: 24),

                  // Attachments
                  if (entry.attachments.isNotEmpty) ...[
                    const Text('Attachments',
                        style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 12),
                    ...entry.attachments.map((a) {
                      final isImage = a.type == 'image';
                      final file = File(a.url);
                      return ListTile(
                        leading: isImage
                            ? Image.file(file,
                                width: 40, height: 40, fit: BoxFit.cover)
                            : const Icon(Icons.insert_drive_file),
                        title: Text(a.name),
                        onTap: () => OpenFile.open(a.url),
                      );
                    }),
                    const SizedBox(height: 24),
                  ],

                  const Divider(),
                  const SizedBox(height: 16),

                  // Sentiment (read-only)
                  Text('Sentiment: ${entry.sentiment}',
                      style: const TextStyle(fontSize: 16)),
                  const SizedBox(height: 8),

                  // Mood (dropdown to override)
                  Row(
                    children: [
                      const Text('Mood: ',
                          style: TextStyle(
                              fontSize: 16, fontWeight: FontWeight.w500)),
                      DropdownButton<String>(
                        value: entry.mood.isNotEmpty ? entry.mood : null,
                        hint: const Text('Select Mood'),
                        items: moodOptions
                            .map((m) =>
                                DropdownMenuItem(value: m, child: Text(m)))
                            .toList(),
                        onChanged: (newMood) {
                          if (newMood != null) {
                            final overridden = entry.copyWith(mood: newMood);
                            context
                                .read<JournalBloc>()
                                .add(UpdateEntry(overridden));
                          }
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),

                  // Suggestions
                  const Text('Suggestions:',
                      style:
                          TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
                  const SizedBox(height: 8),
                  ...entry.suggestions.map((s) => Padding(
                        padding: const EdgeInsets.symmetric(vertical: 4),
                        child:
                            Text('• $s', style: const TextStyle(fontSize: 14)),
                      )),
                ],
              ),
            );
          } else if (state is JournalError) {
            return Center(child: Text(state.message));
          }
          return const Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}

]

roohbaru_app/lib/screens/signup_screen.dart: [
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../widgets/primary_button.dart';
import 'home_screen.dart';
import 'login_screen.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _emailCtrl = TextEditingController();
  final _nameCtrl = TextEditingController();
  final _passCtrl = TextEditingController();

  bool _obscurePass = true;
  bool _agreedToTerms = false;
  bool _showPasswordError = false;
  bool _emailValid = false;

  final _passwordRegex = RegExp(r'^(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$&*~]).{8,}$');
  final _emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+');

  @override
  void initState() {
    super.initState();
    _emailCtrl.addListener(() {
      setState(() {
        _emailValid = _emailRegex.hasMatch(_emailCtrl.text.trim());
      });
    });
  }

  @override
  void dispose() {
    _emailCtrl.dispose();
    _nameCtrl.dispose();
    _passCtrl.dispose();
    super.dispose();
  }

  bool get _isPasswordValid => _passwordRegex.hasMatch(_passCtrl.text.trim());

  void _submitSignup() {
    final email = _emailCtrl.text.trim();
    final name = _nameCtrl.text.trim();
    final pass = _passCtrl.text;

    setState(() {
      _showPasswordError = !_isPasswordValid;
    });

    if (!_isPasswordValid) return;

    if (!_agreedToTerms) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please agree to the terms first.")),
      );
      return;
    }

    context.read<AuthBloc>().add(
          EmailSignUpRequested(name: name, email: email, password: pass),
        );
  }

  void _handleGoogleSignIn() {
    context.read<AuthBloc>().add(GoogleSignInRequested());
  }

  Widget _buildTextField({
    required String hint,
    required IconData icon,
    required TextEditingController controller,
    bool obscure = false,
    Widget? suffixIcon,
  }) {
    return TextField(
      controller: controller,
      obscureText: obscure,
      decoration: InputDecoration(
        prefixIcon: Icon(icon),
        suffixIcon: suffixIcon,
        hintText: hint,
        filled: true,
        fillColor: Colors.white,
        contentPadding:
            const EdgeInsets.symmetric(horizontal: 16, vertical: 18),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocListener<AuthBloc, AuthState>(
        listener: (ctx, state) {
          if (state is AuthAuthenticated) {
            Navigator.of(context).pushAndRemoveUntil(
              MaterialPageRoute(builder: (_) => HomeScreen(user: state.user)),
              (_) => false,
            );
          } else if (state is AuthError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.message)),
            );
          }
        },
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 16),
                  IconButton(
                    icon: const Icon(Icons.arrow_back),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    "Let's Get Started!",
                    style: TextStyle(fontSize: 26, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Sign up, fill the form to continue.',
                    style: TextStyle(fontSize: 14, color: Colors.black54),
                  ),
                  const SizedBox(height: 32),
                  _buildTextField(
                    hint: 'Email',
                    icon: Icons.email_outlined,
                    controller: _emailCtrl,
                    suffixIcon: _emailValid
                        ? Container(
                            margin: const EdgeInsets.only(right: 12),
                            decoration: const BoxDecoration(
                              color: Colors.black,
                              shape: BoxShape.circle,
                            ),
                            child: const Icon(Icons.check,
                                size: 16, color: Colors.white),
                          )
                        : null,
                  ),
                  const SizedBox(height: 20),
                  _buildTextField(
                    hint: 'Name',
                    icon: Icons.person_outline,
                    controller: _nameCtrl,
                  ),
                  const SizedBox(height: 20),
                  _buildTextField(
                    hint: 'Password',
                    icon: Icons.lock_outline,
                    controller: _passCtrl,
                    obscure: _obscurePass,
                    suffixIcon: IconButton(
                      icon: Icon(_obscurePass
                          ? Icons.visibility_off_outlined
                          : Icons.visibility_outlined),
                      onPressed: () =>
                          setState(() => _obscurePass = !_obscurePass),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 8),
                    child: Text(
                      'At least 8 characters, 1 uppercase letter, 1 number, 1 symbol',
                      style: TextStyle(
                        fontSize: 12,
                        color: _showPasswordError ? Colors.red : Colors.black45,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Transform.scale(
                        scale: 1.4,
                        child: Checkbox(
                          value: _agreedToTerms,
                          shape: const CircleBorder(),
                          onChanged: (val) =>
                              setState(() => _agreedToTerms = val ?? false),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Padding(
                          padding: const EdgeInsets.only(top: 10),
                          child: RichText(
                            text: const TextSpan(
                              style: TextStyle(
                                  fontSize: 13, color: Colors.black54),
                              children: [
                                TextSpan(
                                    text: 'By Signing up, you agree to the '),
                                TextSpan(
                                  text: 'Terms of Service',
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black),
                                ),
                                TextSpan(text: ' and '),
                                TextSpan(
                                  text: 'Privacy Policy',
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 32),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      GestureDetector(
                        onTap: _handleGoogleSignIn,
                        child: Container(
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(color: Colors.grey.shade300),
                          ),
                          child: Image.asset(
                            'assets/images/google.png',
                            height: 24,
                            width: 24,
                          ),
                        ),
                      ),
                      const SizedBox(width: 24),
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: const Icon(Icons.apple, size: 28),
                      ),
                    ],
                  ),
                  const SizedBox(height: 32),
                  BlocBuilder<AuthBloc, AuthState>(
                    builder: (context, state) {
                      if (state is AuthLoading) {
                        return const Center(child: CircularProgressIndicator());
                      }

                      return PrimaryButton(
                        label: 'Sign Up',
                        onPressed: _submitSignup,
                      );
                    },
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text("Already have an account? "),
                      GestureDetector(
                        onTap: () {
                          Navigator.pushReplacement(
                            context,
                            MaterialPageRoute(
                                builder: (_) => const LoginScreen()),
                          );
                        },
                        child: const Text(
                          'Log in',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            decoration: TextDecoration.underline,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 32),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/login_screen.dart: [
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/primary_button.dart';
import '../widgets/social_button.dart';
import 'signup_screen.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailCtrl = TextEditingController();
  final _passCtrl = TextEditingController();
  bool _emailValid = false;
  bool _obscurePass = true;

  @override
  void initState() {
    super.initState();
    _emailCtrl.addListener(_validateEmail);
  }

  @override
  void dispose() {
    _emailCtrl.removeListener(_validateEmail);
    _emailCtrl.dispose();
    _passCtrl.dispose();
    super.dispose();
  }

  void _validateEmail() {
    final regex = RegExp(r'^[^@]+@[^@]+\.[^@]+');
    setState(() => _emailValid = regex.hasMatch(_emailCtrl.text.trim()));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: BlocListener<AuthBloc, AuthState>(
          listener: (ctx, state) {
            if (state is AuthError) {
              ScaffoldMessenger.of(ctx).showSnackBar(
                SnackBar(content: Text(state.message)),
              );
            }
          },
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Row(
                  children: [
                    IconButton(
                      icon: const Icon(Icons.arrow_back),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                    const SizedBox(width: 8),
                    const Text(
                      'Log in',
                      style: TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                CustomTextField(
                  label: 'Email address',
                  hint: 'you@example.com',
                  controller: _emailCtrl,
                  suffixIcon: _emailValid
                      ? Container(
                          margin: const EdgeInsets.only(right: 12),
                          decoration: const BoxDecoration(
                            color: Colors.black,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(Icons.check,
                              size: 16, color: Colors.white),
                        )
                      : null,
                ),
                const SizedBox(height: 24),
                CustomTextField(
                  label: 'Password',
                  hint: '••••••••',
                  controller: _passCtrl,
                  obscureText: _obscurePass,
                  suffixIcon: IconButton(
                    icon: Icon(
                      _obscurePass
                          ? Icons.visibility_off_outlined
                          : Icons.visibility_outlined,
                    ),
                    onPressed: () =>
                        setState(() => _obscurePass = !_obscurePass),
                  ),
                ),
                Align(
                  alignment: Alignment.centerRight,
                  child: TextButton(
                    onPressed: () {
                      // TODO: forgot password
                    },
                    child: const Text('Forgot password?'),
                  ),
                ),
                const SizedBox(height: 16),
                BlocBuilder<AuthBloc, AuthState>(
                  builder: (ctx, state) {
                    if (state is AuthLoading) {
                      return const Center(child: CircularProgressIndicator());
                    }
                    return PrimaryButton(
                      label: 'Log in',
                      onPressed: () {
                        context.read<AuthBloc>().add(
                              EmailSignInRequested(
                                email: _emailCtrl.text.trim(),
                                password: _passCtrl.text,
                              ),
                            );
                      },
                    );
                  },
                ),
                const SizedBox(height: 24),
                Row(
                  children: const [
                    Expanded(child: Divider()),
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 8),
                      child: Text('Or login with'),
                    ),
                    Expanded(child: Divider()),
                  ],
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    SocialButton(
                      assetPath: 'assets/images/google.png',
                      onTap: () =>
                          context.read<AuthBloc>().add(GoogleSignInRequested()),
                    ),
                    const SizedBox(width: 12),
                    SocialButton(
                      assetPath: 'assets/images/apple.png',
                      onTap: () {
                        // TODO: implement Apple Sign In
                      },
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Text("Don't have an account? "),
                    GestureDetector(
                      onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(builder: (_) => const SignupScreen()),
                      ),
                      child: Text(
                        'Sign up',
                        style: TextStyle(
                          color: Theme.of(context).colorScheme.primary,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/edit_entry_screen.dart: [
import 'dart:io';

import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:open_file/open_file.dart';

import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../models/journal_entry.dart';
import '../services/file_storage_service.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/primary_button.dart';

class EditEntryScreen extends StatefulWidget {
  final JournalEntry entry;
  const EditEntryScreen({super.key, required this.entry});

  @override
  State<EditEntryScreen> createState() => _EditEntryScreenState();
}

class _EditEntryScreenState extends State<EditEntryScreen> {
  late final TextEditingController _titleCtrl;
  late final TextEditingController _contentCtrl;

  final FileStorageService _fileService = FileStorageService();
  final List<Attachment> _attachments = [];
  bool _showTitleError = false;

  @override
  void initState() {
    super.initState();
    _titleCtrl = TextEditingController(text: widget.entry.title);
    _contentCtrl = TextEditingController(text: widget.entry.content);
    _attachments.addAll(widget.entry.attachments);
  }

  @override
  void dispose() {
    _titleCtrl.dispose();
    _contentCtrl.dispose();
    super.dispose();
  }

  Future<void> _pickFiles() async {
    final result = await FilePicker.platform.pickFiles(
      allowMultiple: true,
      withReadStream: false,
    );

    if (result != null && result.files.isNotEmpty) {
      for (final file in result.files) {
        if (file.path == null) continue;

        final sourceFile = File(file.path!);
        final savedFile =
            await _fileService.saveFileLocally(sourceFile, file.name);

        final ext = file.extension?.toLowerCase() ?? '';
        String type = 'file';
        if (['jpg', 'jpeg', 'png', 'gif'].contains(ext)) {
          type = 'image';
        } else if (ext == 'pdf') {
          type = 'pdf';
        }

        setState(() {
          _attachments.add(
            Attachment(url: savedFile.path, name: file.name, type: type),
          );
        });
      }
    }
  }

  void _removeAttachment(int index) {
    setState(() {
      _attachments.removeAt(index);
    });
  }

  void _submit() {
    final title = _titleCtrl.text.trim();
    final content = _contentCtrl.text.trim();

    if (title.isEmpty) {
      setState(() => _showTitleError = true);
      return;
    }

    final updatedEntry = widget.entry.copyWith(
      title: title,
      content: content,
      attachments: _attachments,
    );

    context.read<JournalBloc>().add(UpdateEntry(updatedEntry));
    Navigator.of(context).pop();
  }

  Widget _buildAttachmentPreview() {
    if (_attachments.isEmpty) return const SizedBox.shrink();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('Attachments',
            style: TextStyle(fontWeight: FontWeight.bold)),
        const SizedBox(height: 12),
        ..._attachments.asMap().entries.map((entry) {
          final index = entry.key;
          final a = entry.value;
          final isImage = a.type == 'image';
          final file = File(a.url);

          return ListTile(
            leading: isImage
                ? Image.file(file, width: 40, height: 40, fit: BoxFit.cover)
                : const Icon(Icons.insert_drive_file),
            title: Text(a.name),
            onTap: () => OpenFile.open(a.url),
            trailing: IconButton(
              icon: const Icon(Icons.close),
              onPressed: () => _removeAttachment(index),
            ),
          );
        }),
        const SizedBox(height: 24),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Edit Entry')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          children: [
            CustomTextField(
              label: 'Title',
              hint: 'Update title...',
              controller: _titleCtrl,
              errorText: _showTitleError ? 'Title is required' : null,
            ),
            const SizedBox(height: 16),
            CustomTextField(
              label: 'Content',
              hint: 'Update your thoughts...',
              controller: _contentCtrl,
            ),
            const SizedBox(height: 16),
            Align(
              alignment: Alignment.centerLeft,
              child: TextButton.icon(
                onPressed: _pickFiles,
                icon: const Icon(Icons.attach_file),
                label: const Text('Add Attachment'),
              ),
            ),
            _buildAttachmentPreview(),
            PrimaryButton(label: 'Save Changes', onPressed: _submit),
          ],
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/home_screen.dart: [
// lib/screens/home_screen.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import '../blocs/journal_bloc.dart';
import '../blocs/journal_event.dart';
import '../blocs/journal_state.dart';
import '../models/journal_entry.dart';
import 'intro_screen.dart';
import 'new_entry_screen.dart';
import 'entry_detail_screen.dart';

enum ViewMode { day, week }

class HomeScreen extends StatefulWidget {
  final User user;
  const HomeScreen({Key? key, required this.user}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  ViewMode _viewMode = ViewMode.day;
  DateTime _focusedDate = DateTime.now();

  @override
  void initState() {
    super.initState();
    context.read<JournalBloc>().add(LoadEntries(widget.user.uid));
  }

  bool _sameDay(DateTime a, DateTime b) =>
      a.year == b.year && a.month == b.month && a.day == b.day;

  DateTime get _weekStart =>
      _focusedDate.subtract(Duration(days: _focusedDate.weekday - 1));
  DateTime get _weekEnd => _weekStart.add(const Duration(days: 6));

  // Mood → icon
  static const _moodIcons = {
    'Happy': Icons.sentiment_satisfied_alt,
    'Excited': Icons.emoji_emotions,
    'Calm': Icons.self_improvement,
    'Grateful': Icons.favorite,
    'Loving': Icons.favorite,
    'Confident': Icons.thumb_up,
    'Sad': Icons.sentiment_dissatisfied,
    'Angry': Icons.sentiment_very_dissatisfied,
    'Anxious': Icons.sentiment_neutral,
    'Lonely': Icons.mood_bad,
    'Guilty': Icons.sentiment_very_dissatisfied,
    'Jealous': Icons.sentiment_dissatisfied,
    'Confused': Icons.help_outline,
    'Surprised': Icons.emoji_objects,
    'Bored': Icons.hourglass_empty,
    'Restless': Icons.bolt,
    'Inspired': Icons.lightbulb,
    'Distracted': Icons.blur_on,
  };

  IconData _iconFor(String mood) => _moodIcons[mood] ?? Icons.sentiment_neutral;

  // Mood → gradient
  static const _moodGradients = {
    'Happy': [Color(0xFFFFD1F0), Color(0xFFFF9FDD)],
    'Excited': [Color(0xFFFFE29A), Color(0xFFFFA97A)],
    'Calm': [Color(0xFFB8E0FF), Color(0xFF81C3EB)],
    'Grateful': [Color(0xFFFFE8A1), Color(0xFFFFC97A)],
    'Loving': [Color(0xFFFFC1E3), Color(0xFFFBA3C1)],
    'Confident': [Color(0xFFB5FFD9), Color(0xFF6CE7C5)],
    'Sad': [Color(0xFFB0BEC5), Color(0xFF78909C)],
    'Angry': [Color(0xFFFF8A80), Color(0xFFD32F2F)],
    'Anxious': [Color(0xFFE0BBE4), Color(0xFF957DAD)],
    'Lonely': [Color(0xFF90CAF9), Color(0xFF42A5F5)],
    'Guilty': [Color(0xFFD3CCE3), Color(0xFFE9E4F0)],
    'Jealous': [Color(0xFFB9F6CA), Color(0xFF69F0AE)],
    'Confused': [Color(0xFFFFF59D), Color(0xFFFFEB3B)],
    'Surprised': [Color(0xFFFFF59D), Color(0xFFFFE57F)],
    'Bored': [Color(0xFFE0E0E0), Color(0xFFBDBDBD)],
    'Restless': [Color(0xFFFFF176), Color(0xFFFFEE58)],
    'Inspired': [Color(0xFFCCFF90), Color(0xFFB2FF59)],
    'Distracted': [Color(0xFFCFD8DC), Color(0xFFB0BEC5)],
  };

  LinearGradient _gradientFor(String mood) {
    final cols =
        _moodGradients[mood] ?? [Colors.grey.shade300, Colors.grey.shade400];
    return LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: cols,
    );
  }

  String _fmtMonthDay(DateTime d) {
    const names = [
      '',
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec'
    ];
    return '${names[d.month]} ${d.day}';
  }

  @override
  Widget build(BuildContext context) {
    final name = widget.user.displayName ?? widget.user.email ?? 'User';

    return BlocListener<AuthBloc, AuthState>(
      listener: (ctx, st) {
        if (st is AuthUnauthenticated) {
          Navigator.of(ctx).pushAndRemoveUntil(
            MaterialPageRoute(builder: (_) => const IntroScreen()),
            (_) => false,
          );
        } else if (st is AuthError) {
          ScaffoldMessenger.of(ctx)
              .showSnackBar(SnackBar(content: Text(st.message)));
        }
      },
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          title: Text('Roohbaru — Hi, $name'),
          backgroundColor: Colors.transparent,
          elevation: 0,
          actions: [
            IconButton(
              icon: const Icon(Icons.logout, color: Colors.black87),
              onPressed: () => context.read<AuthBloc>().add(SignOutRequested()),
            )
          ],
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () => Navigator.push(
            context,
            MaterialPageRoute(
                builder: (_) => NewEntryScreen(userId: widget.user.uid)),
          ),
          child: const Icon(Icons.add),
        ),
        body: BlocBuilder<JournalBloc, JournalState>(
          builder: (ctx, journalState) {
            List<JournalEntry> entries = [];
            if (journalState is JournalLoaded) {
              entries = journalState.entries;
            }

            // filter
            final filtered = entries.where((e) {
              if (_viewMode == ViewMode.day) {
                return _sameDay(e.timestamp, _focusedDate);
              } else {
                return !e.timestamp.isBefore(_weekStart) &&
                    !e.timestamp.isAfter(_weekEnd);
              }
            }).toList();

            final headerGrad = filtered.isNotEmpty
                ? _gradientFor(filtered.first.mood)
                : const LinearGradient(
                    colors: [Color(0xFFB39DDB), Color(0xFF9575CD)],
                  );

            return Column(
              children: [
                // TOP AREA
                Container(
                  decoration: BoxDecoration(
                    gradient: headerGrad,
                    borderRadius: const BorderRadius.vertical(
                        bottom: Radius.circular(12)),
                  ),
                  padding: const EdgeInsets.only(bottom: 16),
                  child: SafeArea(
                    bottom: false,
                    child: Padding(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 8),
                      child: Column(
                        children: [
                          // Title, toggle, search
                          Row(
                            children: [
                              const Text(
                                'Journal',
                                style: TextStyle(
                                    fontSize: 24,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.white),
                              ),
                              const Spacer(),
                              // Day/Week container
                              Container(
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(12),
                                  border:
                                      Border.all(color: Colors.grey.shade300),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    _buildToggle('Day', ViewMode.day),
                                    _buildToggle('Week', ViewMode.week),
                                  ],
                                ),
                              ),
                              const SizedBox(width: 12),
                              // Search
                              Container(
                                width: 40,
                                height: 32,
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(8),
                                  border:
                                      Border.all(color: Colors.grey.shade300),
                                ),
                                child: IconButton(
                                  icon: const Icon(Icons.search,
                                      size: 20, color: Colors.black87),
                                  onPressed: () {
                                    // TODO
                                  },
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 12),
                          if (_viewMode == ViewMode.day)
                            _buildDaySlider()
                          else
                            _buildWeekPicker(),
                        ],
                      ),
                    ),
                  ),
                ),
                // ENTRY LIST
                Expanded(
                  child: () {
                    if (journalState is JournalLoading) {
                      return const Center(child: CircularProgressIndicator());
                    }
                    if (journalState is JournalError) {
                      return Center(child: Text(journalState.message));
                    }
                    if (filtered.isEmpty) {
                      return const Center(
                          child: Text('No entries for this period.'));
                    }
                    return ListView.builder(
                      padding: const EdgeInsets.only(top: 8),
                      itemCount: filtered.length,
                      itemBuilder: (_, i) => _buildEntryCard(filtered[i]),
                    );
                  }(),
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  Widget _buildToggle(String label, ViewMode mode) {
    final selected = _viewMode == mode;
    return GestureDetector(
      onTap: () {
        setState(() => _viewMode = mode);
      },
      child: Container(
        width: 60,
        height: 32,
        decoration: BoxDecoration(
          color: selected ? Colors.black : Colors.white,
          borderRadius: BorderRadius.circular(8),
        ),
        alignment: Alignment.center,
        child: Text(
          label,
          style: TextStyle(
            color: selected ? Colors.white : Colors.grey.shade600,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  Widget _buildDaySlider() {
    final start = _weekStart;
    final days = List.generate(7, (i) => start.add(Duration(days: i)));

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.7),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          children: days.map((d) {
            final sel = _sameDay(d, _focusedDate);
            return GestureDetector(
              onTap: () => setState(() => _focusedDate = d),
              child: Container(
                margin: const EdgeInsets.symmetric(horizontal: 4),
                padding:
                    const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  color: sel ? Colors.black : Colors.transparent,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  children: [
                    Text(
                      d.day.toString().padLeft(2, '0'),
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: sel ? Colors.white : Colors.black,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      [
                        'Mon',
                        'Tue',
                        'Wed',
                        'Thu',
                        'Fri',
                        'Sat',
                        'Sun'
                      ][d.weekday - 1],
                      style: TextStyle(
                        fontSize: 12,
                        color: sel ? Colors.white70 : Colors.black54,
                      ),
                    ),
                  ],
                ),
              ),
            );
          }).toList(),
        ),
      ),
    );
  }

  Widget _buildWeekPicker() {
    final start = _weekStart;
    final end = _weekEnd;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          IconButton(
            icon: const Icon(Icons.chevron_left),
            onPressed: () => setState(() {
              _focusedDate = start.subtract(const Duration(days: 1));
            }),
          ),
          Text(
            '${_fmtMonthDay(start)} - ${_fmtMonthDay(end)}',
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          IconButton(
            icon: const Icon(Icons.chevron_right),
            onPressed: () => setState(() {
              _focusedDate = end.add(const Duration(days: 1));
            }),
          ),
        ],
      ),
    );
  }

  Widget _buildEntryCard(JournalEntry e) {
    final grad = _gradientFor(e.mood);
    final icon = _iconFor(e.mood);
    final hasAttach = e.attachments.isNotEmpty;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        gradient: grad,
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: () => Navigator.push(
          context,
          MaterialPageRoute(builder: (_) => EntryDetailScreen(entryId: e.id)),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Expanded(
                    child: Text(e.title,
                        style: const TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold)),
                  ),
                  if (hasAttach) const Icon(Icons.attach_file, size: 20),
                ],
              ),
              const SizedBox(height: 8),
              Text(e.content, maxLines: 2, overflow: TextOverflow.ellipsis),
              const SizedBox(height: 12),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.7),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(icon, size: 16),
                    const SizedBox(width: 4),
                    Text(e.mood, style: const TextStyle(fontSize: 14)),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/screens/intro_screen.dart: [
import 'package:flutter/material.dart';
// import 'package:video_player/video_player.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:roohbaru_app/screens/login_screen.dart';
import 'package:roohbaru_app/screens/signup_screen.dart';
import '../blocs/auth_bloc.dart';
import '../blocs/auth_event.dart';
import '../blocs/auth_state.dart';
import 'home_screen.dart';
import '../widgets/primary_button.dart';
import '../widgets/secondary_button.dart';

class IntroScreen extends StatefulWidget {
  const IntroScreen({super.key});

  @override
  State<IntroScreen> createState() => _IntroScreenState();
}

class _IntroScreenState extends State<IntroScreen> {
  // late VideoPlayerController _controller;

  @override
  void initState() {
    super.initState();

    // _controller = VideoPlayerController.asset('assets/videos/intro.mp4')
    //   ..initialize().then((_) {
    //     _controller.setLooping(false);
    //     _controller.setVolume(0);
    //     // _controller.play();
    //     if (mounted) setState(() {});
    //   });
  }

  @override
  void dispose() {
    // _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocListener<AuthBloc, AuthState>(
        listener: (ctx, state) {
          if (state is AuthAuthenticated) {
            Navigator.of(context).pushAndRemoveUntil(
              MaterialPageRoute(builder: (_) => HomeScreen(user: state.user)),
              (_) => false,
            );
          }
        },
        child: Stack(
          fit: StackFit.expand,
          children: [
            Image.asset(
              'assets/images/intro.png',
              fit: BoxFit.cover,
            ),
            Container(color: Colors.black.withOpacity(0.3)),
            SafeArea(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 24),
                child: Column(
                  children: [
                    const Spacer(flex: 2),
                    Image.asset(
                      'assets/images/logo.png',
                      height: 130,
                      fit: BoxFit.contain,
                    ),
                    const Spacer(flex: 4),

                    // Sign Up
                    PrimaryButton(
                      label: 'Sign Up',
                      backgroundColor: Colors.white,
                      textColor: Colors.black,
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => const SignupScreen()),
                        );
                      },
                    ),
                    const SizedBox(height: 16),

                    // Sign In
                    SecondaryButton(
                      label: 'Sign In',
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => const LoginScreen()),
                        );
                      },
                    ),

                    const SizedBox(height: 28),
                    Container(
                      width: 80,
                      height: 4,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(2),
                      ),
                    ),
                    const SizedBox(height: 16),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/services/file_storage_service.dart: [
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart';

class FileStorageService {
  Future<File> saveFileLocally(File sourceFile, String fileName) async {
    final appDir = await getApplicationDocumentsDirectory();
    final savedFile = File('${appDir.path}/attachments/$fileName');

    // Ensure attachments folder exists
    await savedFile.parent.create(recursive: true);
    return sourceFile.copy(savedFile.path);
  }
}

]

roohbaru_app/lib/services/auth_service.dart: [
import 'dart:developer';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn(scopes: ['email']);

  User? get currentUser => _auth.currentUser;

  Future<UserCredential?> loginWithGoogle() async {
    try {
      final googleUser = await _googleSignIn.signIn();
      if (googleUser == null) return null;
      final googleAuth = await googleUser.authentication;
      final cred = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );
      return _auth.signInWithCredential(cred);
    } catch (e, st) {
      log('loginWithGoogle error: $e\n$st');
      rethrow;
    }
  }

  Future<User?> createUserWithEmailAndPassword(
      String email, String password) async {
    try {
      final cred = await _auth.createUserWithEmailAndPassword(
          email: email, password: password);
      return cred.user;
    } catch (e) {
      log('Email signup failed: $e');
      return null;
    }
  }

  Future<User?> loginUserWithEmailAndPassword(
      String email, String password) async {
    try {
      final cred = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      return cred.user;
    } catch (e) {
      log('Email login failed: $e');
      return null;
    }
  }

  Future<void> signOut() async {
    try {
      await _googleSignIn.signOut();
      await _auth.signOut();
    } catch (e) {
      log('Sign-out error: $e');
    }
  }
}

]

roohbaru_app/lib/services/ai_service.dart: [
// lib/services/ai_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class AIResult {
  final String sentiment;
  final String mood;
  final List<String> suggestions;

  AIResult({
    required this.sentiment,
    required this.mood,
    required this.suggestions,
  });
}

class AIService {
  final String _apiKey = dotenv.env['GROQ_API_KEY'] ?? '';

  static const _endpoint = 'https://api.groq.com/openai/v1/chat/completions';
  static const _model = 'llama3-8b-8192';

  Future<AIResult> analyzeEntry(String content) async {
    if (_apiKey.isEmpty) {
      throw Exception('GROQ_API_KEY not set in .env');
    }

    final messages = [
      {
        'role': 'system',
        'content': '''
You are a helpful assistant. Analyze the following journal entry and:
1) Determine overall sentiment (Positive/Negative/Neutral).
2) Pick exactly one mood from: Happy, Excited, Calm, Grateful, Loving, Confident, Sad, Angry, Anxious, Lonely, Guilty, Jealous, Confused, Surprised, Bored, Restless, Inspired, Distracted.
3) Provide three decisive suggestions (music, quote, meditation) based on that mood.

OUTPUT ONLY a JSON object with keys "sentiment", "mood", and "suggestions" (an array of 3 strings), with no extra commentary.
'''
      },
      {
        'role': 'user',
        'content': content,
      }
    ];

    final body = {
      'model': _model,
      'messages': messages,
      'temperature': 0.2,
    };

    final resp = await http.post(
      Uri.parse(_endpoint),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $_apiKey',
      },
      body: jsonEncode(body),
    );

    if (resp.statusCode != 200) {
      throw Exception('Groq API error ${resp.statusCode}: ${resp.body}');
    }

    final decoded = jsonDecode(resp.body) as Map<String, dynamic>;
    final raw =
        (decoded['choices'] as List).first['message']['content'] as String;

    // locate the JSON object
    final start = raw.indexOf('{');
    if (start < 0) {
      throw FormatException('Couldn’t find JSON start in Groq response: $raw');
    }

    // try to find the last closing brace
    int end = raw.lastIndexOf('}');
    // if there is no trailing '}', but there is a closing ']',
    // assume JSON ended at that array and append '}'
    if (end < 0) {
      final arrayEnd = raw.lastIndexOf(']');
      if (arrayEnd < 0 || arrayEnd <= start) {
        throw FormatException('Couldn’t find JSON end in Groq response: $raw');
      }
      // include the ']' then add the missing '}'
      final jsonText = raw.substring(start, arrayEnd + 1) + '}';
      return _parseJson(jsonText, raw);
    }

    // normal case: we have both braces
    final jsonText = raw.substring(start, end + 1);
    return _parseJson(jsonText, raw);
  }

  AIResult _parseJson(String jsonText, String raw) {
    try {
      final map = jsonDecode(jsonText) as Map<String, dynamic>;
      return AIResult(
        sentiment: map['sentiment'] as String,
        mood: map['mood'] as String,
        suggestions: List<String>.from(map['suggestions'] as List),
      );
    } catch (e) {
      throw FormatException(
          'Invalid JSON from Groq:\n$jsonText\n\nraw was:\n$raw');
    }
  }
}

]

roohbaru_app/lib/widgets/primary_button.dart: [
import 'package:flutter/material.dart';

class PrimaryButton extends StatelessWidget {
  final String label;
  final VoidCallback? onPressed;
  final Color backgroundColor;
  final Color textColor;

  const PrimaryButton({
    super.key,
    required this.label,
    this.onPressed,
    this.backgroundColor = Colors.black, // default: black
    this.textColor = Colors.white, // default: white
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: 52,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          foregroundColor: textColor,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: Text(
          label,
          style: TextStyle(
            color: textColor,
            fontSize: 16,
            // fontWeight: FontWeight.w600,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/secondary_button.dart: [
import 'package:flutter/material.dart';

class SecondaryButton extends StatelessWidget {
  final String label;
  final VoidCallback? onPressed;

  const SecondaryButton({
    super.key,
    required this.label,
    this.onPressed,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: 52,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.black.withOpacity(0.3),
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12), // rectangular, not pill
          ),
          elevation: 0,
        ),
        child: Text(
          label,
          style: const TextStyle(
            // fontWeight: FontWeight.w500,
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
      ),
    );
  }
}

]

roohbaru_app/lib/widgets/custom_text_field.dart: [
import 'package:flutter/material.dart';

class CustomTextField extends StatelessWidget {
  final String label;
  final String hint;
  final TextEditingController controller;
  final bool obscureText;
  final Widget? suffixIcon;
  final String? errorText;

  const CustomTextField({
    super.key,
    required this.label,
    required this.hint,
    required this.controller,
    this.obscureText = false,
    this.suffixIcon,
    this.errorText,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label,
            style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500)),
        const SizedBox(height: 8),
        TextField(
          controller: controller,
          obscureText: obscureText,
          decoration: InputDecoration(
            hintText: hint,
            suffixIcon: suffixIcon,
            errorText: errorText,
            contentPadding:
                const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: Colors.grey),
            ),
          ),
        ),
      ],
    );
  }
}

]

roohbaru_app/lib/widgets/social_button.dart: [
import 'package:flutter/material.dart';

class SocialButton extends StatelessWidget {
  final String assetPath;
  final VoidCallback? onTap;

  const SocialButton({
    super.key,
    required this.assetPath,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          height: 48,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.grey.shade300, width: 1),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Center(
            child: Image.asset(assetPath, height: 24, width: 24),
          ),
        ),
      ),
    );
  }
}

]

